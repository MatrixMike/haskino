[$tcHitachi44780Mask_ssEi :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 20}]
 $tcHitachi44780Mask_ssEi = GHC.Types.TrNameS "Hitachi44780Mask"#,
 $tc'LCD_BLINKON_ssEh :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 20}]
 $tc'LCD_BLINKON_ssEh = GHC.Types.TrNameS "'LCD_BLINKON"#,
 $tc'LCD_CURSORON_ssEg :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 20}]
 $tc'LCD_CURSORON_ssEg = GHC.Types.TrNameS "'LCD_CURSORON"#,
 $tc'LCD_DISPLAYON_ssEf :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 20}]
 $tc'LCD_DISPLAYON_ssEf = GHC.Types.TrNameS "'LCD_DISPLAYON"#,
 $tc'LCD_ENTRYSHIFTINCREMENT_ssEe :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 80 20}]
 $tc'LCD_ENTRYSHIFTINCREMENT_ssEe =
   GHC.Types.TrNameS "'LCD_ENTRYSHIFTINCREMENT"#,
 $tc'LCD_ENTRYLEFT_ssEd :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 20}]
 $tc'LCD_ENTRYLEFT_ssEd = GHC.Types.TrNameS "'LCD_ENTRYLEFT"#,
 $tcLCD_I2C_Bits_ssEc :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 20}]
 $tcLCD_I2C_Bits_ssEc = GHC.Types.TrNameS "LCD_I2C_Bits"#,
 $tc'LCD_I2C_BACKLIGHT_ssEb :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 20}]
 $tc'LCD_I2C_BACKLIGHT_ssEb =
   GHC.Types.TrNameS "'LCD_I2C_BACKLIGHT"#,
 $tc'LCD_I2C_ENABLE_ssEa :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 20}]
 $tc'LCD_I2C_ENABLE_ssEa = GHC.Types.TrNameS "'LCD_I2C_ENABLE"#,
 $tc'LCD_I2C_RS_ssE9 :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 20}]
 $tc'LCD_I2C_RS_ssE9 = GHC.Types.TrNameS "'LCD_I2C_RS"#,
 $tcCmd_ssE8 :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
 $tcCmd_ssE8 = GHC.Types.TrNameS "Cmd"#,
 $tc'LCD_INITIALIZE_ssE7 :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 20}]
 $tc'LCD_INITIALIZE_ssE7 = GHC.Types.TrNameS "'LCD_INITIALIZE"#,
 $tc'LCD_INITIALIZE_END_ssE6 :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 20}]
 $tc'LCD_INITIALIZE_END_ssE6 =
   GHC.Types.TrNameS "'LCD_INITIALIZE_END"#,
 $tc'LCD_FUNCTIONSET_ssE5 :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 20}]
 $tc'LCD_FUNCTIONSET_ssE5 = GHC.Types.TrNameS "'LCD_FUNCTIONSET"#,
 $tc'LCD_DISPLAYCONTROL_ssE4 :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 20}]
 $tc'LCD_DISPLAYCONTROL_ssE4 =
   GHC.Types.TrNameS "'LCD_DISPLAYCONTROL"#,
 $tc'LCD_CLEARDISPLAY_ssE3 :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 20}]
 $tc'LCD_CLEARDISPLAY_ssE3 = GHC.Types.TrNameS "'LCD_CLEARDISPLAY"#,
 $tc'LCD_ENTRYMODESET_ssE2 :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 20}]
 $tc'LCD_ENTRYMODESET_ssE2 = GHC.Types.TrNameS "'LCD_ENTRYMODESET"#,
 $tc'LCD_RETURNHOME_ssE1 :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 20}]
 $tc'LCD_RETURNHOME_ssE1 = GHC.Types.TrNameS "'LCD_RETURNHOME"#,
 $tc'LCD_SETDDRAMADDR_ssE0 :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 20}]
 $tc'LCD_SETDDRAMADDR_ssE0 = GHC.Types.TrNameS "'LCD_SETDDRAMADDR"#,
 $tc'LCD_CURSORSHIFT_ssDZ :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 20}]
 $tc'LCD_CURSORSHIFT_ssDZ = GHC.Types.TrNameS "'LCD_CURSORSHIFT"#,
 $tc'LCD_SETCGRAMADDR_ssDY :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 20}]
 $tc'LCD_SETCGRAMADDR_ssDY = GHC.Types.TrNameS "'LCD_SETCGRAMADDR"#,
 $tc'LCD_NOOP_ssDX :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 20}]
 $tc'LCD_NOOP_ssDX = GHC.Types.TrNameS "'LCD_NOOP"#,
 $tcLCD_ssDW :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
 $tcLCD_ssDW = GHC.Types.TrNameS "LCD"#,
 $tc'LCD_ssDV :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
 $tc'LCD_ssDV = GHC.Types.TrNameS "'LCD"#,
 $tcLCDData_ssDU :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 20}]
 $tcLCDData_ssDU = GHC.Types.TrNameS "LCDData"#,
 $tc'LCDData_ssDT :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 20}]
 $tc'LCDData_ssDT = GHC.Types.TrNameS "'LCDData"#,
 $tcLCDController_ssDS :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 20}]
 $tcLCDController_ssDS = GHC.Types.TrNameS "LCDController"#,
 $tc'Hitachi44780_ssDR :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 20}]
 $tc'Hitachi44780_ssDR = GHC.Types.TrNameS "'Hitachi44780"#,
 $tc'I2CHitachi44780_ssDQ :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 20}]
 $tc'I2CHitachi44780_ssDQ = GHC.Types.TrNameS "'I2CHitachi44780"#,
 $trModule_ssDP :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 150 20}]
 $trModule_ssDP =
   GHC.Types.TrNameS
     "System.Hardware.Haskino.SamplePrograms.Rewrite.LCD"#,
 $trModule_ssDO :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
 $trModule_ssDO = GHC.Types.TrNameS "main"#,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
   :: GHC.Types.Module
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule =
   GHC.Types.Module $trModule_ssDO $trModule_ssDP,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'I2CHitachi44780
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'I2CHitachi44780 =
   GHC.Types.TyCon
     17622945040073447108##
     3360610396157545391##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'I2CHitachi44780_ssDQ,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'Hitachi44780
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'Hitachi44780 =
   GHC.Types.TyCon
     3887064107191201##
     9448894954215475052##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'Hitachi44780_ssDR,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tcLCDController
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tcLCDController =
   GHC.Types.TyCon
     9126452719520041907##
     333434016085671121##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tcLCDController_ssDS,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCDData
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCDData =
   GHC.Types.TyCon
     3148102760398050549##
     8607100707949538069##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCDData_ssDT,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tcLCDData
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tcLCDData =
   GHC.Types.TyCon
     92621398633280908##
     9296230521153716316##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tcLCDData_ssDU,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD =
   GHC.Types.TyCon
     15626086884565918868##
     1684971045746764432##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_ssDV,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tcLCD
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tcLCD =
   GHC.Types.TyCon
     13638502149564972126##
     17773735607887678005##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tcLCD_ssDW,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_NOOP
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_NOOP =
   GHC.Types.TyCon
     9909176109718781913##
     13043272025378498967##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_NOOP_ssDX,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_SETCGRAMADDR
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_SETCGRAMADDR =
   GHC.Types.TyCon
     5354479577886764664##
     8297984865870523249##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_SETCGRAMADDR_ssDY,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_CURSORSHIFT
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_CURSORSHIFT =
   GHC.Types.TyCon
     11360363923462964789##
     4291622769328969620##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_CURSORSHIFT_ssDZ,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_SETDDRAMADDR
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_SETDDRAMADDR =
   GHC.Types.TyCon
     58997865522941559##
     14949520412607951183##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_SETDDRAMADDR_ssE0,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_RETURNHOME
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_RETURNHOME =
   GHC.Types.TyCon
     15343329230140903005##
     15408005145379171745##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_RETURNHOME_ssE1,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_ENTRYMODESET
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_ENTRYMODESET =
   GHC.Types.TyCon
     13941123503408205229##
     4711061161456785422##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_ENTRYMODESET_ssE2,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_CLEARDISPLAY
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_CLEARDISPLAY =
   GHC.Types.TyCon
     3247318348835693761##
     1370336206652716807##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_CLEARDISPLAY_ssE3,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_DISPLAYCONTROL
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_DISPLAYCONTROL =
   GHC.Types.TyCon
     10697995384665822447##
     15999431035681542673##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_DISPLAYCONTROL_ssE4,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_FUNCTIONSET
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_FUNCTIONSET =
   GHC.Types.TyCon
     614012851826168478##
     9609822734357026796##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_FUNCTIONSET_ssE5,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_INITIALIZE_END
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_INITIALIZE_END =
   GHC.Types.TyCon
     17264992994509755952##
     5314952585651943670##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_INITIALIZE_END_ssE6,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_INITIALIZE
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_INITIALIZE =
   GHC.Types.TyCon
     17176829981535532639##
     10978260415946239223##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_INITIALIZE_ssE7,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tcCmd
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tcCmd =
   GHC.Types.TyCon
     1700613377078302402##
     18143741809537245940##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tcCmd_ssE8,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_I2C_RS
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_I2C_RS =
   GHC.Types.TyCon
     9570426909142419407##
     5824438166808351839##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_I2C_RS_ssE9,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_I2C_ENABLE
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_I2C_ENABLE =
   GHC.Types.TyCon
     12859433047072262890##
     15768448597450115097##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_I2C_ENABLE_ssEa,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_I2C_BACKLIGHT
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_I2C_BACKLIGHT =
   GHC.Types.TyCon
     13087374062976409360##
     12546101111512509551##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_I2C_BACKLIGHT_ssEb,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tcLCD_I2C_Bits
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tcLCD_I2C_Bits =
   GHC.Types.TyCon
     14459758055302852694##
     12104025973194550637##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tcLCD_I2C_Bits_ssEc,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_ENTRYLEFT
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_ENTRYLEFT =
   GHC.Types.TyCon
     13354878403344658075##
     13254941960714738470##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_ENTRYLEFT_ssEd,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_ENTRYSHIFTINCREMENT
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_ENTRYSHIFTINCREMENT =
   GHC.Types.TyCon
     13143062599186301493##
     18339635904685587502##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_ENTRYSHIFTINCREMENT_ssEe,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_DISPLAYON
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_DISPLAYON =
   GHC.Types.TyCon
     6485841148585126352##
     7108013356868212471##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_DISPLAYON_ssEf,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_CURSORON
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_CURSORON =
   GHC.Types.TyCon
     14782405478491921533##
     2680305880273703871##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_CURSORON_ssEg,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_BLINKON
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tc'LCD_BLINKON =
   GHC.Types.TyCon
     13090530450569987344##
     12162195251989661952##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tc'LCD_BLINKON_ssEh,
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tcHitachi44780Mask
   :: GHC.Types.TyCon
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$tcHitachi44780Mask =
   GHC.Types.TyCon
     2513925994454248890##
     11533484192458391913##
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$trModule
     $tcHitachi44780Mask_ssEi,
 lcdController :: LCD -> LCDController
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
 lcdController =
   \ (ds_dsA0 :: LCD) ->
     case ds_dsA0 of _ [Occ=Dead] { LCD ds_dsA1 ds_dsA2 -> ds_dsA1 },
 lcdState :: LCD -> LCDData
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
 lcdState =
   \ (ds_dsA3 :: LCD) ->
     case ds_dsA3 of _ [Occ=Dead] { LCD ds_dsA4 ds_dsA5 -> ds_dsA5 },
 lcdDisplayMode :: LCDData -> RemoteRef Word8
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
 lcdDisplayMode =
   \ (ds_dsA6 :: LCDData) ->
     case ds_dsA6
     of _ [Occ=Dead] { LCDData ds_dsA7 ds_dsA8 ds_dsA9 ds_dsAa ->
     ds_dsA7
     },
 lcdDisplayControl :: LCDData -> RemoteRef Word8
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
 lcdDisplayControl =
   \ (ds_dsAb :: LCDData) ->
     case ds_dsAb
     of _ [Occ=Dead] { LCDData ds_dsAc ds_dsAd ds_dsAe ds_dsAf ->
     ds_dsAd
     },
 lcdGlyphCount :: LCDData -> RemoteRef Word8
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
 lcdGlyphCount =
   \ (ds_dsAg :: LCDData) ->
     case ds_dsAg
     of _ [Occ=Dead] { LCDData ds_dsAh ds_dsAi ds_dsAj ds_dsAk ->
     ds_dsAj
     },
 lcdBacklightState :: LCDData -> RemoteRef Bool
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
 lcdBacklightState =
   \ (ds_dsAl :: LCDData) ->
     case ds_dsAl
     of _ [Occ=Dead] { LCDData ds_dsAm ds_dsAn ds_dsAo ds_dsAp ->
     ds_dsAp
     },
 address :: LCDController -> Word8
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 70 0}]
 address =
   \ (ds_dsAq :: LCDController) ->
     case ds_dsAq of _ [Occ=Dead] {
       Hitachi44780 ipv ipv ipv ipv ipv ipv ipv ipv ipv ipv ->
         Control.Exception.Base.recSelError
           @ 'GHC.Types.PtrRepLifted @ Word8 "address"#;
       I2CHitachi44780 ds_dsAr ds_dsAs ds_dsAt ds_dsAu -> ds_dsAr
     },
 dotMode5x10 :: LCDController -> Bool
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
 dotMode5x10 =
   \ (ds_dsAx :: LCDController) ->
     case ds_dsAx of _ [Occ=Dead] {
       Hitachi44780 ds_dsAy ds_dsAz ds_dsAA ds_dsAB ds_dsAC ds_dsAD
                    ds_dsAE ds_dsAF ds_dsAG ds_dsAH ->
         ds_dsAH;
       I2CHitachi44780 ds_dsAI ds_dsAJ ds_dsAK ds_dsAL -> ds_dsAL
     },
 lcdBL :: LCDController -> Maybe Pin
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 70 0}]
 lcdBL =
   \ (ds_dsAM :: LCDController) ->
     case ds_dsAM of _ [Occ=Dead] {
       Hitachi44780 ds_dsAN ds_dsAO ds_dsAP ds_dsAQ ds_dsAR ds_dsAS
                    ds_dsAT ds_dsAU ds_dsAV ds_dsAW ->
         ds_dsAT;
       I2CHitachi44780 ipv ipv ipv ipv ->
         Control.Exception.Base.recSelError
           @ 'GHC.Types.PtrRepLifted @ (Maybe Pin) "lcdBL"#
     },
 lcdCols :: LCDController -> Word8
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
 lcdCols =
   \ (ds_dsAZ :: LCDController) ->
     case ds_dsAZ of _ [Occ=Dead] {
       Hitachi44780 ds_dsB0 ds_dsB1 ds_dsB2 ds_dsB3 ds_dsB4 ds_dsB5
                    ds_dsB6 ds_dsB7 ds_dsB8 ds_dsB9 ->
         ds_dsB8;
       I2CHitachi44780 ds_dsBa ds_dsBb ds_dsBc ds_dsBd -> ds_dsBc
     },
 lcdD4 :: LCDController -> Pin
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 70 0}]
 lcdD4 =
   \ (ds_dsBe :: LCDController) ->
     case ds_dsBe of _ [Occ=Dead] {
       Hitachi44780 ds_dsBf ds_dsBg ds_dsBh ds_dsBi ds_dsBj ds_dsBk
                    ds_dsBl ds_dsBm ds_dsBn ds_dsBo ->
         ds_dsBh;
       I2CHitachi44780 ipv ipv ipv ipv ->
         Control.Exception.Base.recSelError
           @ 'GHC.Types.PtrRepLifted @ Pin "lcdD4"#
     },
 lcdD5 :: LCDController -> Pin
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 70 0}]
 lcdD5 =
   \ (ds_dsBr :: LCDController) ->
     case ds_dsBr of _ [Occ=Dead] {
       Hitachi44780 ds_dsBs ds_dsBt ds_dsBu ds_dsBv ds_dsBw ds_dsBx
                    ds_dsBy ds_dsBz ds_dsBA ds_dsBB ->
         ds_dsBv;
       I2CHitachi44780 ipv ipv ipv ipv ->
         Control.Exception.Base.recSelError
           @ 'GHC.Types.PtrRepLifted @ Pin "lcdD5"#
     },
 lcdD6 :: LCDController -> Pin
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 70 0}]
 lcdD6 =
   \ (ds_dsBE :: LCDController) ->
     case ds_dsBE of _ [Occ=Dead] {
       Hitachi44780 ds_dsBF ds_dsBG ds_dsBH ds_dsBI ds_dsBJ ds_dsBK
                    ds_dsBL ds_dsBM ds_dsBN ds_dsBO ->
         ds_dsBJ;
       I2CHitachi44780 ipv ipv ipv ipv ->
         Control.Exception.Base.recSelError
           @ 'GHC.Types.PtrRepLifted @ Pin "lcdD6"#
     },
 lcdD7 :: LCDController -> Pin
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 70 0}]
 lcdD7 =
   \ (ds_dsBR :: LCDController) ->
     case ds_dsBR of _ [Occ=Dead] {
       Hitachi44780 ds_dsBS ds_dsBT ds_dsBU ds_dsBV ds_dsBW ds_dsBX
                    ds_dsBY ds_dsBZ ds_dsC0 ds_dsC1 ->
         ds_dsBX;
       I2CHitachi44780 ipv ipv ipv ipv ->
         Control.Exception.Base.recSelError
           @ 'GHC.Types.PtrRepLifted @ Pin "lcdD7"#
     },
 lcdEN :: LCDController -> Pin
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 70 0}]
 lcdEN =
   \ (ds_dsC4 :: LCDController) ->
     case ds_dsC4 of _ [Occ=Dead] {
       Hitachi44780 ds_dsC5 ds_dsC6 ds_dsC7 ds_dsC8 ds_dsC9 ds_dsCa
                    ds_dsCb ds_dsCc ds_dsCd ds_dsCe ->
         ds_dsC6;
       I2CHitachi44780 ipv ipv ipv ipv ->
         Control.Exception.Base.recSelError
           @ 'GHC.Types.PtrRepLifted @ Pin "lcdEN"#
     },
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.pulseEnableDig_deep'
   :: LCDController -> Arduino (Expr ())
 [LclId,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=NEVER}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.pulseEnableDig_deep' =
   \ (c :: LCDController) ->
     >>
       @ Arduino
       System.Hardware.Haskino.Data.$fMonadArduino
       @ ()
       @ ()
       (digitalWriteE
          (rep_
             @ Pin
             System.Hardware.Haskino.Expr.$fExprBWord8
             (case c of _ [Occ=Dead] {
                Hitachi44780 ds_dsC5 ds_dsC6 ds_dsC7 ds_dsC8 ds_dsC9 ds_dsCa
                             ds_dsCb ds_dsCc ds_dsCd ds_dsCe ->
                  ds_dsC6;
                I2CHitachi44780 ipv ipv ipv ipv ->
                  Control.Exception.Base.recSelError
                    @ 'GHC.Types.PtrRepLifted @ Pin "lcdEN"#
              }))
          (rep_
             @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.False))
       (>>
          @ Arduino
          System.Hardware.Haskino.Data.$fMonadArduino
          @ ()
          @ ()
          (delayMicrosE
             (rep_
                @ TimeMicros
                System.Hardware.Haskino.Expr.$fExprBWord32
                (fromInteger @ TimeMicros GHC.Word.$fNumWord32 1)))
          (>>
             @ Arduino
             System.Hardware.Haskino.Data.$fMonadArduino
             @ ()
             @ ()
             (digitalWriteE
                (rep_
                   @ Pin
                   System.Hardware.Haskino.Expr.$fExprBWord8
                   (case c of _ [Occ=Dead] {
                      Hitachi44780 ds_dsC5 ds_dsC6 ds_dsC7 ds_dsC8 ds_dsC9 ds_dsCa
                                   ds_dsCb ds_dsCc ds_dsCd ds_dsCe ->
                        ds_dsC6;
                      I2CHitachi44780 ipv ipv ipv ipv ->
                        Control.Exception.Base.recSelError
                          @ 'GHC.Types.PtrRepLifted @ Pin "lcdEN"#
                    }))
                (rep_
                   @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.True))
             (>>
                @ Arduino
                System.Hardware.Haskino.Data.$fMonadArduino
                @ ()
                @ ()
                (delayMicrosE
                   (rep_
                      @ TimeMicros
                      System.Hardware.Haskino.Expr.$fExprBWord32
                      (fromInteger @ TimeMicros GHC.Word.$fNumWord32 1)))
                (>>
                   @ Arduino
                   System.Hardware.Haskino.Data.$fMonadArduino
                   @ ()
                   @ ()
                   (digitalWriteE
                      (rep_
                         @ Pin
                         System.Hardware.Haskino.Expr.$fExprBWord8
                         (case c of _ [Occ=Dead] {
                            Hitachi44780 ds_dsC5 ds_dsC6 ds_dsC7 ds_dsC8 ds_dsC9 ds_dsCa
                                         ds_dsCb ds_dsCc ds_dsCd ds_dsCe ->
                              ds_dsC6;
                            I2CHitachi44780 ipv ipv ipv ipv ->
                              Control.Exception.Base.recSelError
                                @ 'GHC.Types.PtrRepLifted @ Pin "lcdEN"#
                          }))
                      (rep_
                         @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.False))
                   (delayMicrosE
                      (rep_
                         @ TimeMicros
                         System.Hardware.Haskino.Expr.$fExprBWord32
                         (fromInteger @ TimeMicros GHC.Word.$fNumWord32 2000))))))),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.transmit_deep'
   :: Expr Bool -> LCD -> Expr Word8 -> Arduino (Expr ())
 [LclId,
  Arity=3,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=NEVER}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.transmit_deep' =
   \ (mode :: Expr Bool) (c :: LCD) (val :: Expr Word8) ->
     case c of _ [Occ=Dead] { LCD ds_dsA1 ds_dsA2 ->
     case ds_dsA1 of wild_X2R {
       Hitachi44780 ds_dsvP ds_dsvQ ds_dsvR ds_dsvS ds_dsvT ds_dsvU
                    ds_dsvV ds_dsvW ds_dsvX ds_dsvY ->
         >>
           @ Arduino
           System.Hardware.Haskino.Data.$fMonadArduino
           @ ()
           @ ()
           (digitalWriteE
              (rep_ @ Pin System.Hardware.Haskino.Expr.$fExprBWord8 ds_dsvP)
              mode)
           (>>
              @ Arduino
              System.Hardware.Haskino.Data.$fMonadArduino
              @ ()
              @ ()
              (digitalWriteE
                 (rep_ @ Pin System.Hardware.Haskino.Expr.$fExprBWord8 ds_dsvQ)
                 (rep_
                    @ Bool
                    System.Hardware.Haskino.Expr.$fExprBBool
                    (false @ Bool Data.Boolean.$fBooleanBool)))
              (>>
                 @ Arduino
                 System.Hardware.Haskino.Data.$fMonadArduino
                 @ ()
                 @ ()
                 (digitalPortWriteE
                    (rep_ @ Pin System.Hardware.Haskino.Expr.$fExprBWord8 ds_dsvR)
                    (* @ (Expr Word8)
                       System.Hardware.Haskino.Expr.$fNumExpr5
                       val
                       (rep_
                          @ Word8
                          System.Hardware.Haskino.Expr.$fExprBWord8
                          (fromInteger @ Word8 GHC.Word.$fNumWord8 16)))
                    (rep_
                       @ Word8
                       System.Hardware.Haskino.Expr.$fExprBWord8
                       (fromInteger @ Word8 GHC.Word.$fNumWord8 15)))
                 (>>
                    @ Arduino
                    System.Hardware.Haskino.Data.$fMonadArduino
                    @ ()
                    @ ()
                    (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.pulseEnableDig_deep'
                       wild_X2R)
                    (>>
                       @ Arduino
                       System.Hardware.Haskino.Data.$fMonadArduino
                       @ ()
                       @ ()
                       (digitalPortWriteE
                          (rep_ @ Pin System.Hardware.Haskino.Expr.$fExprBWord8 ds_dsvR)
                          (.&.
                             @ (Expr Word8)
                             System.Hardware.Haskino.Expr.$fBitsBExpr4
                             val
                             (rep_
                                @ Word8
                                System.Hardware.Haskino.Expr.$fExprBWord8
                                (fromInteger @ Word8 GHC.Word.$fNumWord8 15)))
                          (rep_
                             @ Word8
                             System.Hardware.Haskino.Expr.$fExprBWord8
                             (fromInteger @ Word8 GHC.Word.$fNumWord8 15)))
                       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.pulseEnableDig_deep'
                          wild_X2R)))));
       I2CHitachi44780 ipv ipv ipv ipv ->
         <$>
           @ Arduino
           @ ()
           @ (Expr ())
           System.Hardware.Haskino.Data.$fFunctorArduino
           (rep_ @ () System.Hardware.Haskino.Expr.$fExprB())
           (Control.Exception.Base.patError
              @ 'GHC.Types.PtrRepLifted
              @ (Arduino ())
              "System/Hardware/Haskino/SamplePrograms/Rewrite/LCD.hs:(203,1)-(211,18)|function transmitDig"#)
     }
     },
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdWriteChar_deep'
   :: LCD -> Expr Word8 -> Arduino (Expr ())
 [LclIdX,
  Arity=2,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 70 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdWriteChar_deep' =
   \ (lcd :: LCD) (w :: Expr Word8) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.transmit_deep'
       (rep_
          @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.True)
       lcd
       w,
 lcdWriteChar :: LCD -> Word8 -> Arduino ()
 [LclIdX,
  Arity=2,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 140 0}]
 lcdWriteChar =
   \ (lcd :: LCD) (w :: Word8) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.transmit_deep'
          (rep_
             @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.True)
          lcd
          (rep_ @ Word8 System.Hardware.Haskino.Expr.$fExprBWord8 w)),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdWrite_deep'
   :: LCD -> [Word8] -> Arduino (Expr ())
 [LclIdX,
  Arity=2,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 380 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdWrite_deep' =
   \ (lcd :: LCD) (ws :: [Word8]) ->
     iterateE
       @ Word8
       @ ()
       System.Hardware.Haskino.Data.$fArduinoIterateWord8()
       ws
       (\ (x :: Word8) ->
          ifThenElseEither
            @ Word8
            @ ()
            System.Hardware.Haskino.Data.$fArduinoIterateWord8()
            (nullE x)
            (return
               @ Arduino
               System.Hardware.Haskino.Data.$fMonadArduino
               @ (ExprEither Word8 ())
               (System.Hardware.Haskino.Expr.ExprRight
                  @ Word8
                  @ ()
                  System.Hardware.Haskino.Expr.$fExprBWord8
                  System.Hardware.Haskino.Expr.$fExprB()
                  (rep_ @ () System.Hardware.Haskino.Expr.$fExprB() GHC.Tuple.())))
            (>>
               @ Arduino
               System.Hardware.Haskino.Data.$fMonadArduino
               @ ()
               @ (ExprEither Word8 ())
               (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.transmit_deep'
                  (rep_
                     @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.True)
                  lcd
                  (headE x))
               (return
                  @ Arduino
                  System.Hardware.Haskino.Data.$fMonadArduino
                  @ (ExprEither Word8 ())
                  (System.Hardware.Haskino.Expr.ExprLeft
                     @ Word8
                     @ ()
                     System.Hardware.Haskino.Expr.$fExprBWord8
                     System.Hardware.Haskino.Expr.$fExprB()
                     (tailE x))))),
 lcdWrite :: LCD -> [Word8] -> Arduino ()
 [LclIdX,
  Arity=2,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 100 0}]
 lcdWrite =
   \ (lcd :: LCD) (ws :: [Word8]) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdWrite_deep'
          lcd (rep_ @ [Word8] System.Hardware.Haskino.Expr.$fExprB[] ws)),
 lcdRS :: LCDController -> Pin
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 70 0}]
 lcdRS =
   \ (ds_dsCh :: LCDController) ->
     case ds_dsCh of _ [Occ=Dead] {
       Hitachi44780 ds_dsCi ds_dsCj ds_dsCk ds_dsCl ds_dsCm ds_dsCn
                    ds_dsCo ds_dsCp ds_dsCq ds_dsCr ->
         ds_dsCi;
       I2CHitachi44780 ipv ipv ipv ipv ->
         Control.Exception.Base.recSelError
           @ 'GHC.Types.PtrRepLifted @ Pin "lcdRS"#
     },
 lcdRows :: LCDController -> Word8
 [LclIdX[[RecSel]],
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
 lcdRows =
   \ (ds_dsCu :: LCDController) ->
     case ds_dsCu of _ [Occ=Dead] {
       Hitachi44780 ds_dsCv ds_dsCw ds_dsCx ds_dsCy ds_dsCz ds_dsCA
                    ds_dsCB ds_dsCC ds_dsCD ds_dsCE ->
         ds_dsCC;
       I2CHitachi44780 ds_dsCF ds_dsCG ds_dsCH ds_dsCI -> ds_dsCG
     },
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.sendCmd_deep'
   :: LCD -> Cmd -> Arduino (Expr ())
 [LclId,
  Arity=2,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=NEVER}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.sendCmd_deep' =
   \ (lcd :: LCD) (c :: Cmd) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.transmit_deep'
       (rep_
          @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.False)
       lcd
       (rep_
          @ Word8
          System.Hardware.Haskino.Expr.$fExprBWord8
          (let {
             c :: LCDController
             [LclId,
              Str=DmdType,
              Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                      WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 0}]
             c =
               case lcd of _ [Occ=Dead] { LCD ds_dsA1 ds_dsA2 -> ds_dsA1 } } in
           case c of _ [Occ=Dead] {
             LCD_INITIALIZE -> fromInteger @ Word8 GHC.Word.$fNumWord8 51;
             LCD_INITIALIZE_END -> fromInteger @ Word8 GHC.Word.$fNumWord8 50;
             LCD_FUNCTIONSET ->
               B..|.
                 @ Word8
                 GHC.Word.$fBitsWord8
                 (fromInteger @ Word8 GHC.Word.$fNumWord8 32)
                 (B..|.
                    @ Word8
                    GHC.Word.$fBitsWord8
                    (case > @ Word8
                            GHC.Word.$fOrdWord8
                            (case c of _ [Occ=Dead] {
                               Hitachi44780 ds_dsCv ds_dsCw ds_dsCx ds_dsCy ds_dsCz ds_dsCA
                                            ds_dsCB ds_dsCC ds_dsCD ds_dsCE ->
                                 ds_dsCC;
                               I2CHitachi44780 ds_dsCF ds_dsCG ds_dsCH ds_dsCI -> ds_dsCG
                             })
                            (fromInteger @ Word8 GHC.Word.$fNumWord8 1)
                     of _ [Occ=Dead] {
                       False -> fromInteger @ Word8 GHC.Word.$fNumWord8 0;
                       True -> fromInteger @ Word8 GHC.Word.$fNumWord8 8
                     })
                    (case c of _ [Occ=Dead] {
                       Hitachi44780 ds_dsAy ds_dsAz ds_dsAA ds_dsAB ds_dsAC ds_dsAD
                                    ds_dsAE ds_dsAF ds_dsAG ds_dsAH ->
                         case ds_dsAH of _ [Occ=Dead] {
                           False -> fromInteger @ Word8 GHC.Word.$fNumWord8 0;
                           True -> fromInteger @ Word8 GHC.Word.$fNumWord8 4
                         };
                       I2CHitachi44780 ds_dsAI ds_dsAJ ds_dsAK ds_dsAL ->
                         case ds_dsAL of _ [Occ=Dead] {
                           False -> fromInteger @ Word8 GHC.Word.$fNumWord8 0;
                           True -> fromInteger @ Word8 GHC.Word.$fNumWord8 4
                         }
                     }));
             LCD_DISPLAYCONTROL w ->
               B..|.
                 @ Word8
                 GHC.Word.$fBitsWord8
                 (fromInteger @ Word8 GHC.Word.$fNumWord8 8)
                 w;
             LCD_CLEARDISPLAY -> fromInteger @ Word8 GHC.Word.$fNumWord8 1;
             LCD_ENTRYMODESET w ->
               B..|.
                 @ Word8
                 GHC.Word.$fBitsWord8
                 (fromInteger @ Word8 GHC.Word.$fNumWord8 4)
                 w;
             LCD_RETURNHOME -> fromInteger @ Word8 GHC.Word.$fNumWord8 2;
             LCD_SETDDRAMADDR w ->
               B..|.
                 @ Word8
                 GHC.Word.$fBitsWord8
                 (fromInteger @ Word8 GHC.Word.$fNumWord8 128)
                 w;
             LCD_CURSORSHIFT w ->
               B..|.
                 @ Word8
                 GHC.Word.$fBitsWord8
                 (B..|.
                    @ Word8
                    GHC.Word.$fBitsWord8
                    (fromInteger @ Word8 GHC.Word.$fNumWord8 16)
                    (fromInteger @ Word8 GHC.Word.$fNumWord8 8))
                 w;
             LCD_SETCGRAMADDR w ->
               B..|.
                 @ Word8
                 GHC.Word.$fBitsWord8
                 (fromInteger @ Word8 GHC.Word.$fNumWord8 64)
                 (B.shiftL @ Word8 GHC.Word.$fBitsWord8 w (GHC.Types.I# 3#));
             LCD_NOOP -> fromInteger @ Word8 GHC.Word.$fNumWord8 0
           })),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBacklight_deep'
   :: LCD -> Expr Bool -> Arduino (Expr ())
 [LclId,
  Arity=2,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 710 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBacklight_deep' =
   \ (lcd :: LCD) (on :: Expr Bool) ->
     case lcd of wild_X1M { LCD ds_dsA1 ds_dsA2 ->
     case ds_dsA1 of wild_X2T {
       Hitachi44780 ds_dsy4 ds_dsy5 ds_dsy6 ds_dsy7 ds_dsy8 ds_dsy9
                    ds_dsya ds_dsyb ds_dsyc ds_dsyd ->
         let {
           bl :: Maybe Pin
           [LclId,
            Str=DmdType,
            Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                    WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 70 0}]
           bl =
             case wild_X2T of _ [Occ=Dead] {
               Hitachi44780 ds_dsAN ds_dsAO ds_dsAP ds_dsAQ ds_dsAR ds_dsAS
                            ds_dsAT ds_dsAU ds_dsAV ds_dsAW ->
                 ds_dsAT;
               I2CHitachi44780 ipv ipv ipv ipv ->
                 Control.Exception.Base.recSelError
                   @ 'GHC.Types.PtrRepLifted @ (Maybe Pin) "lcdBL"#
             } } in
         ifThenElseE
           @ ()
           System.Hardware.Haskino.Data.$fArduinoConditional()
           (rep_
              @ Bool System.Hardware.Haskino.Expr.$fExprBBool (isJust @ Pin bl))
           (digitalWriteE
              (rep_
                 @ Pin
                 System.Hardware.Haskino.Expr.$fExprBWord8
                 (case bl of _ [Occ=Dead] {
                    Nothing ->
                      case Control.Exception.Base.irrefutPatError
                             @ 'GHC.Types.PtrRepLifted
                             @ (Pin)
                             "System/Hardware/Haskino/SamplePrograms/Rewrite/LCD.hs:308:22-32|Just p"#
                      of wild_00 {
                      };
                    Just p -> p
                  }))
              on)
           (return
              @ Arduino
              System.Hardware.Haskino.Data.$fMonadArduino
              @ (Expr ())
              (rep_ @ () System.Hardware.Haskino.Expr.$fExprB() GHC.Tuple.()));
       I2CHitachi44780 ds_dsye ds_dsyf ds_dsyg ds_dsyh ->
         >>
           @ Arduino
           System.Hardware.Haskino.Data.$fMonadArduino
           @ ()
           @ ()
           (writeRemoteRef
              @ Bool
              System.Hardware.Haskino.Data.$fRemoteReferenceBool
              (case wild_X1M of _ [Occ=Dead] { LCD ds_dsA4 ds_dsA5 ->
               case ds_dsA5
               of _ [Occ=Dead] { LCDData ds_dsAm ds_dsAn ds_dsAo ds_dsAp ->
               ds_dsAp
               }
               })
              (abs_ @ Bool on))
           (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.sendCmd_deep'
              wild_X1M
              System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.LCD_NOOP)
     }
     },
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBacklightOn_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBacklightOn_deep' =
   \ (lcd :: LCD) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBacklight_deep'
       lcd
       (rep_
          @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.True),
 lcdBacklightOn :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdBacklightOn =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBacklightOn_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBacklightOff_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBacklightOff_deep' =
   \ (lcd :: LCD) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBacklight_deep'
       lcd
       (rep_
          @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.False),
 lcdBacklightOff :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdBacklightOff =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBacklightOff_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdClear_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 250 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdClear_deep' =
   \ (lcd :: LCD) ->
     >>
       @ Arduino
       System.Hardware.Haskino.Data.$fMonadArduino
       @ ()
       @ ()
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.sendCmd_deep'
          lcd
          System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.LCD_CLEARDISPLAY)
       (delayMicrosE
          (rep_
             @ TimeMicros
             System.Hardware.Haskino.Expr.$fExprBWord32
             (fromInteger @ TimeMicros GHC.Word.$fNumWord32 200))),
 lcdClear :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdClear =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdClear_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdHome_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 250 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdHome_deep' =
   \ (lcd :: LCD) ->
     >>
       @ Arduino
       System.Hardware.Haskino.Data.$fMonadArduino
       @ ()
       @ ()
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.sendCmd_deep'
          lcd
          System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.LCD_RETURNHOME)
       (delayMicrosE
          (rep_
             @ TimeMicros
             System.Hardware.Haskino.Expr.$fExprBWord32
             (fromInteger @ TimeMicros GHC.Word.$fNumWord32 200))),
 lcdHome :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdHome =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdHome_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdScrollDisplayLeft_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 170 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdScrollDisplayLeft_deep' =
   \ (lcd :: LCD) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.sendCmd_deep'
       lcd
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.LCD_CURSORSHIFT
          (fromInteger @ Word8 GHC.Word.$fNumWord8 0)),
 lcdScrollDisplayLeft :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdScrollDisplayLeft =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdScrollDisplayLeft_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdScrollDisplayRight_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 170 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdScrollDisplayRight_deep' =
   \ (lcd :: LCD) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.sendCmd_deep'
       lcd
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.LCD_CURSORSHIFT
          (fromInteger @ Word8 GHC.Word.$fNumWord8 4)),
 lcdScrollDisplayRight :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdScrollDisplayRight =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdScrollDisplayRight_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.updateDisplayControl_deep'
   :: Expr Bool -> Expr Word8 -> LCD -> Arduino (Expr ())
 [LclId,
  Arity=3,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 20] 670 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.updateDisplayControl_deep' =
   \ (set :: Expr Bool) (w :: Expr Word8) (lcd :: LCD) ->
     let {
       lcds :: LCDData
       [LclId,
        Str=DmdType,
        Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 0}]
       lcds =
         case lcd of _ [Occ=Dead] { LCD ds_dsA4 ds_dsA5 -> ds_dsA5 } } in
     >>=
       @ Arduino
       System.Hardware.Haskino.Data.$fMonadArduino
       @ Word8
       @ ()
       (readRemoteRef
          @ Word8
          System.Hardware.Haskino.Data.$fRemoteReferenceWord8
          (case lcds
           of _ [Occ=Dead] { LCDData ds_dsAc ds_dsAd ds_dsAe ds_dsAf ->
           ds_dsAd
           }))
       (\ (fred :: Word8) ->
          >>
            @ Arduino
            System.Hardware.Haskino.Data.$fMonadArduino
            @ ()
            @ ()
            (ifThenElseE
               @ ()
               System.Hardware.Haskino.Data.$fArduinoConditional()
               set
               (<$>
                  @ Arduino
                  @ ()
                  @ (Expr ())
                  System.Hardware.Haskino.Data.$fFunctorArduino
                  (rep_ @ () System.Hardware.Haskino.Expr.$fExprB())
                  (writeRemoteRef
                     @ Word8
                     System.Hardware.Haskino.Data.$fRemoteReferenceWord8
                     (case lcds
                      of _ [Occ=Dead] { LCDData ds_dsAc ds_dsAd ds_dsAe ds_dsAf ->
                      ds_dsAd
                      })
                     (B..|. @ Word8 GHC.Word.$fBitsWord8 fred (abs_ @ Word8 w))))
******** Issue1
               (<$>
                  @ Arduino
                  @ ()
                  @ (Expr ())
                  System.Hardware.Haskino.Data.$fFunctorArduino
                  (rep_ @ () System.Hardware.Haskino.Expr.$fExprB())
                  (writeRemoteRef
                     @ Word8
                     System.Hardware.Haskino.Data.$fRemoteReferenceWord8
                     (case lcds
                      of _ [Occ=Dead] { LCDData ds_dsAc ds_dsAd ds_dsAe ds_dsAf ->
                      ds_dsAd
                      })
                     (B..&. @ Word8 GHC.Word.$fBitsWord8 fred (abs_ @ Word8 w)))))
******** Issue2
            (>>=
               @ Arduino
               System.Hardware.Haskino.Data.$fMonadArduino
               @ Word8
               @ ()
               (readRemoteRef
                  @ Word8
                  System.Hardware.Haskino.Data.$fRemoteReferenceWord8
                  (case lcds
                   of _ [Occ=Dead] { LCDData ds_dsAc ds_dsAd ds_dsAe ds_dsAf ->
                   ds_dsAd
                   }))
               (\ (new :: Word8) ->
                  System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.sendCmd_deep'
                    lcd
                    (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.LCD_DISPLAYCONTROL
                       new)))),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBlinkOff_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 230 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBlinkOff_deep' =
   \ (lcd :: LCD) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.updateDisplayControl_deep'
       (rep_
          @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.False)
       (rep_
          @ Word8
          System.Hardware.Haskino.Expr.$fExprBWord8
          (fromInteger @ Word8 GHC.Word.$fNumWord8 0))
       lcd,
 lcdBlinkOff :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdBlinkOff =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBlinkOff_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBlinkOn_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 230 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBlinkOn_deep' =
   \ (lcd :: LCD) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.updateDisplayControl_deep'
       (rep_
          @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.True)
       (rep_
          @ Word8
          System.Hardware.Haskino.Expr.$fExprBWord8
          (fromInteger @ Word8 GHC.Word.$fNumWord8 0))
       lcd,
 lcdBlinkOn :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdBlinkOn =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBlinkOn_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdCursorOff_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 230 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdCursorOff_deep' =
   \ (lcd :: LCD) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.updateDisplayControl_deep'
       (rep_
          @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.False)
       (rep_
          @ Word8
          System.Hardware.Haskino.Expr.$fExprBWord8
          (fromInteger @ Word8 GHC.Word.$fNumWord8 1))
       lcd,
 lcdCursorOff :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdCursorOff =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdCursorOff_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdCursorOn_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 230 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdCursorOn_deep' =
   \ (lcd :: LCD) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.updateDisplayControl_deep'
       (rep_
          @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.True)
       (rep_
          @ Word8
          System.Hardware.Haskino.Expr.$fExprBWord8
          (fromInteger @ Word8 GHC.Word.$fNumWord8 1))
       lcd,
 lcdCursorOn :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdCursorOn =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdCursorOn_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdDisplayOff_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 230 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdDisplayOff_deep' =
   \ (lcd :: LCD) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.updateDisplayControl_deep'
       (rep_
          @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.False)
       (rep_
          @ Word8
          System.Hardware.Haskino.Expr.$fExprBWord8
          (fromInteger @ Word8 GHC.Word.$fNumWord8 2))
       lcd,
 lcdDisplayOff :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdDisplayOff =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdDisplayOff_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdDisplayOn_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 230 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdDisplayOn_deep' =
   \ (lcd :: LCD) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.updateDisplayControl_deep'
       (rep_
          @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.True)
       (rep_
          @ Word8
          System.Hardware.Haskino.Expr.$fExprBWord8
          (fromInteger @ Word8 GHC.Word.$fNumWord8 2))
       lcd,
 lcdDisplayOn :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdDisplayOn =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdDisplayOn_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdFlash_deep'
   :: LCD -> Expr Word32 -> Expr Word32 -> Arduino (Expr ())
 [LclIdX,
  Arity=3,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=NEVER}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdFlash_deep' =
   \ (lcd :: LCD) (n :: Expr Word32) (d :: Expr Word32) ->
     iterateE
       @ Word32
       @ ()
       System.Hardware.Haskino.Data.$fArduinoIterateWord32()
       (rep_
          @ Word32
          System.Hardware.Haskino.Expr.$fExprBWord32
          (fromInteger @ Word32 GHC.Word.$fNumWord32 0))
       (\ (x :: Word32) ->
          ifThenElseEither
            @ Word32
            @ ()
            System.Hardware.Haskino.Data.$fArduinoIterateWord32()
            (eqE @ (Expr Bool) System.Hardware.Haskino.Expr.$fExprBWord32 x n)
            (return
               @ Arduino
               System.Hardware.Haskino.Data.$fMonadArduino
               @ (ExprEither Word32 ())
               (System.Hardware.Haskino.Expr.ExprRight
                  @ Word32
                  @ ()
                  System.Hardware.Haskino.Expr.$fExprBWord32
                  System.Hardware.Haskino.Expr.$fExprB()
                  (rep_ @ () System.Hardware.Haskino.Expr.$fExprB() GHC.Tuple.())))
            (>>
               @ Arduino
               System.Hardware.Haskino.Data.$fMonadArduino
               @ ()
               @ (ExprEither Word32 ())
               (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdDisplayOff_deep'
                  lcd)
               (>>
                  @ Arduino
                  System.Hardware.Haskino.Data.$fMonadArduino
                  @ ()
                  @ (ExprEither Word32 ())
                  (delayMillisE d)
                  (>>
                     @ Arduino
                     System.Hardware.Haskino.Data.$fMonadArduino
                     @ ()
                     @ (ExprEither Word32 ())
                     (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdDisplayOn_deep'
                        lcd)
                     (>>
                        @ Arduino
                        System.Hardware.Haskino.Data.$fMonadArduino
                        @ ()
                        @ (ExprEither Word32 ())
                        (delayMillisE d)
                        (return
                           @ Arduino
                           System.Hardware.Haskino.Data.$fMonadArduino
                           @ (ExprEither Word32 ())
                           (System.Hardware.Haskino.Expr.ExprLeft
                              @ Word32
                              @ ()
                              System.Hardware.Haskino.Expr.$fExprBWord32
                              System.Hardware.Haskino.Expr.$fExprB()
                              (+ @ (Expr Word32)
                                 System.Hardware.Haskino.Expr.$fNumExpr3
                                 x
                                 (rep_
                                    @ Word32
                                    System.Hardware.Haskino.Expr.$fExprBWord32
                                    (fromInteger @ Word32 GHC.Word.$fNumWord32 1)))))))))),
 lcdFlash :: LCD -> Word32 -> Word32 -> Arduino ()
 [LclIdX,
  Arity=3,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 140 0}]
 lcdFlash =
   \ (lcd :: LCD) (n :: Word32) (d :: Word32) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdFlash_deep'
          lcd
          (rep_ @ Word32 System.Hardware.Haskino.Expr.$fExprBWord32 n)
          (rep_ @ Word32 System.Hardware.Haskino.Expr.$fExprBWord32 d)),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.updateDisplayMode_deep'
   :: Expr Bool -> Expr Word8 -> LCD -> Arduino (Expr ())
 [LclId,
  Arity=3,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 20] 670 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.updateDisplayMode_deep' =
   \ (set :: Expr Bool) (w :: Expr Word8) (lcd :: LCD) ->
     let {
       lcds :: LCDData
       [LclId,
        Str=DmdType,
        Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 0}]
       lcds =
         case lcd of _ [Occ=Dead] { LCD ds_dsA4 ds_dsA5 -> ds_dsA5 } } in
     >>=
       @ Arduino
       System.Hardware.Haskino.Data.$fMonadArduino
       @ Word8
       @ ()
       (readRemoteRef
          @ Word8
          System.Hardware.Haskino.Data.$fRemoteReferenceWord8
          (case lcds
           of _ [Occ=Dead] { LCDData ds_dsA7 ds_dsA8 ds_dsA9 ds_dsAa ->
           ds_dsA7
           }))
       (\ (fred :: Word8) ->
          >>
            @ Arduino
            System.Hardware.Haskino.Data.$fMonadArduino
            @ ()
            @ ()
            (ifThenElseE
               @ ()
               System.Hardware.Haskino.Data.$fArduinoConditional()
               set
               (<$>
                  @ Arduino
                  @ ()
                  @ (Expr ())
                  System.Hardware.Haskino.Data.$fFunctorArduino
                  (rep_ @ () System.Hardware.Haskino.Expr.$fExprB())
                  (writeRemoteRef
                     @ Word8
                     System.Hardware.Haskino.Data.$fRemoteReferenceWord8
                     (case lcds
                      of _ [Occ=Dead] { LCDData ds_dsA7 ds_dsA8 ds_dsA9 ds_dsAa ->
                      ds_dsA7
                      })
                     (B..|. @ Word8 GHC.Word.$fBitsWord8 fred (abs_ @ Word8 w))))
******** Issue3
               (<$>
                  @ Arduino
                  @ ()
                  @ (Expr ())
                  System.Hardware.Haskino.Data.$fFunctorArduino
                  (rep_ @ () System.Hardware.Haskino.Expr.$fExprB())
                  (writeRemoteRef
                     @ Word8
                     System.Hardware.Haskino.Data.$fRemoteReferenceWord8
                     (case lcds
                      of _ [Occ=Dead] { LCDData ds_dsA7 ds_dsA8 ds_dsA9 ds_dsAa ->
                      ds_dsA7
                      })
                     (B..&. @ Word8 GHC.Word.$fBitsWord8 fred (abs_ @ Word8 w)))))
******** Issue4
            (>>=
               @ Arduino
               System.Hardware.Haskino.Data.$fMonadArduino
               @ Word8
               @ ()
               (readRemoteRef
                  @ Word8
                  System.Hardware.Haskino.Data.$fRemoteReferenceWord8
                  (case lcds
                   of _ [Occ=Dead] { LCDData ds_dsA7 ds_dsA8 ds_dsA9 ds_dsAa ->
                   ds_dsA7
                   }))
               (\ (new :: Word8) ->
                  System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.sendCmd_deep'
                    lcd
                    (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.LCD_DISPLAYCONTROL
                       new)))),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdLeftToRight_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 230 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdLeftToRight_deep' =
   \ (lcd :: LCD) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.updateDisplayMode_deep'
       (rep_
          @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.True)
       (rep_
          @ Word8
          System.Hardware.Haskino.Expr.$fExprBWord8
          (fromInteger @ Word8 GHC.Word.$fNumWord8 1))
       lcd,
 lcdLeftToRight :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdLeftToRight =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdLeftToRight_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdRightToLeft_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 230 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdRightToLeft_deep' =
   \ (lcd :: LCD) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.updateDisplayMode_deep'
       (rep_
          @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.False)
       (rep_
          @ Word8
          System.Hardware.Haskino.Expr.$fExprBWord8
          (fromInteger @ Word8 GHC.Word.$fNumWord8 1))
       lcd,
 lcdRightToLeft :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdRightToLeft =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdRightToLeft_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdAutoScrollOn_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 230 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdAutoScrollOn_deep' =
   \ (lcd :: LCD) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.updateDisplayMode_deep'
       (rep_
          @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.True)
       (rep_
          @ Word8
          System.Hardware.Haskino.Expr.$fExprBWord8
          (fromInteger @ Word8 GHC.Word.$fNumWord8 0))
       lcd,
 lcdAutoScrollOn :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdAutoScrollOn =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdAutoScrollOn_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdAutoScrollOff_deep'
   :: LCD -> Arduino (Expr ())
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 230 0}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdAutoScrollOff_deep' =
   \ (lcd :: LCD) ->
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.updateDisplayMode_deep'
       (rep_
          @ Bool System.Hardware.Haskino.Expr.$fExprBBool GHC.Types.False)
       (rep_
          @ Word8
          System.Hardware.Haskino.Expr.$fExprBWord8
          (fromInteger @ Word8 GHC.Word.$fNumWord8 0))
       lcd,
 lcdAutoScrollOff :: LCD -> Arduino ()
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 60 0}]
 lcdAutoScrollOff =
   \ (lcd :: LCD) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdAutoScrollOff_deep'
          lcd),
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdRegister_deep'
   :: LCDController -> Arduino (Expr LCD)
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=NEVER}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdRegister_deep' =
   \ (controller :: LCDController) ->
     >>=
       @ Arduino
       System.Hardware.Haskino.Data.$fMonadArduino
       @ (RemoteRef Word8)
       @ LCD
       (newRemoteRef
          @ Word8
          System.Hardware.Haskino.Data.$fRemoteReferenceWord8
          (fromInteger @ Word8 GHC.Word.$fNumWord8 0))
       (\ (mode :: RemoteRef Word8) ->
          >>=
            @ Arduino
            System.Hardware.Haskino.Data.$fMonadArduino
            @ (RemoteRef Word8)
            @ LCD
            (newRemoteRef
               @ Word8
               System.Hardware.Haskino.Data.$fRemoteReferenceWord8
               (fromInteger @ Word8 GHC.Word.$fNumWord8 0))
            (\ (control :: RemoteRef Word8) ->
               >>=
                 @ Arduino
                 System.Hardware.Haskino.Data.$fMonadArduino
                 @ (RemoteRef Word8)
                 @ LCD
                 (newRemoteRef
                    @ Word8
                    System.Hardware.Haskino.Data.$fRemoteReferenceWord8
                    (fromInteger @ Word8 GHC.Word.$fNumWord8 0))
                 (\ (count :: RemoteRef Word8) ->
                    >>=
                      @ Arduino
                      System.Hardware.Haskino.Data.$fMonadArduino
                      @ (RemoteRef Bool)
                      @ LCD
                      (newRemoteRef
                         @ Bool
                         System.Hardware.Haskino.Data.$fRemoteReferenceBool
                         GHC.Types.True)
                      (\ (backlight :: RemoteRef Bool) ->
                         let {
                           ld :: LCDData
                           [LclId,
                            Str=DmdType,
                            Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                                    WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 50}]
                           ld =
                             System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.LCDData
                               mode control count backlight } in
                         let {
                           c :: LCD
                           [LclId,
                            Str=DmdType,
                            Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                                    WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
                           c =
                             System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.LCD
                               controller ld } in
                         >>
                           @ Arduino
                           System.Hardware.Haskino.Data.$fMonadArduino
                           @ ()
                           @ LCD
                           (>>
                              @ Arduino
                              System.Hardware.Haskino.Data.$fMonadArduino
                              @ ()
                              @ ()
                              (case c of _ [Occ=Dead] { LCD ds_dsA1 ds_dsA2 ->
                               case ds_dsA1 of wild_X3m {
                                 Hitachi44780 ds_dszD ds_dszE ds_dszF ds_dszG ds_dszH ds_dszI
                                              ds_dszJ ds_dszK ds_dszL ds_dszM ->
                                   case wild_X3m of _ [Occ=Dead] {
                                     Hitachi44780 ds_dswy ds_dswz ds_dswA ds_dswB ds_dswC ds_dswD
                                                  ds_dswE ds_dswF ds_dswG ds_dswH ->
                                       >>
                                         @ Arduino
                                         System.Hardware.Haskino.Data.$fMonadArduino
                                         @ ()
                                         @ ()
                                         (ifThenElseE
                                            @ ()
                                            System.Hardware.Haskino.Data.$fArduinoConditional()
                                            (rep_
                                               @ Bool
                                               System.Hardware.Haskino.Expr.$fExprBBool
                                               (isJust @ Pin ds_dswE))
                                            (setPinModeE
                                               (rep_
                                                  @ Pin
                                                  System.Hardware.Haskino.Expr.$fExprBWord8
                                                  (case ds_dswE of _ [Occ=Dead] {
                                                     Nothing ->
                                                       case Control.Exception.Base.irrefutPatError
                                                              @ 'GHC.Types.PtrRepLifted
                                                              @ (Pin)
                                                              "System/Hardware/Haskino/SamplePrograms/Rewrite/LCD.hs:164:30-43|Just p"#
                                                       of wild_00 {
                                                       };
                                                     Just p -> p
                                                   }))
                                               System.Hardware.Haskino.Data.OUTPUT)
                                            (return
                                               @ Arduino
                                               System.Hardware.Haskino.Data.$fMonadArduino
                                               @ (Expr ())
                                               (rep_
                                                  @ ()
                                                  System.Hardware.Haskino.Expr.$fExprB()
                                                  GHC.Tuple.())))
                                         (>>
                                            @ Arduino
                                            System.Hardware.Haskino.Data.$fMonadArduino
                                            @ ()
                                            @ ()
                                            (setPinModeE
                                               (rep_
                                                  @ Pin
                                                  System.Hardware.Haskino.Expr.$fExprBWord8
                                                  ds_dswy)
                                               System.Hardware.Haskino.Data.OUTPUT)
                                            (>>
                                               @ Arduino
                                               System.Hardware.Haskino.Data.$fMonadArduino
                                               @ ()
                                               @ ()
                                               (setPinModeE
                                                  (rep_
                                                     @ Pin
                                                     System.Hardware.Haskino.Expr.$fExprBWord8
                                                     ds_dswz)
                                                  System.Hardware.Haskino.Data.OUTPUT)
                                               (>>
                                                  @ Arduino
                                                  System.Hardware.Haskino.Data.$fMonadArduino
                                                  @ ()
                                                  @ ()
                                                  (setPinModeE
                                                     (rep_
                                                        @ Pin
                                                        System.Hardware.Haskino.Expr.$fExprBWord8
                                                        ds_dswA)
                                                     System.Hardware.Haskino.Data.OUTPUT)
                                                  (>>
                                                     @ Arduino
                                                     System.Hardware.Haskino.Data.$fMonadArduino
                                                     @ ()
                                                     @ ()
                                                     (setPinModeE
                                                        (rep_
                                                           @ Pin
                                                           System.Hardware.Haskino.Expr.$fExprBWord8
                                                           ds_dswB)
                                                        System.Hardware.Haskino.Data.OUTPUT)
                                                     (>>
                                                        @ Arduino
                                                        System.Hardware.Haskino.Data.$fMonadArduino
                                                        @ ()
                                                        @ ()
                                                        (setPinModeE
                                                           (rep_
                                                              @ Pin
                                                              System.Hardware.Haskino.Expr.$fExprBWord8
                                                              ds_dswC)
                                                           System.Hardware.Haskino.Data.OUTPUT)
                                                        (<$>
                                                           @ Arduino
                                                           @ (Expr ())
                                                           @ ()
                                                           System.Hardware.Haskino.Data.$fFunctorArduino
                                                           (abs_ @ ())
******** Issue5
                                                           (setPinModeE
                                                              (rep_
                                                                 @ Pin
                                                                 System.Hardware.Haskino.Expr.$fExprBWord8
                                                                 ds_dswD)
                                                              System.Hardware.Haskino.Data.OUTPUT)))))));
                                     I2CHitachi44780 ipv ipv ipv ipv ->
                                       Control.Exception.Base.patError
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (Arduino ())
                                         "System/Hardware/Haskino/SamplePrograms/Rewrite/LCD.hs:(163,1)-(170,27)|function initLCDDigital"#
                                   };
                                 I2CHitachi44780 ds_dszN ds_dszO ds_dszP ds_dszQ -> i2cConfig
                               }
                               })
                              (>>
                                 @ Arduino
                                 System.Hardware.Haskino.Data.$fMonadArduino
                                 @ ()
                                 @ ()
                                 (delayMillisE
                                    (rep_
                                       @ TimeMillis
                                       System.Hardware.Haskino.Expr.$fExprBWord32
                                       (fromInteger @ TimeMillis GHC.Word.$fNumWord32 50)))
                                 (>>
                                    @ Arduino
                                    System.Hardware.Haskino.Data.$fMonadArduino
                                    @ ()
                                    @ ()
                                    (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.sendCmd_deep'
                                       c
                                       System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.LCD_INITIALIZE)
                                    (>>
                                       @ Arduino
                                       System.Hardware.Haskino.Data.$fMonadArduino
                                       @ ()
                                       @ ()
                                       (delayMillisE
                                          (rep_
                                             @ TimeMillis
                                             System.Hardware.Haskino.Expr.$fExprBWord32
                                             (fromInteger @ TimeMillis GHC.Word.$fNumWord32 5)))
                                       (>>
                                          @ Arduino
                                          System.Hardware.Haskino.Data.$fMonadArduino
                                          @ ()
                                          @ ()
                                          (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.sendCmd_deep'
                                             c
                                             System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.LCD_INITIALIZE_END)
                                          (>>
                                             @ Arduino
                                             System.Hardware.Haskino.Data.$fMonadArduino
                                             @ ()
                                             @ ()
                                             (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.sendCmd_deep'
                                                c
                                                System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.LCD_FUNCTIONSET)
                                             (>>
                                                @ Arduino
                                                System.Hardware.Haskino.Data.$fMonadArduino
                                                @ ()
                                                @ ()
                                                (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdCursorOff_deep'
                                                   c)
                                                (>>
                                                   @ Arduino
                                                   System.Hardware.Haskino.Data.$fMonadArduino
                                                   @ ()
                                                   @ ()
                                                   (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdBlinkOff_deep'
                                                      c)
                                                   (>>
                                                      @ Arduino
                                                      System.Hardware.Haskino.Data.$fMonadArduino
                                                      @ ()
                                                      @ ()
                                                      (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdLeftToRight_deep'
                                                         c)
                                                      (>>
                                                         @ Arduino
                                                         System.Hardware.Haskino.Data.$fMonadArduino
                                                         @ ()
                                                         @ ()
                                                         (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdAutoScrollOff_deep'
                                                            c)
                                                         (>>
                                                            @ Arduino
                                                            System.Hardware.Haskino.Data.$fMonadArduino
                                                            @ ()
                                                            @ ()
                                                            (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdHome_deep'
                                                               c)
                                                            (>>
                                                               @ Arduino
                                                               System.Hardware.Haskino.Data.$fMonadArduino
                                                               @ ()
                                                               @ ()
                                                               (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdClear_deep'
                                                                  c)
                                                               (<$>
                                                                  @ Arduino
                                                                  @ (Expr ())
                                                                  @ ()
                                                                  System.Hardware.Haskino.Data.$fFunctorArduino
                                                                  (abs_ @ ())
******** Issue6
                                                                  (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdDisplayOn_deep'
                                                                     c))))))))))))))
                           (return
                              @ Arduino System.Hardware.Haskino.Data.$fMonadArduino @ LCD c))))),
 lcdRegister :: LCDController -> Arduino LCD
 [LclIdX,
  Arity=1,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True,
          Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
 lcdRegister =
   System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdRegister_deep',
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdSetCursor_deep'
   :: LCD -> Expr Word8 -> Expr Word8 -> Arduino (Expr ())
 [LclIdX,
  Arity=3,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=NEVER}]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdSetCursor_deep' =
   \ (lcd :: LCD) (givenCol :: Expr Word8) (givenRow :: Expr Word8) ->
     let {
       align :: Word8 -> Word8 -> Word8
       [LclId,
        Arity=2,
        Str=DmdType,
        Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 230 0}]
       align =
         \ (i :: Word8) (m :: Word8) ->
           case >= @ Word8 GHC.Word.$fOrdWord8 i m of _ [Occ=Dead] {
             False -> i;
             True ->
               - @ Word8
                 GHC.Word.$fNumWord8
                 m
                 (fromInteger @ Word8 GHC.Word.$fNumWord8 1)
           } } in
     let {
       row :: Word8
       [LclId,
        Str=DmdType,
        Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 80 0}]
       row =
         align
           (abs_ @ Word8 givenRow)
******** Issue7
           (case lcd of _ [Occ=Dead] { LCD ds_dsA1 ds_dsA2 ->
            case ds_dsA1 of _ [Occ=Dead] {
              Hitachi44780 ds_dsCv ds_dsCw ds_dsCx ds_dsCy ds_dsCz ds_dsCA
                           ds_dsCB ds_dsCC ds_dsCD ds_dsCE ->
                ds_dsCC;
              I2CHitachi44780 ds_dsCF ds_dsCG ds_dsCH ds_dsCI -> ds_dsCG
            }
            }) } in
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.sendCmd_deep'
       lcd
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.LCD_SETDDRAMADDR
          (+ @ Word8
             GHC.Word.$fNumWord8
             (align
                (abs_ @ Word8 givenCol)
******** Issue8
                (case lcd of _ [Occ=Dead] { LCD ds_dsA1 ds_dsA2 ->
                 case ds_dsA1 of _ [Occ=Dead] {
                   Hitachi44780 ds_dsB0 ds_dsB1 ds_dsB2 ds_dsB3 ds_dsB4 ds_dsB5
                                ds_dsB6 ds_dsB7 ds_dsB8 ds_dsB9 ->
                     ds_dsB8;
                   I2CHitachi44780 ds_dsBa ds_dsBb ds_dsBc ds_dsBd -> ds_dsBc
                 }
                 }))
             (case ==
                     @ Word8
                     GHC.Word.$fEqWord8
                     row
                     (fromInteger @ Word8 GHC.Word.$fNumWord8 0)
              of _ [Occ=Dead] {
                False ->
                  case ==
                         @ Word8
                         GHC.Word.$fEqWord8
                         row
                         (fromInteger @ Word8 GHC.Word.$fNumWord8 1)
                  of _ [Occ=Dead] {
                    False ->
                      case ==
                             @ Word8
                             GHC.Word.$fEqWord8
                             row
                             (fromInteger @ Word8 GHC.Word.$fNumWord8 2)
                      of _ [Occ=Dead] {
                        False -> fromInteger @ Word8 GHC.Word.$fNumWord8 84;
                        True -> fromInteger @ Word8 GHC.Word.$fNumWord8 20
                      };
                    True -> fromInteger @ Word8 GHC.Word.$fNumWord8 64
                  };
                True -> fromInteger @ Word8 GHC.Word.$fNumWord8 0
              }))),
 lcdSetCursor :: LCD -> Word8 -> Word8 -> Arduino ()
 [LclIdX,
  Arity=3,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 140 0}]
 lcdSetCursor =
   \ (lcd :: LCD) (givenCol :: Word8) (givenRow :: Word8) ->
     <$>
       @ Arduino
       @ (Expr ())
       @ ()
       System.Hardware.Haskino.Data.$fFunctorArduino
       (abs_ @ ())
       (System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.lcdSetCursor_deep'
          lcd
          (rep_ @ Word8 System.Hardware.Haskino.Expr.$fExprBWord8 givenCol)
          (rep_ @ Word8 System.Hardware.Haskino.Expr.$fExprBWord8 givenRow)),
 $dShow_assU :: Show (Maybe Pin)
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
 $dShow_assU = GHC.Show.$fShowMaybe @ Word8 GHC.Word.$fShowWord8,
 $cshowsPrec :: Int -> LCDController -> ShowS
 [LclId,
  Arity=2,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=NEVER}]
 $cshowsPrec =
   \ (a :: Int) (ds_dsCJ :: LCDController) ->
     case ds_dsCJ of _ [Occ=Dead] {
       Hitachi44780 b1 b2 b3 b4 b5 b6 b7 b8 b9 b10 ->
         showParen
           (>= @ Int GHC.Classes.$fOrdInt a (GHC.Types.I# 11#))
           (. @ String
              @ String
              @ String
              (showString (GHC.CString.unpackCString# "Hitachi44780 {"#))
              (. @ String
                 @ String
                 @ String
                 (showString (GHC.CString.unpackCString# "lcdRS = "#))
                 (. @ String
                    @ String
                    @ String
                    (showsPrec @ Pin GHC.Word.$fShowWord8 (GHC.Types.I# 0#) b1)
                    (. @ String
                       @ String
                       @ String
                       (showString (GHC.CString.unpackCString# ", "#))
                       (. @ String
                          @ String
                          @ String
                          (showString (GHC.CString.unpackCString# "lcdEN = "#))
                          (. @ String
                             @ String
                             @ String
                             (showsPrec @ Pin GHC.Word.$fShowWord8 (GHC.Types.I# 0#) b2)
                             (. @ String
                                @ String
                                @ String
                                (showString (GHC.CString.unpackCString# ", "#))
                                (. @ String
                                   @ String
                                   @ String
                                   (showString (GHC.CString.unpackCString# "lcdD4 = "#))
                                   (. @ String
                                      @ String
                                      @ String
                                      (showsPrec @ Pin GHC.Word.$fShowWord8 (GHC.Types.I# 0#) b3)
                                      (. @ String
                                         @ String
                                         @ String
                                         (showString (GHC.CString.unpackCString# ", "#))
                                         (. @ String
                                            @ String
                                            @ String
                                            (showString (GHC.CString.unpackCString# "lcdD5 = "#))
                                            (. @ String
                                               @ String
                                               @ String
                                               (showsPrec
                                                  @ Pin GHC.Word.$fShowWord8 (GHC.Types.I# 0#) b4)
                                               (. @ String
                                                  @ String
                                                  @ String
                                                  (showString (GHC.CString.unpackCString# ", "#))
                                                  (. @ String
                                                     @ String
                                                     @ String
                                                     (showString
                                                        (GHC.CString.unpackCString# "lcdD6 = "#))
                                                     (. @ String
                                                        @ String
                                                        @ String
                                                        (showsPrec
                                                           @ Pin
                                                           GHC.Word.$fShowWord8
                                                           (GHC.Types.I# 0#)
                                                           b5)
                                                        (. @ String
                                                           @ String
                                                           @ String
                                                           (showString
                                                              (GHC.CString.unpackCString# ", "#))
                                                           (. @ String
                                                              @ String
                                                              @ String
                                                              (showString
                                                                 (GHC.CString.unpackCString#
                                                                    "lcdD7 = "#))
                                                              (. @ String
                                                                 @ String
                                                                 @ String
                                                                 (showsPrec
                                                                    @ Pin
                                                                    GHC.Word.$fShowWord8
                                                                    (GHC.Types.I# 0#)
                                                                    b6)
                                                                 (. @ String
                                                                    @ String
                                                                    @ String
                                                                    (showString
                                                                       (GHC.CString.unpackCString#
                                                                          ", "#))
                                                                    (. @ String
                                                                       @ String
                                                                       @ String
                                                                       (showString
                                                                          (GHC.CString.unpackCString#
                                                                             "lcdBL = "#))
                                                                       (. @ String
                                                                          @ String
                                                                          @ String
                                                                          (showsPrec
                                                                             @ (Maybe Pin)
                                                                             $dShow_assU
                                                                             (GHC.Types.I# 0#)
                                                                             b7)
                                                                          (. @ String
                                                                             @ String
                                                                             @ String
                                                                             (showString
                                                                                (GHC.CString.unpackCString#
                                                                                   ", "#))
                                                                             (. @ String
                                                                                @ String
                                                                                @ String
                                                                                (showString
                                                                                   (GHC.CString.unpackCString#
                                                                                      "lcdRows = "#))
                                                                                (. @ String
                                                                                   @ String
                                                                                   @ String
                                                                                   (showsPrec
                                                                                      @ Word8
                                                                                      GHC.Word.$fShowWord8
                                                                                      (GHC.Types.I#
                                                                                         0#)
                                                                                      b8)
                                                                                   (. @ String
                                                                                      @ String
                                                                                      @ String
                                                                                      (showString
                                                                                         (GHC.CString.unpackCString#
                                                                                            ", "#))
                                                                                      (. @ String
                                                                                         @ String
                                                                                         @ String
                                                                                         (showString
                                                                                            (GHC.CString.unpackCString#
                                                                                               "lcdCols = "#))
                                                                                         (. @ String
                                                                                            @ String
                                                                                            @ String
                                                                                            (showsPrec
                                                                                               @ Word8
                                                                                               GHC.Word.$fShowWord8
                                                                                               (GHC.Types.I#
                                                                                                  0#)
                                                                                               b9)
                                                                                            (. @ String
                                                                                               @ String
                                                                                               @ String
                                                                                               (showString
                                                                                                  (GHC.CString.unpackCString#
                                                                                                     ", "#))
                                                                                               (. @ String
                                                                                                  @ String
                                                                                                  @ String
                                                                                                  (showString
                                                                                                     (GHC.CString.unpackCString#
                                                                                                        "dotMode5x10 = "#))
                                                                                                  (. @ String
                                                                                                     @ String
                                                                                                     @ String
                                                                                                     (showsPrec
                                                                                                        @ Bool
                                                                                                        GHC.Show.$fShowBool
                                                                                                        (GHC.Types.I#
                                                                                                           0#)
                                                                                                        b10)
                                                                                                     (showString
                                                                                                        (GHC.CString.unpackCString#
                                                                                                           "}"#))))))))))))))))))))))))))))))));
       I2CHitachi44780 b1 b2 b3 b4 ->
         showParen
           (>= @ Int GHC.Classes.$fOrdInt a (GHC.Types.I# 11#))
           (. @ String
              @ String
              @ String
              (showString (GHC.CString.unpackCString# "I2CHitachi44780 {"#))
              (. @ String
                 @ String
                 @ String
                 (showString (GHC.CString.unpackCString# "address = "#))
                 (. @ String
                    @ String
                    @ String
                    (showsPrec @ Word8 GHC.Word.$fShowWord8 (GHC.Types.I# 0#) b1)
                    (. @ String
                       @ String
                       @ String
                       (showString (GHC.CString.unpackCString# ", "#))
                       (. @ String
                          @ String
                          @ String
                          (showString (GHC.CString.unpackCString# "lcdRows = "#))
                          (. @ String
                             @ String
                             @ String
                             (showsPrec @ Word8 GHC.Word.$fShowWord8 (GHC.Types.I# 0#) b2)
                             (. @ String
                                @ String
                                @ String
                                (showString (GHC.CString.unpackCString# ", "#))
                                (. @ String
                                   @ String
                                   @ String
                                   (showString (GHC.CString.unpackCString# "lcdCols = "#))
                                   (. @ String
                                      @ String
                                      @ String
                                      (showsPrec @ Word8 GHC.Word.$fShowWord8 (GHC.Types.I# 0#) b3)
                                      (. @ String
                                         @ String
                                         @ String
                                         (showString (GHC.CString.unpackCString# ", "#))
                                         (. @ String
                                            @ String
                                            @ String
                                            (showString
                                               (GHC.CString.unpackCString# "dotMode5x10 = "#))
                                            (. @ String
                                               @ String
                                               @ String
                                               (showsPrec
                                                  @ Bool GHC.Show.$fShowBool (GHC.Types.I# 0#) b4)
                                               (showString
                                                  (GHC.CString.unpackCString# "}"#))))))))))))))
     },
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$fShowLCDController [InlPrag=[ALWAYS] CONLIKE]
   :: Show LCDController
 [LclIdX[DFunId],
  Str=DmdType,
  Unf=DFun: \ ->
        GHC.Show.C:Show TYPE: LCDController $cshowsPrec $cshow $cshowList]
 System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$fShowLCDController =
   GHC.Show.C:Show @ LCDController $cshowsPrec $cshow $cshowList;
 $cshow [Occ=LoopBreaker] :: LCDController -> String
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
 $cshow =
   GHC.Show.$dmshow
     @ LCDController
     System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$fShowLCDController;
 $cshowList [Occ=LoopBreaker] :: [LCDController] -> ShowS
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 60 0}]
 $cshowList =
   GHC.Show.showList__
     @ LCDController
     (showsPrec
        @ LCDController
        System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.$fShowLCDController
        (GHC.Types.I# 0#));]
[hitachi_sygN :: Bool
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
 hitachi_sygN = false @ Bool Data.Boolean.$fBooleanBool,
 hitachi_sygM :: Word8
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 130 0}]
 hitachi_sygM = fromInteger @ Word8 GHC.Word.$fNumWord8 16,
 hitachi_sygL :: Word8
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 130 0}]
 hitachi_sygL = fromInteger @ Word8 GHC.Word.$fNumWord8 2,
 hitachi_sygK :: Pin
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 130 0}]
 hitachi_sygK = fromInteger @ Pin GHC.Word.$fNumWord8 10,
 hitachi_sygJ :: Maybe Pin
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
 hitachi_sygJ = GHC.Base.Just @ Pin hitachi_sygK,
 hitachi_sygI :: Pin
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 130 0}]
 hitachi_sygI = fromInteger @ Pin GHC.Word.$fNumWord8 7,
 hitachi_sygH :: Pin
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 130 0}]
 hitachi_sygH = fromInteger @ Pin GHC.Word.$fNumWord8 6,
 hitachi_sygG :: Pin
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 130 0}]
 hitachi_sygG = fromInteger @ Pin GHC.Word.$fNumWord8 5,
 hitachi_sygF :: Pin
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 130 0}]
 hitachi_sygF = fromInteger @ Pin GHC.Word.$fNumWord8 4,
 hitachi_sygE :: Pin
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 130 0}]
 hitachi_sygE = fromInteger @ Pin GHC.Word.$fNumWord8 9,
 hitachi_sygD :: Pin
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 130 0}]
 hitachi_sygD = fromInteger @ Pin GHC.Word.$fNumWord8 8,
 hitachi :: LCDController
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 110}]
 hitachi =
   System.Hardware.Haskino.SamplePrograms.Rewrite.LCD.Hitachi44780
     hitachi_sygD
     hitachi_sygE
     hitachi_sygF
     hitachi_sygG
     hitachi_sygH
     hitachi_sygI
     hitachi_sygJ
     hitachi_sygL
     hitachi_sygM
     hitachi_sygN,
 Main.myTask_deep' :: Arduino (Expr ())
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 440 0}]
 Main.myTask_deep' =
   >>=
     @ Arduino
     System.Hardware.Haskino.Data.$fMonadArduino
     @ (Expr LCD)
     @ ()
     (lcdRegister_deep' hitachi)
     (\ (lcd_abs :: Expr LCD) ->
        >>
          @ Arduino
          System.Hardware.Haskino.Data.$fMonadArduino
          @ ()
          @ ()
          (lcdBacklightOn_deep' (abs_ @ LCD lcd_abs))
******** Issue9
          (>>
             @ Arduino
             System.Hardware.Haskino.Data.$fMonadArduino
             @ ()
             @ ()
             (lcdHome_deep' (abs_ @ LCD lcd_abs))
******** Issue10
             (lcdWriteChar_deep'
                (abs_ @ LCD lcd_abs)
******** Issue11
                (rep_
                   @ Word8
                   System.Hardware.Haskino.Expr.$fExprBWord8
                   (fromInteger @ Word8 GHC.Word.$fNumWord8 64))))),
 myTask :: Arduino ()
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
 myTask =
   <$>
     @ Arduino
     @ (Expr ())
     @ ()
     System.Hardware.Haskino.Data.$fFunctorArduino
     (abs_ @ ())
     Main.myTask_deep',
 main :: IO ()
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 170 0}]
 main =
   compileProgramE
     (<$>
        @ Arduino
        @ (Expr ())
        @ ()
        System.Hardware.Haskino.Data.$fFunctorArduino
        (abs_ @ ())
        (<$>
           @ Arduino
           @ (Expr ())
           @ ()
           System.Hardware.Haskino.Data.$fFunctorArduino
           (abs_ @ ())
******** Issue11
           Main.myTask_deep'))
     (GHC.CString.unpackCString# "theTest.ino"#),
 :Main.main :: IO ()
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
 :Main.main = GHC.TopHandler.runMainIO @ () main,
 $trModule_sygC :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
 $trModule_sygC = GHC.Types.TrNameS "Main"#,
 $trModule_sygB :: GHC.Types.TrName
 [LclId,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
 $trModule_sygB = GHC.Types.TrNameS "main"#,
 Main.$trModule :: GHC.Types.Module
 [LclIdX,
  Str=DmdType,
  Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
          WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
 Main.$trModule = GHC.Types.Module $trModule_sygB $trModule_sygC]
