cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500    1) -------------------------------------------------------------------------------
cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500    2) -- |
d537e5de System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-08-27 13:19:31 -0500    3) -- Module      :  System.Hardware.Haskino.Protocol
4e21300c System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-21 19:04:03 -0500    4) --                Based on System.Hardware.Arduino.Protocol
b9652b37 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-06-08 19:40:09 -0500    5) -- Copyright   :  (c) University of Kansas
5e589050 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-06-09 09:50:59 -0500    6) --                System.Hardware.Arduino (c) Levent Erkok
cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500    7) -- License     :  BSD3
cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500    8) -- Stability   :  experimental
cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500    9) --
6a4f1289 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-01-11 20:07:41 -0600   10) -- Internal representation of the Haskino Firmware protocol.
cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500   11) -------------------------------------------------------------------------------
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500   12) {-# OPTIONS_GHC -fmax-pmcheck-iterations=8000000 #-}
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500   13) {-# LANGUAGE GADTs               #-}
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500   14) {-# LANGUAGE ScopedTypeVariables #-}
cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500   15) 
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500   16) module System.Hardware.Haskino.Protocol(framePackage, packageCommand,
3df6f221 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-25 20:07:50 -0500   17)                                             packageProcedure, packageRemoteBinding,
729dfd50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-09-06 21:13:51 -0500   18)                                             unpackageResponse, parseQueryResult,
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   19)                                             maxFirmwareSize, packageExpr,
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   20)                                             CommandState(..) ) where
cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500   21) 
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500   22) import           Control.Monad.State
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500   23) import           Control.Remote.Applicative.Types as T
62f8bfdc System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-26 09:51:52 -0600   24) import           Control.Remote.Monad
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500   25) import           Control.Remote.Monad.Types       as T
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500   26) import           Data.Bits                        (xor,shiftR,(.&.))
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500   27) import qualified Data.ByteString                  as B
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500   28) import           Data.Int                         (Int8, Int16, Int32)
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500   29) import qualified Data.Map                         as M
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500   30) import           Data.Word                        (Word8, Word16, Word32)
62f8bfdc System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-26 09:51:52 -0600   31) 
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500   32) import           System.Hardware.Haskino.Data
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500   33) import           System.Hardware.Haskino.Expr
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500   34) import           System.Hardware.Haskino.Utils
cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500   35) 
bc2df2a1 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-08-29 21:27:04 -0500   36) -- | Maximum size of a Haskino Firmware message
307f13a3 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-11 20:56:09 -0500   37) maxFirmwareSize :: Int
274c29a1 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-09-05 10:29:29 -0700   38) maxFirmwareSize = 256
7ac197c7 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-07-19 21:03:08 -0500   39) 
c8bc4099 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-01 19:14:17 -0600   40) -- | Minimum and maximum servo pulse widths
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500   41) minServo :: Int16
c8bc4099 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-01 19:14:17 -0600   42) minServo = 544
c8bc4099 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-01 19:14:17 -0600   43) 
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500   44) maxServo :: Int16
c8bc4099 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-01 19:14:17 -0600   45) maxServo = 2400
c8bc4099 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-01 19:14:17 -0600   46) 
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500   47) data CommandState = CommandState {ix        :: Int
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500   48)                                 , ib        :: Int
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500   49)                                 , block     :: B.ByteString
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500   50)                                 , blocks    :: [B.ByteString]}
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   51) 
9561ce9b System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-15 20:20:25 -0500   52) framePackage :: B.ByteString -> B.ByteString
25b6ec52 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-09-24 21:03:19 -0500   53) framePackage bs = B.append (B.concatMap escape bs) (B.append (escape $ check bs) (B.singleton 0x7E))
9561ce9b System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-15 20:20:25 -0500   54)   where
9561ce9b System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-15 20:20:25 -0500   55)     escape :: Word8 -> B.ByteString
9561ce9b System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-15 20:20:25 -0500   56)     escape c = if c == 0x7E || c == 0x7D
9561ce9b System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-15 20:20:25 -0500   57)                then B.pack $ [0x7D, xor c 0x20]
9561ce9b System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-15 20:20:25 -0500   58)                else B.singleton c
6e12eb3e System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-16 14:40:03 -0500   59)     check b = B.foldl (+) 0 b
9561ce9b System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-15 20:20:25 -0500   60) 
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   61) addCommand :: FirmwareCmd -> [Word8] -> State CommandState B.ByteString
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   62) addCommand cmd bs = return $ buildCommand cmd bs
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   63) 
307f13a3 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-11 20:56:09 -0500   64) buildCommand :: FirmwareCmd -> [Word8] -> B.ByteString
eeca7ed9 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-15 12:30:38 -0500   65) buildCommand cmd bs = B.pack $ firmwareCmdVal cmd : bs
cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500   66) 
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500   67) packageUnsupported :: String -> State CommandState B.ByteString
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500   68) packageUnsupported s = do
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500   69)   error $ "Error: Cannot package Shallow Task command, use deep version:" ++ s
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500   70)   return B.empty
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500   71) 
cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500   72) -- | Package a request as a sequence of bytes to be sent to the board
bc2df2a1 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-08-29 21:27:04 -0500   73) -- using the Haskino Firmware protocol.
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500   74) packageCommand :: forall a . ArduinoPrimitive a -> State CommandState B.ByteString
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500   75) packageCommand SystemResetE =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   76)     addCommand BC_CMD_SYSTEM_RESET []
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500   77) packageCommand (SetPinModeE p m) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   78)     addCommand BC_CMD_SET_PIN_MODE (packageExpr p ++ packageExpr m)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   79) packageCommand (DigitalWriteE p b) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   80)     addCommand DIG_CMD_WRITE_PIN (packageExpr p ++ packageExpr b)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   81) packageCommand (DigitalPortWriteE p b m) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   82)     addCommand DIG_CMD_WRITE_PORT (packageExpr p ++ packageExpr b ++ packageExpr m)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   83) packageCommand (AnalogWriteE p w) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   84)     addCommand ALG_CMD_WRITE_PIN (packageExpr p ++ packageExpr w)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   85) packageCommand (ToneE p f (Just d)) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   86)     addCommand ALG_CMD_TONE_PIN (packageExpr p ++ packageExpr f ++ packageExpr d)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   87) packageCommand (ToneE p f Nothing) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   88)     packageCommand (ToneE p f (Just 0))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   89) packageCommand (NoToneE p) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   90)     addCommand ALG_CMD_NOTONE_PIN (packageExpr  p)
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500   91) packageCommand (I2CWriteE sa w8s) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   92)     addCommand I2C_CMD_WRITE (packageExpr sa ++ packageExpr w8s)
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500   93) packageCommand I2CConfigE =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   94)     addCommand I2C_CMD_CONFIG []
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500   95) packageCommand (StepperSetSpeedE st sp) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   96)     addCommand STEP_CMD_SET_SPEED (packageExpr st ++ packageExpr sp)
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500   97) packageCommand (ServoDetachE sv) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500   98)     addCommand SRVO_CMD_DETACH (packageExpr sv)
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500   99) packageCommand (ServoWriteE sv w) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  100)     addCommand SRVO_CMD_WRITE (packageExpr sv ++ packageExpr w)
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  101) packageCommand (ServoWriteMicrosE sv w) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  102)     addCommand SRVO_CMD_WRITE_MICROS (packageExpr sv ++ packageExpr w)
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500  103) packageCommand (DeleteTask tid) = packageUnsupported $ "createTask " ++ show tid
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  104) packageCommand (DeleteTaskE tid) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  105)     addCommand SCHED_CMD_DELETE_TASK (packageExpr tid)
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500  106) packageCommand (ScheduleTask tid tt) = packageUnsupported $ "scheduleTask " ++ show tid ++ " " ++ show tt
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  107) packageCommand (ScheduleTaskE tid tt) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  108)     addCommand SCHED_CMD_SCHED_TASK (packageExpr tid ++ packageExpr tt)
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500  109) packageCommand ScheduleReset = packageUnsupported $ "scheduleReset"
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  110) packageCommand ScheduleResetE =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  111)     addCommand SCHED_CMD_RESET []
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500  112) packageCommand (AttachInt p t m) = packageUnsupported $ "attachInt " ++ show p ++ " " ++ show t
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  113) packageCommand (AttachIntE p t m) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  114)     addCommand SCHED_CMD_ATTACH_INT (packageExpr p ++ packageExpr t ++ packageExpr m)
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500  115) packageCommand (DetachInt p) = packageUnsupported $ "detachInt " ++ show p
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  116) packageCommand (DetachIntE p) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  117)     addCommand SCHED_CMD_DETACH_INT (packageExpr p)
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500  118) packageCommand Interrupts = packageUnsupported $ "interrupts"
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  119) packageCommand (InterruptsE) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  120)     addCommand SCHED_CMD_INTERRUPTS []
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500  121) packageCommand NoInterrupts = packageUnsupported $ "noInterrupts"
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  122) packageCommand (NoInterruptsE) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  123)     addCommand SCHED_CMD_NOINTERRUPTS []
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500  124) packageCommand (GiveSem id) = packageUnsupported $ "giveSem " ++ show id
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  125) packageCommand (GiveSemE id) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  126)     addCommand SCHED_CMD_GIVE_SEM (packageExpr id)
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500  127) packageCommand (TakeSem id) = packageUnsupported $ "takeSem " ++ show id
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  128) packageCommand (TakeSemE id) =
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  129)     addCommand SCHED_CMD_TAKE_SEM (packageExpr id)
a8281d69 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-05 11:21:41 -0500  130) packageCommand (CreateTask tid m) = packageUnsupported $ "createTask " ++ show tid
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  131) packageCommand (CreateTaskE tid m) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  132)     (_, td) <- packageCodeBlock m
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  133)     s <- get
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  134)     let taskSize = fromIntegral (B.length td)
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  135)     cmd <- addCommand SCHED_CMD_CREATE_TASK ((packageExpr tid) ++ (packageExpr (LitW16 taskSize)) ++ (packageExpr (LitW16 (fromIntegral (ib s)))))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  136)     return $ (framePackage cmd) `B.append` (genAddToTaskCmds td)
4f9d70ed System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-09-06 18:50:55 -0500  137)   where
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  138)     -- Max command data size is max frame size - 7
ba3df121 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-01-09 20:20:57 -0600  139)     -- command - 1 byte,checksum - 1 byte,frame flag - 1 byte
ba3df121 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-01-09 20:20:57 -0600  140)     -- task ID - 2 bytes (lit + constant), size - 2 bytes (lit + constant)
ba3df121 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-01-09 20:20:57 -0600  141)     maxCmdSize = maxFirmwareSize - 7
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  142)     genAddToTaskCmds tds | fromIntegral (B.length tds) > maxCmdSize =
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  143)         addToTask (B.take maxCmdSize tds)
4f9d70ed System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-09-06 18:50:55 -0500  144)             `B.append` (genAddToTaskCmds (B.drop maxCmdSize tds))
4f9d70ed System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-09-06 18:50:55 -0500  145)     genAddToTaskCmds tds = addToTask tds
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  146)     addToTask tds' = framePackage $ buildCommand SCHED_CMD_ADD_TO_TASK ((packageExpr tid) ++
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  147)                                                                           (packageExpr (LitW8 (fromIntegral (B.length tds')))) ++
b88fc8de System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-09-07 16:42:43 -0500  148)                                                                           (B.unpack tds'))
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  149) packageCommand (WriteRemoteRefBE (RemoteRefB i) e) = addWriteRefCommand EXPR_BOOL i e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  150) packageCommand (WriteRemoteRefW8E (RemoteRefW8 i) e) = addWriteRefCommand EXPR_WORD8 i e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  151) packageCommand (WriteRemoteRefW16E (RemoteRefW16 i) e) = addWriteRefCommand EXPR_WORD16 i e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  152) packageCommand (WriteRemoteRefW32E (RemoteRefW32 i) e) = addWriteRefCommand EXPR_WORD32 i e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  153) packageCommand (WriteRemoteRefI8E (RemoteRefI8 i) e) = addWriteRefCommand EXPR_INT8 i e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  154) packageCommand (WriteRemoteRefI16E (RemoteRefI16 i) e) = addWriteRefCommand EXPR_INT16 i e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  155) packageCommand (WriteRemoteRefI32E (RemoteRefI32 i) e) = addWriteRefCommand EXPR_INT32 i e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  156) packageCommand (WriteRemoteRefL8E (RemoteRefL8 i) e) = addWriteRefCommand EXPR_LIST8 i e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  157) packageCommand (WriteRemoteRefFloatE (RemoteRefFloat i) e) = addWriteRefCommand EXPR_FLOAT i e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  158) packageCommand (ModifyRemoteRefBE (RemoteRefB i) f) = addWriteRefCommand EXPR_BOOL i f
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  159) packageCommand (ModifyRemoteRefW8E (RemoteRefW8 i) f) = addWriteRefCommand EXPR_WORD8 i f
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  160) packageCommand (ModifyRemoteRefW16E (RemoteRefW16 i) f) = addWriteRefCommand EXPR_WORD16 i f
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  161) packageCommand (ModifyRemoteRefW32E (RemoteRefW32 i) f) = addWriteRefCommand EXPR_WORD32 i f
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  162) packageCommand (ModifyRemoteRefI8E (RemoteRefI8 i) f) = addWriteRefCommand EXPR_INT8 i f
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  163) packageCommand (ModifyRemoteRefI16E (RemoteRefI16 i) f) = addWriteRefCommand EXPR_INT16 i f
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  164) packageCommand (ModifyRemoteRefI32E (RemoteRefI32 i) f) = addWriteRefCommand EXPR_INT32 i f
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  165) packageCommand (ModifyRemoteRefL8E (RemoteRefL8 i) f) = addWriteRefCommand EXPR_LIST8 i f
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  166) packageCommand (ModifyRemoteRefFloatE (RemoteRefFloat i) f) = addWriteRefCommand EXPR_FLOAT i f
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  167) packageCommand (IfThenElseUnitE e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  168)     (_, pc1) <- packageCodeBlock cb1
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  169)     (_, pc2) <- packageCodeBlock cb2
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  170)     let thenSize = word16ToBytes $ fromIntegral (B.length pc1)
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  171)     i <- addCommand BC_CMD_IF_THEN_ELSE ([fromIntegral $ fromEnum EXPR_UNIT, 0] ++ thenSize ++ (packageExpr e))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  172)     return $ B.append i (B.append pc1 pc2)
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500  173) packageCommand _ = error $ "packageCommand: Error Command not supported (It may have been a procedure)"
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  174) 
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500  175) addWriteRefCommand :: ExprType -> Int -> Expr a -> State CommandState B.ByteString
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  176) addWriteRefCommand t i e =
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500  177)   addCommand REF_CMD_WRITE ([toW8 t, toW8 EXPR_WORD8, toW8 EXPR_LIT, fromIntegral i] ++ packageExpr e)
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500  178) 
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  179) packageCodeBlock :: Arduino a -> State CommandState (a, B.ByteString)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  180) packageCodeBlock (Arduino commands) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  181)     startNewBlock
823fcf0c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-19 21:05:20 -0600  182)     ret <- packMonad commands
823fcf0c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-19 21:05:20 -0600  183)     str <- endCurrentBlock
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  184)     return (ret, str)
2fb34e08 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-06-08 14:37:43 -0500  185)   where
06c4dd66 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-10-03 20:40:33 -0500  186)       startNewBlock :: State CommandState ()
06c4dd66 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-10-03 20:40:33 -0500  187)       startNewBlock = do
06c4dd66 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-10-03 20:40:33 -0500  188)           s <- get
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  189)           put s {block = B.empty, blocks = (block s) : (blocks s)}
06c4dd66 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-10-03 20:40:33 -0500  190) 
06c4dd66 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-10-03 20:40:33 -0500  191)       endCurrentBlock :: State CommandState B.ByteString
06c4dd66 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-10-03 20:40:33 -0500  192)       endCurrentBlock = do
06c4dd66 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-10-03 20:40:33 -0500  193)           s <- get
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  194)           put s {block = head $ blocks s, blocks = tail $ blocks s}
06c4dd66 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-10-03 20:40:33 -0500  195)           return $ block s
06c4dd66 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-10-03 20:40:33 -0500  196) 
06c4dd66 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-10-03 20:40:33 -0500  197)       addToBlock :: B.ByteString -> State CommandState ()
06c4dd66 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-10-03 20:40:33 -0500  198)       addToBlock bs = do
06c4dd66 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-10-03 20:40:33 -0500  199)           s <- get
06c4dd66 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-10-03 20:40:33 -0500  200)           put s {block = B.append (block s) bs}
06c4dd66 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-10-03 20:40:33 -0500  201) 
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500  202)       packShallowProcedure :: ArduinoPrimitive a -> a -> State CommandState a
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  203)       packShallowProcedure p r = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  204)           pp <- packageProcedure p
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  205)           addToBlock $ lenPackage pp
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  206)           return r
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  207) 
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500  208)       packDeepProcedure :: ArduinoPrimitive a -> State CommandState Int
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  209)       packDeepProcedure p = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  210)           pp <- packageProcedure p
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  211)           addToBlock $ lenPackage pp
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  212)           s <- get
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  213)           put s {ib = (ib s) + 1}
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  214)           return $ ib s
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  215) 
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500  216)       packNewRef :: ArduinoPrimitive a -> a -> State CommandState a
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  217)       packNewRef p r = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  218)           prb <- packageRemoteBinding p
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  219)           addToBlock $ lenPackage prb
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  220)           s <- get
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  221)           put s {ib = (ib s) + 1, ix = (ix s) + 1}
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  222)           return r
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  223) 
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500  224)       packProcedure :: ArduinoPrimitive a -> State CommandState a
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  225)       packProcedure QueryFirmware = packShallowProcedure QueryFirmware 0
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  226)       packProcedure QueryFirmwareE = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  227)           i <- packDeepProcedure QueryFirmwareE
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  228)           return $ RemBindW16 i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  229)       packProcedure QueryProcessor = packShallowProcedure QueryProcessor UNKNOWN_PROCESSOR
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  230)       packProcedure QueryProcessorE = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  231)           i <- packDeepProcedure QueryProcessorE
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  232)           return $ RemBindW8 i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  233)       packProcedure Micros = packShallowProcedure Micros 0
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  234)       packProcedure MicrosE = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  235)           i <- packDeepProcedure MicrosE
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  236)           return $ RemBindW32 i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  237)       packProcedure Millis = packShallowProcedure Millis 0
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  238)       packProcedure MillisE = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  239)           i <- packDeepProcedure MillisE
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  240)           return $ RemBindW32 i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  241)       packProcedure (DelayMillis ms) = packShallowProcedure (DelayMillis ms) ()
195dea55 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 17:21:56 -0500  242)       packProcedure (DelayMillisE ms) = packShallowProcedure (DelayMillisE ms) LitUnit
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  243)       packProcedure (DelayMicros ms) = packShallowProcedure (DelayMicros ms) ()
195dea55 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 17:21:56 -0500  244)       packProcedure (DelayMicrosE ms) = packShallowProcedure (DelayMicrosE ms) LitUnit
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  245)       packProcedure (DigitalRead p) = packShallowProcedure (DigitalRead p) False
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  246)       packProcedure (DigitalReadE p) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  247)           i <- packDeepProcedure (DigitalReadE p)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  248)           return $ RemBindB i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  249)       packProcedure (DigitalPortRead p m) = packShallowProcedure (DigitalPortRead p m) 0
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  250)       packProcedure (DigitalPortReadE p m) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  251)           i <- packDeepProcedure (DigitalPortReadE p m)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  252)           return $ RemBindW8 i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  253)       packProcedure (AnalogRead p) = packShallowProcedure (AnalogRead p) 0
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  254)       packProcedure (AnalogReadE p) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  255)           i <- packDeepProcedure (AnalogReadE p)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  256)           return $ RemBindW16 i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  257)       packProcedure (I2CRead p n) = packShallowProcedure (I2CRead p n) []
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  258)       packProcedure (I2CReadE p n) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  259)           i <- packDeepProcedure (I2CReadE p n)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  260)           return $ RemBindList8 i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  261)       packProcedure (Stepper2Pin s p1 p2) = packShallowProcedure (Stepper2Pin s p1 p2) 0
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  262)       packProcedure (Stepper2PinE s p1 p2) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  263)           i <- packDeepProcedure (Stepper2PinE s p1 p2)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  264)           return $ RemBindW8 i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  265)       packProcedure (Stepper4Pin s p1 p2 p3 p4) = packShallowProcedure (Stepper4Pin s p1 p2 p3 p4) 0
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  266)       packProcedure (Stepper4PinE s p1 p2 p3 p4) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  267)           i <- packDeepProcedure (Stepper4PinE s p1 p2 p3 p4)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  268)           return $ RemBindW8 i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  269)       packProcedure (StepperStepE st s) = packShallowProcedure (StepperStepE st s) ()
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  270)       packProcedure (ServoAttach p) = packShallowProcedure (ServoAttach p) 0
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  271)       packProcedure (ServoAttachE p) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  272)           i <- packDeepProcedure (ServoAttachE p)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  273)           return $ RemBindW8 i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  274)       packProcedure (ServoAttachMinMax p min max) = packShallowProcedure (ServoAttachMinMax p min max) 0
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  275)       packProcedure (ServoAttachMinMaxE p min max) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  276)           i <- packDeepProcedure (ServoAttachMinMaxE p min max)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  277)           return $ RemBindW8 i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  278)       packProcedure (ServoRead sv) = packShallowProcedure (ServoRead sv) 0
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  279)       packProcedure (ServoReadE sv) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  280)           i <- packDeepProcedure (ServoReadE sv)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  281)           return $ RemBindI16 i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  282)       packProcedure (ServoReadMicros sv) = packShallowProcedure (ServoReadMicros sv) 0
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  283)       packProcedure (ServoReadMicrosE sv) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  284)           i <- packDeepProcedure (ServoReadMicrosE sv)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  285)           return $ RemBindI16 i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  286)       packProcedure QueryAllTasks = packShallowProcedure QueryAllTasks []
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  287)       packProcedure QueryAllTasksE = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  288)           i <- packDeepProcedure QueryAllTasksE
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  289)           return $ RemBindList8 i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  290)       packProcedure (QueryTask t) = packShallowProcedure (QueryTask t) Nothing
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  291)       packProcedure (QueryTaskE t) = packShallowProcedure (QueryTaskE t) Nothing
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  292)       packProcedure (BootTaskE tids) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  293)           i <- packDeepProcedure (BootTaskE tids)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  294)           return $ RemBindB i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  295)       packProcedure (ReadRemoteRefBE (RemoteRefB i')) = do
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  296)           i <- packDeepProcedure (ReadRemoteRefBE (RemoteRefB i'))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  297)           return $ RemBindB i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  298)       packProcedure (ReadRemoteRefW8E (RemoteRefW8 i')) = do
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  299)           i <- packDeepProcedure (ReadRemoteRefW8E (RemoteRefW8 i'))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  300)           return $ RemBindW8 i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  301)       packProcedure (ReadRemoteRefW16E (RemoteRefW16 i')) = do
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  302)           i <- packDeepProcedure (ReadRemoteRefW16E (RemoteRefW16 i'))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  303)           return $ RemBindW16 i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  304)       packProcedure (ReadRemoteRefW32E (RemoteRefW32 i')) = do
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  305)           i <- packDeepProcedure (ReadRemoteRefW32E (RemoteRefW32 i'))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  306)           return $ RemBindW32 i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  307)       packProcedure (ReadRemoteRefI8E (RemoteRefI8 i')) = do
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  308)           i <- packDeepProcedure (ReadRemoteRefI8E (RemoteRefI8 i'))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  309)           return $ RemBindI8 i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  310)       packProcedure (ReadRemoteRefI16E (RemoteRefI16 i')) = do
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  311)           i <- packDeepProcedure (ReadRemoteRefI16E (RemoteRefI16 i'))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  312)           return $ RemBindI16 i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  313)       packProcedure (ReadRemoteRefI32E (RemoteRefI32 i')) = do
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  314)           i <- packDeepProcedure (ReadRemoteRefI32E (RemoteRefI32 i'))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  315)           return $ RemBindI32 i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  316)       packProcedure (ReadRemoteRefL8E (RemoteRefL8 i')) = do
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  317)           i <- packDeepProcedure (ReadRemoteRefL8E (RemoteRefL8 i'))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  318)           return $ RemBindList8 i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  319)       packProcedure (ReadRemoteRefFloatE (RemoteRefFloat i')) = do
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  320)           i <- packDeepProcedure (ReadRemoteRefFloatE (RemoteRefFloat i'))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  321)           return $ RemBindFloat i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  322)       packProcedure (NewRemoteRefBE e) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  323)           s <- get
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  324)           packNewRef (NewRemoteRefBE e) (RemoteRefB (ix s))
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  325)       packProcedure (NewRemoteRefW8E e) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  326)           s <- get
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  327)           packNewRef (NewRemoteRefW8E e) (RemoteRefW8 (ix s))
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  328)       packProcedure (NewRemoteRefW16E e) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  329)           s <- get
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  330)           packNewRef (NewRemoteRefW16E e) (RemoteRefW16 (ix s))
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  331)       packProcedure (NewRemoteRefW32E e) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  332)           s <- get
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  333)           packNewRef (NewRemoteRefW32E e) (RemoteRefW32 (ix s))
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  334)       packProcedure (NewRemoteRefI8E e) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  335)           s <- get
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  336)           packNewRef (NewRemoteRefI8E e) (RemoteRefI8 (ix s))
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  337)       packProcedure (NewRemoteRefI16E e) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  338)           s <- get
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  339)           packNewRef (NewRemoteRefI16E e) (RemoteRefI16 (ix s))
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  340)       packProcedure (NewRemoteRefI32E e) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  341)           s <- get
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  342)           packNewRef (NewRemoteRefI32E e) (RemoteRefI32 (ix s))
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  343)       packProcedure (NewRemoteRefL8E e) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  344)           s <- get
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  345)           packNewRef (NewRemoteRefL8E e) (RemoteRefL8 (ix s))
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  346)       packProcedure (NewRemoteRefFloatE e) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  347)           s <- get
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500  348)           packNewRef (NewRemoteRefFloatE e) (RemoteRefFloat (ix s))
8b78f41f System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-21 21:46:23 -0600  349)       packProcedure (IfThenElseBoolE e cb1 cb2) = do
8b78f41f System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-21 21:46:23 -0600  350)           i <- packDeepProcedure (IfThenElseBoolE e cb1 cb2)
8b78f41f System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-21 21:46:23 -0600  351)           return $ RemBindB i
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  352)       packProcedure (IfThenElseWord8E e cb1 cb2) = do
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  353)           i <- packDeepProcedure (IfThenElseWord8E e cb1 cb2)
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  354)           return $ RemBindW8 i
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  355)       packProcedure (IfThenElseWord16E e cb1 cb2) = do
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  356)           i <- packDeepProcedure (IfThenElseWord16E e cb1 cb2)
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  357)           return $ RemBindW16 i
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  358)       packProcedure (IfThenElseWord32E e cb1 cb2) = do
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  359)           i <- packDeepProcedure (IfThenElseWord32E e cb1 cb2)
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  360)           return $ RemBindW32 i
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  361)       packProcedure (IfThenElseInt8E e cb1 cb2) = do
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  362)           i <- packDeepProcedure (IfThenElseInt8E e cb1 cb2)
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  363)           return $ RemBindI8 i
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  364)       packProcedure (IfThenElseInt16E e cb1 cb2) = do
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  365)           i <- packDeepProcedure (IfThenElseInt16E e cb1 cb2)
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  366)           return $ RemBindI16 i
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  367)       packProcedure (IfThenElseInt32E e cb1 cb2) = do
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  368)           i <- packDeepProcedure (IfThenElseInt32E e cb1 cb2)
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  369)           return $ RemBindI32 i
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  370)       packProcedure (IfThenElseL8E e cb1 cb2) = do
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  371)           i <- packDeepProcedure (IfThenElseL8E e cb1 cb2)
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  372)           return $ RemBindList8 i
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  373)       packProcedure (IfThenElseFloatE e cb1 cb2) = do
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  374)           i <- packDeepProcedure (IfThenElseFloatE e cb1 cb2)
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600  375)           return $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  376)       -- The following IfThenElse* functions generated by toold/GenEitherTypes.hs
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  377)       packProcedure (IfThenElseUnitUnit e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  378)           i <- packDeepProcedure (IfThenElseUnitUnit e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  379)           return $ ExprLeft $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  380)       packProcedure (IfThenElseUnitBool e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  381)           i <- packDeepProcedure (IfThenElseUnitBool e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  382)           return $ ExprLeft $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  383)       packProcedure (IfThenElseUnitW8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  384)           i <- packDeepProcedure (IfThenElseUnitW8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  385)           return $ ExprLeft $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  386)       packProcedure (IfThenElseUnitW16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  387)           i <- packDeepProcedure (IfThenElseUnitW16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  388)           return $ ExprLeft $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  389)       packProcedure (IfThenElseUnitW32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  390)           i <- packDeepProcedure (IfThenElseUnitW32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  391)           return $ ExprLeft $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  392)       packProcedure (IfThenElseUnitI8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  393)           i <- packDeepProcedure (IfThenElseUnitI8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  394)           return $ ExprLeft $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  395)       packProcedure (IfThenElseUnitI16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  396)           i <- packDeepProcedure (IfThenElseUnitI16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  397)           return $ ExprLeft $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  398)       packProcedure (IfThenElseUnitI32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  399)           i <- packDeepProcedure (IfThenElseUnitI32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  400)           return $ ExprLeft $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  401)       packProcedure (IfThenElseUnitL8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  402)           i <- packDeepProcedure (IfThenElseUnitL8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  403)           return $ ExprLeft $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  404)       packProcedure (IfThenElseUnitFloat e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  405)           i <- packDeepProcedure (IfThenElseUnitFloat e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  406)           return $ ExprLeft $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  407)       packProcedure (IfThenElseBoolUnit e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  408)           i <- packDeepProcedure (IfThenElseBoolUnit e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  409)           return $ ExprLeft $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  410)       packProcedure (IfThenElseBoolBool e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  411)           i <- packDeepProcedure (IfThenElseBoolBool e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  412)           return $ ExprLeft $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  413)       packProcedure (IfThenElseBoolW8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  414)           i <- packDeepProcedure (IfThenElseBoolW8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  415)           return $ ExprLeft $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  416)       packProcedure (IfThenElseBoolW16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  417)           i <- packDeepProcedure (IfThenElseBoolW16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  418)           return $ ExprLeft $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  419)       packProcedure (IfThenElseBoolW32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  420)           i <- packDeepProcedure (IfThenElseBoolW32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  421)           return $ ExprLeft $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  422)       packProcedure (IfThenElseBoolI8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  423)           i <- packDeepProcedure (IfThenElseBoolI8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  424)           return $ ExprLeft $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  425)       packProcedure (IfThenElseBoolI16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  426)           i <- packDeepProcedure (IfThenElseBoolI16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  427)           return $ ExprLeft $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  428)       packProcedure (IfThenElseBoolI32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  429)           i <- packDeepProcedure (IfThenElseBoolI32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  430)           return $ ExprLeft $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  431)       packProcedure (IfThenElseBoolL8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  432)           i <- packDeepProcedure (IfThenElseBoolL8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  433)           return $ ExprLeft $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  434)       packProcedure (IfThenElseBoolFloat e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  435)           i <- packDeepProcedure (IfThenElseBoolFloat e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  436)           return $ ExprLeft $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  437)       packProcedure (IfThenElseW8Unit e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  438)           i <- packDeepProcedure (IfThenElseW8Unit e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  439)           return $ ExprLeft $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  440)       packProcedure (IfThenElseW8Bool e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  441)           i <- packDeepProcedure (IfThenElseW8Bool e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  442)           return $ ExprLeft $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  443)       packProcedure (IfThenElseW8W8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  444)           i <- packDeepProcedure (IfThenElseW8W8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  445)           return $ ExprLeft $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  446)       packProcedure (IfThenElseW8W16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  447)           i <- packDeepProcedure (IfThenElseW8W16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  448)           return $ ExprLeft $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  449)       packProcedure (IfThenElseW8W32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  450)           i <- packDeepProcedure (IfThenElseW8W32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  451)           return $ ExprLeft $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  452)       packProcedure (IfThenElseW8I8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  453)           i <- packDeepProcedure (IfThenElseW8I8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  454)           return $ ExprLeft $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  455)       packProcedure (IfThenElseW8I16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  456)           i <- packDeepProcedure (IfThenElseW8I16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  457)           return $ ExprLeft $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  458)       packProcedure (IfThenElseW8I32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  459)           i <- packDeepProcedure (IfThenElseW8I32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  460)           return $ ExprLeft $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  461)       packProcedure (IfThenElseW8L8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  462)           i <- packDeepProcedure (IfThenElseW8L8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  463)           return $ ExprLeft $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  464)       packProcedure (IfThenElseW8Float e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  465)           i <- packDeepProcedure (IfThenElseW8Float e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  466)           return $ ExprLeft $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  467)       packProcedure (IfThenElseW16Unit e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  468)           i <- packDeepProcedure (IfThenElseW16Unit e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  469)           return $ ExprLeft $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  470)       packProcedure (IfThenElseW16Bool e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  471)           i <- packDeepProcedure (IfThenElseW16Bool e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  472)           return $ ExprLeft $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  473)       packProcedure (IfThenElseW16W8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  474)           i <- packDeepProcedure (IfThenElseW16W8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  475)           return $ ExprLeft $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  476)       packProcedure (IfThenElseW16W16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  477)           i <- packDeepProcedure (IfThenElseW16W16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  478)           return $ ExprLeft $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  479)       packProcedure (IfThenElseW16W32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  480)           i <- packDeepProcedure (IfThenElseW16W32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  481)           return $ ExprLeft $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  482)       packProcedure (IfThenElseW16I8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  483)           i <- packDeepProcedure (IfThenElseW16I8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  484)           return $ ExprLeft $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  485)       packProcedure (IfThenElseW16I16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  486)           i <- packDeepProcedure (IfThenElseW16I16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  487)           return $ ExprLeft $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  488)       packProcedure (IfThenElseW16I32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  489)           i <- packDeepProcedure (IfThenElseW16I32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  490)           return $ ExprLeft $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  491)       packProcedure (IfThenElseW16L8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  492)           i <- packDeepProcedure (IfThenElseW16L8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  493)           return $ ExprLeft $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  494)       packProcedure (IfThenElseW16Float e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  495)           i <- packDeepProcedure (IfThenElseW16Float e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  496)           return $ ExprLeft $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  497)       packProcedure (IfThenElseW32Unit e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  498)           i <- packDeepProcedure (IfThenElseW32Unit e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  499)           return $ ExprLeft $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  500)       packProcedure (IfThenElseW32Bool e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  501)           i <- packDeepProcedure (IfThenElseW32Bool e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  502)           return $ ExprLeft $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  503)       packProcedure (IfThenElseW32W8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  504)           i <- packDeepProcedure (IfThenElseW32W8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  505)           return $ ExprLeft $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  506)       packProcedure (IfThenElseW32W16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  507)           i <- packDeepProcedure (IfThenElseW32W16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  508)           return $ ExprLeft $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  509)       packProcedure (IfThenElseW32W32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  510)           i <- packDeepProcedure (IfThenElseW32W32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  511)           return $ ExprLeft $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  512)       packProcedure (IfThenElseW32I8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  513)           i <- packDeepProcedure (IfThenElseW32I8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  514)           return $ ExprLeft $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  515)       packProcedure (IfThenElseW32I16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  516)           i <- packDeepProcedure (IfThenElseW32I16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  517)           return $ ExprLeft $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  518)       packProcedure (IfThenElseW32I32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  519)           i <- packDeepProcedure (IfThenElseW32I32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  520)           return $ ExprLeft $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  521)       packProcedure (IfThenElseW32L8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  522)           i <- packDeepProcedure (IfThenElseW32L8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  523)           return $ ExprLeft $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  524)       packProcedure (IfThenElseW32Float e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  525)           i <- packDeepProcedure (IfThenElseW32Float e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  526)           return $ ExprLeft $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  527)       packProcedure (IfThenElseI8Unit e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  528)           i <- packDeepProcedure (IfThenElseI8Unit e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  529)           return $ ExprLeft $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  530)       packProcedure (IfThenElseI8Bool e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  531)           i <- packDeepProcedure (IfThenElseI8Bool e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  532)           return $ ExprLeft $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  533)       packProcedure (IfThenElseI8W8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  534)           i <- packDeepProcedure (IfThenElseI8W8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  535)           return $ ExprLeft $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  536)       packProcedure (IfThenElseI8W16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  537)           i <- packDeepProcedure (IfThenElseI8W16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  538)           return $ ExprLeft $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  539)       packProcedure (IfThenElseI8W32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  540)           i <- packDeepProcedure (IfThenElseI8W32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  541)           return $ ExprLeft $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  542)       packProcedure (IfThenElseI8I8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  543)           i <- packDeepProcedure (IfThenElseI8I8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  544)           return $ ExprLeft $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  545)       packProcedure (IfThenElseI8I16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  546)           i <- packDeepProcedure (IfThenElseI8I16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  547)           return $ ExprLeft $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  548)       packProcedure (IfThenElseI8I32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  549)           i <- packDeepProcedure (IfThenElseI8I32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  550)           return $ ExprLeft $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  551)       packProcedure (IfThenElseI8L8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  552)           i <- packDeepProcedure (IfThenElseI8L8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  553)           return $ ExprLeft $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  554)       packProcedure (IfThenElseI8Float e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  555)           i <- packDeepProcedure (IfThenElseI8Float e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  556)           return $ ExprLeft $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  557)       packProcedure (IfThenElseI16Unit e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  558)           i <- packDeepProcedure (IfThenElseI16Unit e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  559)           return $ ExprLeft $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  560)       packProcedure (IfThenElseI16Bool e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  561)           i <- packDeepProcedure (IfThenElseI16Bool e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  562)           return $ ExprLeft $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  563)       packProcedure (IfThenElseI16W8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  564)           i <- packDeepProcedure (IfThenElseI16W8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  565)           return $ ExprLeft $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  566)       packProcedure (IfThenElseI16W16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  567)           i <- packDeepProcedure (IfThenElseI16W16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  568)           return $ ExprLeft $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  569)       packProcedure (IfThenElseI16W32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  570)           i <- packDeepProcedure (IfThenElseI16W32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  571)           return $ ExprLeft $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  572)       packProcedure (IfThenElseI16I8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  573)           i <- packDeepProcedure (IfThenElseI16I8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  574)           return $ ExprLeft $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  575)       packProcedure (IfThenElseI16I16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  576)           i <- packDeepProcedure (IfThenElseI16I16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  577)           return $ ExprLeft $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  578)       packProcedure (IfThenElseI16I32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  579)           i <- packDeepProcedure (IfThenElseI16I32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  580)           return $ ExprLeft $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  581)       packProcedure (IfThenElseI16L8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  582)           i <- packDeepProcedure (IfThenElseI16L8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  583)           return $ ExprLeft $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  584)       packProcedure (IfThenElseI16Float e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  585)           i <- packDeepProcedure (IfThenElseI16Float e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  586)           return $ ExprLeft $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  587)       packProcedure (IfThenElseI32Unit e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  588)           i <- packDeepProcedure (IfThenElseI32Unit e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  589)           return $ ExprLeft $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  590)       packProcedure (IfThenElseI32Bool e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  591)           i <- packDeepProcedure (IfThenElseI32Bool e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  592)           return $ ExprLeft $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  593)       packProcedure (IfThenElseI32W8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  594)           i <- packDeepProcedure (IfThenElseI32W8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  595)           return $ ExprLeft $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  596)       packProcedure (IfThenElseI32W16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  597)           i <- packDeepProcedure (IfThenElseI32W16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  598)           return $ ExprLeft $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  599)       packProcedure (IfThenElseI32W32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  600)           i <- packDeepProcedure (IfThenElseI32W32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  601)           return $ ExprLeft $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  602)       packProcedure (IfThenElseI32I8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  603)           i <- packDeepProcedure (IfThenElseI32I8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  604)           return $ ExprLeft $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  605)       packProcedure (IfThenElseI32I16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  606)           i <- packDeepProcedure (IfThenElseI32I16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  607)           return $ ExprLeft $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  608)       packProcedure (IfThenElseI32I32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  609)           i <- packDeepProcedure (IfThenElseI32I32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  610)           return $ ExprLeft $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  611)       packProcedure (IfThenElseI32L8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  612)           i <- packDeepProcedure (IfThenElseI32L8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  613)           return $ ExprLeft $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  614)       packProcedure (IfThenElseI32Float e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  615)           i <- packDeepProcedure (IfThenElseI32Float e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  616)           return $ ExprLeft $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  617)       packProcedure (IfThenElseL8Unit e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  618)           i <- packDeepProcedure (IfThenElseL8Unit e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  619)           return $ ExprLeft $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  620)       packProcedure (IfThenElseL8Bool e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  621)           i <- packDeepProcedure (IfThenElseL8Bool e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  622)           return $ ExprLeft $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  623)       packProcedure (IfThenElseL8W8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  624)           i <- packDeepProcedure (IfThenElseL8W8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  625)           return $ ExprLeft $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  626)       packProcedure (IfThenElseL8W16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  627)           i <- packDeepProcedure (IfThenElseL8W16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  628)           return $ ExprLeft $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  629)       packProcedure (IfThenElseL8W32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  630)           i <- packDeepProcedure (IfThenElseL8W32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  631)           return $ ExprLeft $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  632)       packProcedure (IfThenElseL8I8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  633)           i <- packDeepProcedure (IfThenElseL8I8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  634)           return $ ExprLeft $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  635)       packProcedure (IfThenElseL8I16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  636)           i <- packDeepProcedure (IfThenElseL8I16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  637)           return $ ExprLeft $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  638)       packProcedure (IfThenElseL8I32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  639)           i <- packDeepProcedure (IfThenElseL8I32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  640)           return $ ExprLeft $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  641)       packProcedure (IfThenElseL8L8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  642)           i <- packDeepProcedure (IfThenElseL8L8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  643)           return $ ExprLeft $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  644)       packProcedure (IfThenElseL8Float e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  645)           i <- packDeepProcedure (IfThenElseL8Float e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  646)           return $ ExprLeft $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  647)       packProcedure (IfThenElseFloatUnit e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  648)           i <- packDeepProcedure (IfThenElseFloatUnit e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  649)           return $ ExprLeft $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  650)       packProcedure (IfThenElseFloatBool e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  651)           i <- packDeepProcedure (IfThenElseFloatBool e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  652)           return $ ExprLeft $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  653)       packProcedure (IfThenElseFloatW8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  654)           i <- packDeepProcedure (IfThenElseFloatW8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  655)           return $ ExprLeft $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  656)       packProcedure (IfThenElseFloatW16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  657)           i <- packDeepProcedure (IfThenElseFloatW16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  658)           return $ ExprLeft $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  659)       packProcedure (IfThenElseFloatW32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  660)           i <- packDeepProcedure (IfThenElseFloatW32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  661)           return $ ExprLeft $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  662)       packProcedure (IfThenElseFloatI8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  663)           i <- packDeepProcedure (IfThenElseFloatI8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  664)           return $ ExprLeft $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  665)       packProcedure (IfThenElseFloatI16 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  666)           i <- packDeepProcedure (IfThenElseFloatI16 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  667)           return $ ExprLeft $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  668)       packProcedure (IfThenElseFloatI32 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  669)           i <- packDeepProcedure (IfThenElseFloatI32 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  670)           return $ ExprLeft $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  671)       packProcedure (IfThenElseFloatL8 e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  672)           i <- packDeepProcedure (IfThenElseFloatL8 e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  673)           return $ ExprLeft $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  674)       packProcedure (IfThenElseFloatFloat e cb1 cb2) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  675)           i <- packDeepProcedure (IfThenElseFloatFloat e cb1 cb2)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  676)           return $ ExprLeft $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  677)       packProcedure (IterateUnitUnitE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  678)           i <- packDeepProcedure (IterateUnitUnitE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  679)           return $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  680)       packProcedure (IterateUnitBoolE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  681)           i <- packDeepProcedure (IterateUnitBoolE iv bf)
8b78f41f System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-21 21:46:23 -0600  682)           return $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  683)       packProcedure (IterateUnitW8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  684)           i <- packDeepProcedure (IterateUnitW8E iv bf)
8b78f41f System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-21 21:46:23 -0600  685)           return $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  686)       packProcedure (IterateUnitW16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  687)           i <- packDeepProcedure (IterateUnitW16E iv bf)
8b78f41f System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-21 21:46:23 -0600  688)           return $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  689)       packProcedure (IterateUnitW32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  690)           i <- packDeepProcedure (IterateUnitW32E iv bf)
8b78f41f System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-21 21:46:23 -0600  691)           return $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  692)       packProcedure (IterateUnitI8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  693)           i <- packDeepProcedure (IterateUnitI8E iv bf)
8b78f41f System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-21 21:46:23 -0600  694)           return $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  695)       packProcedure (IterateUnitI16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  696)           i <- packDeepProcedure (IterateUnitI16E iv bf)
8b78f41f System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-21 21:46:23 -0600  697)           return $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  698)       packProcedure (IterateUnitI32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  699)           i <- packDeepProcedure (IterateUnitI32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  700)           return $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  701)       packProcedure (IterateUnitL8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  702)           i <- packDeepProcedure (IterateUnitL8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  703)           return $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  704)       packProcedure (IterateUnitFloatE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  705)           i <- packDeepProcedure (IterateUnitFloatE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  706)           return $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  707)       packProcedure (IterateBoolUnitE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  708)           i <- packDeepProcedure (IterateBoolUnitE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  709)           return $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  710)       packProcedure (IterateBoolBoolE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  711)           i <- packDeepProcedure (IterateBoolBoolE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  712)           return $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  713)       packProcedure (IterateBoolW8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  714)           i <- packDeepProcedure (IterateBoolW8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  715)           return $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  716)       packProcedure (IterateBoolW16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  717)           i <- packDeepProcedure (IterateBoolW16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  718)           return $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  719)       packProcedure (IterateBoolW32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  720)           i <- packDeepProcedure (IterateBoolW32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  721)           return $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  722)       packProcedure (IterateBoolI8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  723)           i <- packDeepProcedure (IterateBoolI8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  724)           return $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  725)       packProcedure (IterateBoolI16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  726)           i <- packDeepProcedure (IterateBoolI16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  727)           return $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  728)       packProcedure (IterateBoolI32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  729)           i <- packDeepProcedure (IterateBoolI32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  730)           return $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  731)       packProcedure (IterateBoolL8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  732)           i <- packDeepProcedure (IterateBoolL8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  733)           return $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  734)       packProcedure (IterateBoolFloatE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  735)           i <- packDeepProcedure (IterateBoolFloatE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  736)           return $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  737)       -- The following Iterate*E functions generated by toold/GenEitherTypes.hs
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500  738)       packProcedure (IterateW8UnitE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  739)           i <- packDeepProcedure (IterateW8UnitE iv bf)
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500  740)           return $ RemBindUnit i
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500  741)       packProcedure (IterateW8BoolE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  742)           i <- packDeepProcedure (IterateW8BoolE iv bf)
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500  743)           return $ RemBindB i
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500  744)       packProcedure (IterateW8W8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  745)           i <- packDeepProcedure (IterateW8W8E iv bf)
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500  746)           return $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  747)       packProcedure (IterateW8W16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  748)           i <- packDeepProcedure (IterateW8W16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  749)           return $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  750)       packProcedure (IterateW8W32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  751)           i <- packDeepProcedure (IterateW8W32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  752)           return $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  753)       packProcedure (IterateW8I8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  754)           i <- packDeepProcedure (IterateW8I8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  755)           return $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  756)       packProcedure (IterateW8I16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  757)           i <- packDeepProcedure (IterateW8I16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  758)           return $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  759)       packProcedure (IterateW8I32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  760)           i <- packDeepProcedure (IterateW8I32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  761)           return $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  762)       packProcedure (IterateW8L8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  763)           i <- packDeepProcedure (IterateW8L8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  764)           return $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  765)       packProcedure (IterateW8FloatE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  766)           i <- packDeepProcedure (IterateW8FloatE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  767)           return $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  768)       packProcedure (IterateW16UnitE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  769)           i <- packDeepProcedure (IterateW16UnitE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  770)           return $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  771)       packProcedure (IterateW16BoolE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  772)           i <- packDeepProcedure (IterateW16BoolE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  773)           return $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  774)       packProcedure (IterateW16W8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  775)           i <- packDeepProcedure (IterateW16W8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  776)           return $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  777)       packProcedure (IterateW16W16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  778)           i <- packDeepProcedure (IterateW16W16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  779)           return $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  780)       packProcedure (IterateW16W32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  781)           i <- packDeepProcedure (IterateW16W32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  782)           return $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  783)       packProcedure (IterateW16I8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  784)           i <- packDeepProcedure (IterateW16I8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  785)           return $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  786)       packProcedure (IterateW16I16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  787)           i <- packDeepProcedure (IterateW16I16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  788)           return $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  789)       packProcedure (IterateW16I32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  790)           i <- packDeepProcedure (IterateW16I32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  791)           return $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  792)       packProcedure (IterateW16L8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  793)           i <- packDeepProcedure (IterateW16L8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  794)           return $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  795)       packProcedure (IterateW16FloatE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  796)           i <- packDeepProcedure (IterateW16FloatE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  797)           return $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  798)       packProcedure (IterateW32UnitE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  799)           i <- packDeepProcedure (IterateW32UnitE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  800)           return $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  801)       packProcedure (IterateW32BoolE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  802)           i <- packDeepProcedure (IterateW32BoolE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  803)           return $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  804)       packProcedure (IterateW32W8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  805)           i <- packDeepProcedure (IterateW32W8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  806)           return $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  807)       packProcedure (IterateW32W16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  808)           i <- packDeepProcedure (IterateW32W16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  809)           return $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  810)       packProcedure (IterateW32W32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  811)           i <- packDeepProcedure (IterateW32W32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  812)           return $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  813)       packProcedure (IterateW32I8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  814)           i <- packDeepProcedure (IterateW32I8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  815)           return $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  816)       packProcedure (IterateW32I16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  817)           i <- packDeepProcedure (IterateW32I16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  818)           return $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  819)       packProcedure (IterateW32I32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  820)           i <- packDeepProcedure (IterateW32I32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  821)           return $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  822)       packProcedure (IterateW32L8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  823)           i <- packDeepProcedure (IterateW32L8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  824)           return $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  825)       packProcedure (IterateW32FloatE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  826)           i <- packDeepProcedure (IterateW32FloatE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  827)           return $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  828)       packProcedure (IterateI8UnitE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  829)           i <- packDeepProcedure (IterateI8UnitE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  830)           return $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  831)       packProcedure (IterateI8BoolE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  832)           i <- packDeepProcedure (IterateI8BoolE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  833)           return $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  834)       packProcedure (IterateI8W8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  835)           i <- packDeepProcedure (IterateI8W8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  836)           return $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  837)       packProcedure (IterateI8W16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  838)           i <- packDeepProcedure (IterateI8W16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  839)           return $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  840)       packProcedure (IterateI8W32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  841)           i <- packDeepProcedure (IterateI8W32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  842)           return $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  843)       packProcedure (IterateI8I8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  844)           i <- packDeepProcedure (IterateI8I8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  845)           return $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  846)       packProcedure (IterateI8I16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  847)           i <- packDeepProcedure (IterateI8I16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  848)           return $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  849)       packProcedure (IterateI8I32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  850)           i <- packDeepProcedure (IterateI8I32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  851)           return $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  852)       packProcedure (IterateI8L8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  853)           i <- packDeepProcedure (IterateI8L8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  854)           return $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  855)       packProcedure (IterateI8FloatE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  856)           i <- packDeepProcedure (IterateI8FloatE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  857)           return $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  858)       packProcedure (IterateI16UnitE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  859)           i <- packDeepProcedure (IterateI16UnitE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  860)           return $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  861)       packProcedure (IterateI16BoolE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  862)           i <- packDeepProcedure (IterateI16BoolE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  863)           return $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  864)       packProcedure (IterateI16W8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  865)           i <- packDeepProcedure (IterateI16W8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  866)           return $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  867)       packProcedure (IterateI16W16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  868)           i <- packDeepProcedure (IterateI16W16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  869)           return $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  870)       packProcedure (IterateI16W32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  871)           i <- packDeepProcedure (IterateI16W32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  872)           return $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  873)       packProcedure (IterateI16I8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  874)           i <- packDeepProcedure (IterateI16I8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  875)           return $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  876)       packProcedure (IterateI16I16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  877)           i <- packDeepProcedure (IterateI16I16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  878)           return $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  879)       packProcedure (IterateI16I32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  880)           i <- packDeepProcedure (IterateI16I32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  881)           return $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  882)       packProcedure (IterateI16L8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  883)           i <- packDeepProcedure (IterateI16L8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  884)           return $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  885)       packProcedure (IterateI16FloatE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  886)           i <- packDeepProcedure (IterateI16FloatE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  887)           return $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  888)       packProcedure (IterateI32UnitE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  889)           i <- packDeepProcedure (IterateI32UnitE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  890)           return $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  891)       packProcedure (IterateI32BoolE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  892)           i <- packDeepProcedure (IterateI32BoolE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  893)           return $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  894)       packProcedure (IterateI32W8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  895)           i <- packDeepProcedure (IterateI32W8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  896)           return $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  897)       packProcedure (IterateI32W16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  898)           i <- packDeepProcedure (IterateI32W16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  899)           return $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  900)       packProcedure (IterateI32W32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  901)           i <- packDeepProcedure (IterateI32W32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  902)           return $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  903)       packProcedure (IterateI32I8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  904)           i <- packDeepProcedure (IterateI32I8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  905)           return $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  906)       packProcedure (IterateI32I16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  907)           i <- packDeepProcedure (IterateI32I16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  908)           return $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  909)       packProcedure (IterateI32I32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  910)           i <- packDeepProcedure (IterateI32I32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  911)           return $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  912)       packProcedure (IterateI32L8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  913)           i <- packDeepProcedure (IterateI32L8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  914)           return $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  915)       packProcedure (IterateI32FloatE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  916)           i <- packDeepProcedure (IterateI32FloatE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  917)           return $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  918)       packProcedure (IterateL8UnitE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  919)           i <- packDeepProcedure (IterateL8UnitE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  920)           return $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  921)       packProcedure (IterateL8BoolE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  922)           i <- packDeepProcedure (IterateL8BoolE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  923)           return $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  924)       packProcedure (IterateL8W8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  925)           i <- packDeepProcedure (IterateL8W8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  926)           return $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  927)       packProcedure (IterateL8W16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  928)           i <- packDeepProcedure (IterateL8W16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  929)           return $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  930)       packProcedure (IterateL8W32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  931)           i <- packDeepProcedure (IterateL8W32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  932)           return $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  933)       packProcedure (IterateL8I8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  934)           i <- packDeepProcedure (IterateL8I8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  935)           return $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  936)       packProcedure (IterateL8I16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  937)           i <- packDeepProcedure (IterateL8I16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  938)           return $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  939)       packProcedure (IterateL8I32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  940)           i <- packDeepProcedure (IterateL8I32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  941)           return $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  942)       packProcedure (IterateL8L8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  943)           i <- packDeepProcedure (IterateL8L8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  944)           return $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  945)       packProcedure (IterateL8FloatE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  946)           i <- packDeepProcedure (IterateL8FloatE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  947)           return $ RemBindFloat i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  948)       packProcedure (IterateFloatUnitE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  949)           i <- packDeepProcedure (IterateFloatUnitE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  950)           return $ RemBindUnit i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  951)       packProcedure (IterateFloatBoolE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  952)           i <- packDeepProcedure (IterateFloatBoolE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  953)           return $ RemBindB i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  954)       packProcedure (IterateFloatW8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  955)           i <- packDeepProcedure (IterateFloatW8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  956)           return $ RemBindW8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  957)       packProcedure (IterateFloatW16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  958)           i <- packDeepProcedure (IterateFloatW16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  959)           return $ RemBindW16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  960)       packProcedure (IterateFloatW32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  961)           i <- packDeepProcedure (IterateFloatW32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  962)           return $ RemBindW32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  963)       packProcedure (IterateFloatI8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  964)           i <- packDeepProcedure (IterateFloatI8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  965)           return $ RemBindI8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  966)       packProcedure (IterateFloatI16E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  967)           i <- packDeepProcedure (IterateFloatI16E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  968)           return $ RemBindI16 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  969)       packProcedure (IterateFloatI32E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  970)           i <- packDeepProcedure (IterateFloatI32E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  971)           return $ RemBindI32 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  972)       packProcedure (IterateFloatL8E iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  973)           i <- packDeepProcedure (IterateFloatL8E iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  974)           return $ RemBindList8 i
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  975)       packProcedure (IterateFloatFloatE iv bf) = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  976)           i <- packDeepProcedure (IterateFloatFloatE iv bf)
8d619919 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 20:40:11 -0500  977)           return $ RemBindFloat i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  978)       packProcedure (DebugE tids) = packShallowProcedure (DebugE tids) ()
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  979)       -- For sending as part of a Scheduler task, debug and die make no sense.
3894e047 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-20 22:35:22 -0600  980)       -- Instead of signalling an error, at this point they are just ignored.
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  981)       packProcedure (Debug _) = return ()
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  982)       packProcedure DebugListen = return ()
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  983)       packProcedure (Die _ _) = return ()
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500  984)       packProcedure _ = error "packProcedure: unsupported Procedure (it may have been a command)"
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500  985) 
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500  986)       packAppl :: RemoteApplicative ArduinoPrimitive a -> State CommandState a
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  987)       packAppl (T.Primitive p) = case knownResult p of
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  988)                                    Just a -> do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  989)                                               pc <- packageCommand p
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  990)                                               addToBlock $ lenPackage pc
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  991)                                               return a
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  992)                                    Nothing -> packProcedure p
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  993)       packAppl (T.Ap a1 a2) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  994)           f <- packAppl a1
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  995)           g <- packAppl a2
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500  996)           return $ f g
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500  997)       packAppl (T.Pure a)  = return a
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500  998)       packAppl (T.Alt _ _) = error "packAppl: \"Alt\" is not supported"
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500  999)       packAppl  T.Empty    = error "packAppl: \"Empty\" is not supported"
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1000) 
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1001)       packMonad :: RemoteMonad  ArduinoPrimitive a -> State CommandState a
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1002)       packMonad (T.Appl app) = packAppl app
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1003)       packMonad (T.Bind m k) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1004)           r <- packMonad m
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1005)           packMonad (k r)
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1006)       packMonad (T.Ap' m1 m2) = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1007)           f <- packMonad m1
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1008)           g <- packMonad m2
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1009)           return $ f g
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500 1010)       packMonad (T.Alt' _ _)  = error "packMonad: \"Alt\" is not supported"
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500 1011)       packMonad T.Empty'      = error "packMonad: \"Alt\" is not supported"
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500 1012)       packMonad (T.Catch _ _) = error "packMonad: \"Catch\" is not supported"
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500 1013)       packMonad (T.Throw  _)  = error "packMonad: \"Throw\" is not supported"
259d69ea System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-28 20:57:23 -0500 1014) 
a035cb5a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-23 20:03:42 -0600 1015) lenPackage :: B.ByteString -> B.ByteString
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1016) lenPackage package = B.append (lenEncode $ B.length package) package
652881db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-01-10 10:25:05 -0600 1017) 
a035cb5a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-23 20:03:42 -0600 1018) -- Length of the code block is encoded with a 1 or 3 byte sequence.
a035cb5a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-23 20:03:42 -0600 1019) -- If the length is 0-254, the length is sent as a one byte value.
a035cb5a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-23 20:03:42 -0600 1020) -- If the length is greater than 255, it is sent as a zero byte,
a035cb5a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-23 20:03:42 -0600 1021) -- following by a 16 bit little endian length.
a035cb5a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-23 20:03:42 -0600 1022) -- (Zero is not a valid length, as it would be an empty command)
a035cb5a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-23 20:03:42 -0600 1023) lenEncode :: Int -> B.ByteString
a035cb5a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-23 20:03:42 -0600 1024) lenEncode l = if l < 255
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1025)               then B.singleton $ fromIntegral l
a035cb5a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-23 20:03:42 -0600 1026)               else B.pack $ 0xFF : (word16ToBytes $ fromIntegral l)
101bc2ab System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-15 13:23:25 -0500 1027) 
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500 1028) packageProcedure :: ArduinoPrimitive a -> State CommandState B.ByteString
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1029) packageProcedure p = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1030)     s <- get
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500 1031)     packageProcedure' p (fromIntegral (ib s))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1032)   where
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500 1033)     packageProcedure' :: ArduinoPrimitive a -> Int -> State CommandState B.ByteString
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1034)     packageProcedure' QueryFirmware ib    = addCommand BS_CMD_REQUEST_VERSION [fromIntegral ib]
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1035)     packageProcedure' QueryFirmwareE ib   = addCommand BS_CMD_REQUEST_VERSION [fromIntegral ib]
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1036)     packageProcedure' QueryProcessor ib   = addCommand BS_CMD_REQUEST_TYPE [fromIntegral ib]
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1037)     packageProcedure' QueryProcessorE ib  = addCommand BS_CMD_REQUEST_TYPE [fromIntegral ib]
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1038)     packageProcedure' Micros ib           = addCommand BS_CMD_REQUEST_MICROS [fromIntegral ib]
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1039)     packageProcedure' MicrosE ib          = addCommand BS_CMD_REQUEST_MICROS [fromIntegral ib]
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1040)     packageProcedure' Millis ib           = addCommand BS_CMD_REQUEST_MILLIS [fromIntegral ib]
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1041)     packageProcedure' MillisE ib          = addCommand BS_CMD_REQUEST_MILLIS [fromIntegral ib]
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1042)     packageProcedure' (DigitalRead p) ib  = addCommand DIG_CMD_READ_PIN ((fromIntegral ib) : (packageExpr $ lit p))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1043)     packageProcedure' (DigitalReadE pe) ib = addCommand DIG_CMD_READ_PIN ((fromIntegral ib) : (packageExpr pe))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1044)     packageProcedure' (DigitalPortRead p m) ib  = addCommand DIG_CMD_READ_PORT ((fromIntegral ib) : ((packageExpr $ lit p) ++ (packageExpr $ lit m)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1045)     packageProcedure' (DigitalPortReadE pe me) ib = addCommand DIG_CMD_READ_PORT ((fromIntegral ib) : ((packageExpr pe) ++ (packageExpr me)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1046)     packageProcedure' (AnalogRead p) ib   = addCommand ALG_CMD_READ_PIN ((fromIntegral ib) : (packageExpr $ lit p))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1047)     packageProcedure' (AnalogReadE pe) ib = addCommand ALG_CMD_READ_PIN ((fromIntegral ib) : (packageExpr pe))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1048)     packageProcedure' (I2CRead sa cnt) ib = addCommand I2C_CMD_READ ((fromIntegral ib) : ((packageExpr $ lit sa) ++ (packageExpr $ lit cnt)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1049)     packageProcedure' (I2CReadE sae cnte) ib = addCommand I2C_CMD_READ ((fromIntegral ib) : ((packageExpr sae) ++ (packageExpr cnte)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1050)     packageProcedure' (Stepper2Pin s p1 p2) ib = addCommand STEP_CMD_2PIN ((fromIntegral ib) : ((packageExpr $ lit s) ++ (packageExpr $ lit p1) ++ (packageExpr $ lit p2)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1051)     packageProcedure' (Stepper2PinE s p1 p2) ib = addCommand STEP_CMD_2PIN ((fromIntegral ib) : ((packageExpr s) ++ (packageExpr p1) ++ (packageExpr p2)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1052)     packageProcedure' (Stepper4Pin s p1 p2 p3 p4) ib = addCommand STEP_CMD_4PIN ((fromIntegral ib) : ((packageExpr $ lit s) ++ (packageExpr $ lit p1) ++ (packageExpr $ lit p2) ++ (packageExpr $ lit p3) ++ (packageExpr $ lit p4)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1053)     packageProcedure' (Stepper4PinE s p1 p2 p3 p4) ib = addCommand STEP_CMD_4PIN ((fromIntegral ib) : ((packageExpr s) ++ (packageExpr p1) ++ (packageExpr p2)++ (packageExpr p3) ++ (packageExpr p4)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1054)     packageProcedure' (StepperStepE st s) ib = addCommand STEP_CMD_STEP ((fromIntegral ib) : ((packageExpr st) ++ (packageExpr s)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1055)     packageProcedure' (ServoAttach p) ib = addCommand SRVO_CMD_ATTACH ((fromIntegral ib) : ((packageExpr $ lit p) ++ (packageExpr $ lit minServo) ++ (packageExpr $ lit maxServo)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1056)     packageProcedure' (ServoAttachE p) ib = addCommand SRVO_CMD_ATTACH ((fromIntegral ib) : ((packageExpr p) ++ (packageExpr $ lit minServo) ++ (packageExpr $ lit maxServo)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1057)     packageProcedure' (ServoAttachMinMax p min max) ib = addCommand SRVO_CMD_ATTACH ((fromIntegral ib) : ((packageExpr $ lit p) ++ (packageExpr $ lit min) ++ (packageExpr $ lit max)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1058)     packageProcedure' (ServoAttachMinMaxE p min max) ib = addCommand SRVO_CMD_ATTACH ((fromIntegral ib) : ((packageExpr p)++ (packageExpr min) ++ (packageExpr max)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1059)     packageProcedure' (ServoRead sv) ib = addCommand SRVO_CMD_READ ((fromIntegral ib) : ((packageExpr $ lit sv)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1060)     packageProcedure' (ServoReadE sv) ib = addCommand SRVO_CMD_READ ((fromIntegral ib) : ((packageExpr sv)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1061)     packageProcedure' (ServoReadMicros sv) ib = addCommand SRVO_CMD_READ_MICROS ((fromIntegral ib) : ((packageExpr $ lit sv)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1062)     packageProcedure' (ServoReadMicrosE sv) ib = addCommand SRVO_CMD_READ_MICROS ((fromIntegral ib) : ((packageExpr sv)))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1063)     packageProcedure' QueryAllTasks ib    = addCommand SCHED_CMD_QUERY_ALL [fromIntegral ib]
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1064)     packageProcedure' QueryAllTasksE ib   = addCommand SCHED_CMD_QUERY_ALL [fromIntegral ib]
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1065)     packageProcedure' (QueryTask tid) ib  = addCommand SCHED_CMD_QUERY ((fromIntegral ib) : (packageExpr $ lit tid))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1066)     packageProcedure' (QueryTaskE tide) ib = addCommand SCHED_CMD_QUERY ((fromIntegral ib) : (packageExpr tide))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1067)     packageProcedure' (DelayMillis ms) ib  = addCommand BC_CMD_DELAY_MILLIS ((fromIntegral ib) : (packageExpr $ lit ms))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1068)     packageProcedure' (DelayMillisE ms) ib = addCommand BC_CMD_DELAY_MILLIS ((fromIntegral ib) : (packageExpr ms))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1069)     packageProcedure' (DelayMicros ms) ib  = addCommand BC_CMD_DELAY_MICROS ((fromIntegral ib) : (packageExpr $ lit ms))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1070)     packageProcedure' (DelayMicrosE ms) ib = addCommand BC_CMD_DELAY_MICROS ((fromIntegral ib) : (packageExpr ms))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1071)     packageProcedure' (BootTaskE tids) ib = addCommand SCHED_CMD_BOOT_TASK ((fromIntegral ib) : (packageExpr tids))
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1072)     packageProcedure' (ReadRemoteRefBE (RemoteRefB i)) ib = packageReadRefProcedure EXPR_BOOL ib i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1073)     packageProcedure' (ReadRemoteRefW8E (RemoteRefW8 i)) ib = packageReadRefProcedure EXPR_WORD8 ib i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1074)     packageProcedure' (ReadRemoteRefW16E (RemoteRefW16 i)) ib = packageReadRefProcedure EXPR_WORD16 ib i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1075)     packageProcedure' (ReadRemoteRefW32E (RemoteRefW32 i)) ib = packageReadRefProcedure EXPR_WORD32 ib i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1076)     packageProcedure' (ReadRemoteRefI8E (RemoteRefI8 i)) ib = packageReadRefProcedure EXPR_INT8 ib i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1077)     packageProcedure' (ReadRemoteRefI16E (RemoteRefI16 i)) ib = packageReadRefProcedure EXPR_INT16 ib i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1078)     packageProcedure' (ReadRemoteRefI32E (RemoteRefI32 i)) ib = packageReadRefProcedure EXPR_INT32 ib i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1079)     packageProcedure' (ReadRemoteRefL8E (RemoteRefL8 i)) ib = packageReadRefProcedure EXPR_LIST8 ib i
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1080)     packageProcedure' (ReadRemoteRefFloatE (RemoteRefFloat i)) ib = packageReadRefProcedure EXPR_FLOAT ib i
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1081)     packageProcedure' (DebugE s) ib = addCommand BS_CMD_DEBUG ((fromIntegral ib) : (packageExpr s))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1082)     packageProcedure' (IfThenElseBoolE e cb1 cb2) ib = packageIfThenElseProcedure EXPR_BOOL ib e cb1 cb2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1083)     packageProcedure' (IfThenElseWord8E e cb1 cb2) ib = packageIfThenElseProcedure EXPR_WORD8 ib e cb1 cb2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1084)     packageProcedure' (IfThenElseWord16E e cb1 cb2) ib = packageIfThenElseProcedure EXPR_WORD16 ib e cb1 cb2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1085)     packageProcedure' (IfThenElseWord32E e cb1 cb2) ib = packageIfThenElseProcedure EXPR_WORD32 ib e cb1 cb2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1086)     packageProcedure' (IfThenElseInt8E e cb1 cb2) ib = packageIfThenElseProcedure EXPR_INT8 ib e cb1 cb2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1087)     packageProcedure' (IfThenElseInt16E e cb1 cb2) ib = packageIfThenElseProcedure EXPR_INT16 ib e cb1 cb2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1088)     packageProcedure' (IfThenElseInt32E e cb1 cb2) ib = packageIfThenElseProcedure EXPR_INT32 ib e cb1 cb2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1089)     packageProcedure' (IfThenElseL8E e cb1 cb2) ib = packageIfThenElseProcedure EXPR_LIST8 ib e cb1 cb2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1090)     packageProcedure' (IfThenElseFloatE e cb1 cb2) ib = packageIfThenElseProcedure EXPR_FLOAT ib e cb1 cb2
4d8e4724 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:23:59 -0500 1091)     -- The following IfThenElse* functions generated by toold/GenEitherTypes.hs
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1092)     packageProcedure' (IfThenElseUnitUnit e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_UNIT EXPR_UNIT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1093)     packageProcedure' (IfThenElseUnitBool e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_UNIT EXPR_BOOL ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1094)     packageProcedure' (IfThenElseUnitW8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_UNIT EXPR_WORD8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1095)     packageProcedure' (IfThenElseUnitW16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_UNIT EXPR_WORD16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1096)     packageProcedure' (IfThenElseUnitW32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_UNIT EXPR_WORD32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1097)     packageProcedure' (IfThenElseUnitI8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_UNIT EXPR_INT8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1098)     packageProcedure' (IfThenElseUnitI16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_UNIT EXPR_INT16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1099)     packageProcedure' (IfThenElseUnitI32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_UNIT EXPR_INT32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1100)     packageProcedure' (IfThenElseUnitL8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_UNIT EXPR_LIST8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1101)     packageProcedure' (IfThenElseUnitFloat e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_UNIT EXPR_FLOAT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1102)     packageProcedure' (IfThenElseBoolUnit e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_BOOL EXPR_UNIT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1103)     packageProcedure' (IfThenElseBoolBool e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_BOOL EXPR_BOOL ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1104)     packageProcedure' (IfThenElseBoolW8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_BOOL EXPR_WORD8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1105)     packageProcedure' (IfThenElseBoolW16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_BOOL EXPR_WORD16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1106)     packageProcedure' (IfThenElseBoolW32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_BOOL EXPR_WORD32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1107)     packageProcedure' (IfThenElseBoolI8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_BOOL EXPR_INT8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1108)     packageProcedure' (IfThenElseBoolI16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_BOOL EXPR_INT16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1109)     packageProcedure' (IfThenElseBoolI32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_BOOL EXPR_INT32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1110)     packageProcedure' (IfThenElseBoolL8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_BOOL EXPR_LIST8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1111)     packageProcedure' (IfThenElseBoolFloat e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_BOOL EXPR_FLOAT ib e cb1 cb2
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1112)     packageProcedure' (IfThenElseW8Unit e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD8 EXPR_UNIT ib e cb1 cb2
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1113)     packageProcedure' (IfThenElseW8Bool e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD8 EXPR_BOOL ib e cb1 cb2
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1114)     packageProcedure' (IfThenElseW8W8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD8 EXPR_WORD8 ib e cb1 cb2
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1115)     packageProcedure' (IfThenElseW8W16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD8 EXPR_WORD16 ib e cb1 cb2
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1116)     packageProcedure' (IfThenElseW8W32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD8 EXPR_WORD32 ib e cb1 cb2
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1117)     packageProcedure' (IfThenElseW8I8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD8 EXPR_INT8 ib e cb1 cb2
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1118)     packageProcedure' (IfThenElseW8I16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD8 EXPR_INT16 ib e cb1 cb2
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1119)     packageProcedure' (IfThenElseW8I32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD8 EXPR_INT32 ib e cb1 cb2
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1120)     packageProcedure' (IfThenElseW8L8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD8 EXPR_LIST8 ib e cb1 cb2
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1121)     packageProcedure' (IfThenElseW8Float e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD8 EXPR_FLOAT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1122)     packageProcedure' (IfThenElseW16Unit e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD16 EXPR_UNIT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1123)     packageProcedure' (IfThenElseW16Bool e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD16 EXPR_BOOL ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1124)     packageProcedure' (IfThenElseW16W8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD16 EXPR_WORD8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1125)     packageProcedure' (IfThenElseW16W16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD16 EXPR_WORD16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1126)     packageProcedure' (IfThenElseW16W32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD16 EXPR_WORD32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1127)     packageProcedure' (IfThenElseW16I8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD16 EXPR_INT8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1128)     packageProcedure' (IfThenElseW16I16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD16 EXPR_INT16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1129)     packageProcedure' (IfThenElseW16I32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD16 EXPR_INT32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1130)     packageProcedure' (IfThenElseW16L8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD16 EXPR_LIST8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1131)     packageProcedure' (IfThenElseW16Float e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD16 EXPR_FLOAT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1132)     packageProcedure' (IfThenElseW32Unit e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD32 EXPR_UNIT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1133)     packageProcedure' (IfThenElseW32Bool e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD32 EXPR_BOOL ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1134)     packageProcedure' (IfThenElseW32W8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD32 EXPR_WORD8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1135)     packageProcedure' (IfThenElseW32W16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD32 EXPR_WORD16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1136)     packageProcedure' (IfThenElseW32W32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD32 EXPR_WORD32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1137)     packageProcedure' (IfThenElseW32I8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD32 EXPR_INT8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1138)     packageProcedure' (IfThenElseW32I16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD32 EXPR_INT16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1139)     packageProcedure' (IfThenElseW32I32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD32 EXPR_INT32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1140)     packageProcedure' (IfThenElseW32L8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD32 EXPR_LIST8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1141)     packageProcedure' (IfThenElseW32Float e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_WORD32 EXPR_FLOAT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1142)     packageProcedure' (IfThenElseI8Unit e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT8 EXPR_UNIT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1143)     packageProcedure' (IfThenElseI8Bool e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT8 EXPR_BOOL ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1144)     packageProcedure' (IfThenElseI8W8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT8 EXPR_WORD8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1145)     packageProcedure' (IfThenElseI8W16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT8 EXPR_WORD16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1146)     packageProcedure' (IfThenElseI8W32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT8 EXPR_WORD32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1147)     packageProcedure' (IfThenElseI8I8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT8 EXPR_INT8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1148)     packageProcedure' (IfThenElseI8I16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT8 EXPR_INT16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1149)     packageProcedure' (IfThenElseI8I32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT8 EXPR_INT32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1150)     packageProcedure' (IfThenElseI8L8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT8 EXPR_LIST8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1151)     packageProcedure' (IfThenElseI8Float e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT8 EXPR_FLOAT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1152)     packageProcedure' (IfThenElseI16Unit e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT16 EXPR_UNIT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1153)     packageProcedure' (IfThenElseI16Bool e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT16 EXPR_BOOL ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1154)     packageProcedure' (IfThenElseI16W8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT16 EXPR_WORD8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1155)     packageProcedure' (IfThenElseI16W16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT16 EXPR_WORD16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1156)     packageProcedure' (IfThenElseI16W32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT16 EXPR_WORD32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1157)     packageProcedure' (IfThenElseI16I8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT16 EXPR_INT8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1158)     packageProcedure' (IfThenElseI16I16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT16 EXPR_INT16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1159)     packageProcedure' (IfThenElseI16I32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT16 EXPR_INT32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1160)     packageProcedure' (IfThenElseI16L8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT16 EXPR_LIST8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1161)     packageProcedure' (IfThenElseI16Float e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT16 EXPR_FLOAT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1162)     packageProcedure' (IfThenElseI32Unit e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT32 EXPR_UNIT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1163)     packageProcedure' (IfThenElseI32Bool e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT32 EXPR_BOOL ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1164)     packageProcedure' (IfThenElseI32W8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT32 EXPR_WORD8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1165)     packageProcedure' (IfThenElseI32W16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT32 EXPR_WORD16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1166)     packageProcedure' (IfThenElseI32W32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT32 EXPR_WORD32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1167)     packageProcedure' (IfThenElseI32I8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT32 EXPR_INT8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1168)     packageProcedure' (IfThenElseI32I16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT32 EXPR_INT16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1169)     packageProcedure' (IfThenElseI32I32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT32 EXPR_INT32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1170)     packageProcedure' (IfThenElseI32L8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT32 EXPR_LIST8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1171)     packageProcedure' (IfThenElseI32Float e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_INT32 EXPR_FLOAT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1172)     packageProcedure' (IfThenElseL8Unit e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_LIST8 EXPR_UNIT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1173)     packageProcedure' (IfThenElseL8Bool e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_LIST8 EXPR_BOOL ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1174)     packageProcedure' (IfThenElseL8W8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_LIST8 EXPR_WORD8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1175)     packageProcedure' (IfThenElseL8W16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_LIST8 EXPR_WORD16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1176)     packageProcedure' (IfThenElseL8W32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_LIST8 EXPR_WORD32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1177)     packageProcedure' (IfThenElseL8I8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_LIST8 EXPR_INT8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1178)     packageProcedure' (IfThenElseL8I16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_LIST8 EXPR_INT16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1179)     packageProcedure' (IfThenElseL8I32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_LIST8 EXPR_INT32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1180)     packageProcedure' (IfThenElseL8L8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_LIST8 EXPR_LIST8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1181)     packageProcedure' (IfThenElseL8Float e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_LIST8 EXPR_FLOAT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1182)     packageProcedure' (IfThenElseFloatUnit e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_FLOAT EXPR_UNIT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1183)     packageProcedure' (IfThenElseFloatBool e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_FLOAT EXPR_BOOL ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1184)     packageProcedure' (IfThenElseFloatW8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_FLOAT EXPR_WORD8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1185)     packageProcedure' (IfThenElseFloatW16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_FLOAT EXPR_WORD16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1186)     packageProcedure' (IfThenElseFloatW32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_FLOAT EXPR_WORD32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1187)     packageProcedure' (IfThenElseFloatI8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_FLOAT EXPR_INT8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1188)     packageProcedure' (IfThenElseFloatI16 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_FLOAT EXPR_INT16 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1189)     packageProcedure' (IfThenElseFloatI32 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_FLOAT EXPR_INT32 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1190)     packageProcedure' (IfThenElseFloatL8 e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_FLOAT EXPR_LIST8 ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1191)     packageProcedure' (IfThenElseFloatFloat e cb1 cb2) ib = packageIfThenElseEitherProcedure EXPR_FLOAT EXPR_FLOAT ib e cb1 cb2
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1192)       -- The following Iterate*E functions generated by toold/GenEitherTypes.hs
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1193)     packageProcedure' (IterateUnitUnitE iv bf) ib = packageIterateProcedure EXPR_UNIT EXPR_UNIT ib (RemBindUnit ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1194)     packageProcedure' (IterateUnitBoolE iv bf) ib = packageIterateProcedure EXPR_UNIT EXPR_BOOL ib (RemBindUnit ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1195)     packageProcedure' (IterateUnitW8E iv bf) ib = packageIterateProcedure EXPR_UNIT EXPR_WORD8 ib (RemBindUnit ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1196)     packageProcedure' (IterateUnitW16E iv bf) ib = packageIterateProcedure EXPR_UNIT EXPR_WORD16 ib (RemBindUnit ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1197)     packageProcedure' (IterateUnitW32E iv bf) ib = packageIterateProcedure EXPR_UNIT EXPR_WORD32 ib (RemBindUnit ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1198)     packageProcedure' (IterateUnitI8E iv bf) ib = packageIterateProcedure EXPR_UNIT EXPR_INT8 ib (RemBindUnit ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1199)     packageProcedure' (IterateUnitI16E iv bf) ib = packageIterateProcedure EXPR_UNIT EXPR_INT16 ib (RemBindUnit ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1200)     packageProcedure' (IterateUnitI32E iv bf) ib = packageIterateProcedure EXPR_UNIT EXPR_INT32 ib (RemBindUnit ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1201)     packageProcedure' (IterateUnitL8E iv bf) ib = packageIterateProcedure EXPR_UNIT EXPR_LIST8 ib (RemBindUnit ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1202)     packageProcedure' (IterateUnitFloatE iv bf) ib = packageIterateProcedure EXPR_UNIT EXPR_FLOAT ib (RemBindUnit ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1203)     packageProcedure' (IterateBoolUnitE iv bf) ib = packageIterateProcedure EXPR_BOOL EXPR_UNIT ib (RemBindB ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1204)     packageProcedure' (IterateBoolBoolE iv bf) ib = packageIterateProcedure EXPR_BOOL EXPR_BOOL ib (RemBindB ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1205)     packageProcedure' (IterateBoolW8E iv bf) ib = packageIterateProcedure EXPR_BOOL EXPR_WORD8 ib (RemBindB ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1206)     packageProcedure' (IterateBoolW16E iv bf) ib = packageIterateProcedure EXPR_BOOL EXPR_WORD16 ib (RemBindB ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1207)     packageProcedure' (IterateBoolW32E iv bf) ib = packageIterateProcedure EXPR_BOOL EXPR_WORD32 ib (RemBindB ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1208)     packageProcedure' (IterateBoolI8E iv bf) ib = packageIterateProcedure EXPR_BOOL EXPR_INT8 ib (RemBindB ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1209)     packageProcedure' (IterateBoolI16E iv bf) ib = packageIterateProcedure EXPR_BOOL EXPR_INT16 ib (RemBindB ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1210)     packageProcedure' (IterateBoolI32E iv bf) ib = packageIterateProcedure EXPR_BOOL EXPR_INT32 ib (RemBindB ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1211)     packageProcedure' (IterateBoolL8E iv bf) ib = packageIterateProcedure EXPR_BOOL EXPR_LIST8 ib (RemBindB ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1212)     packageProcedure' (IterateBoolFloatE iv bf) ib = packageIterateProcedure EXPR_BOOL EXPR_FLOAT ib (RemBindB ib) iv bf
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1213)     packageProcedure' (IterateW8UnitE iv bf) ib = packageIterateProcedure EXPR_WORD8 EXPR_UNIT ib (RemBindW8 ib) iv bf
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1214)     packageProcedure' (IterateW8BoolE iv bf) ib = packageIterateProcedure EXPR_WORD8 EXPR_BOOL ib (RemBindW8 ib) iv bf
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1215)     packageProcedure' (IterateW8W8E iv bf) ib = packageIterateProcedure EXPR_WORD8 EXPR_WORD8 ib (RemBindW8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1216)     packageProcedure' (IterateW8W16E iv bf) ib = packageIterateProcedure EXPR_WORD8 EXPR_WORD16 ib (RemBindW8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1217)     packageProcedure' (IterateW8W32E iv bf) ib = packageIterateProcedure EXPR_WORD8 EXPR_WORD32 ib (RemBindW8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1218)     packageProcedure' (IterateW8I8E iv bf) ib = packageIterateProcedure EXPR_WORD8 EXPR_INT8 ib (RemBindW8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1219)     packageProcedure' (IterateW8I16E iv bf) ib = packageIterateProcedure EXPR_WORD8 EXPR_INT16 ib (RemBindW8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1220)     packageProcedure' (IterateW8I32E iv bf) ib = packageIterateProcedure EXPR_WORD8 EXPR_INT32 ib (RemBindW8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1221)     packageProcedure' (IterateW8L8E iv bf) ib = packageIterateProcedure EXPR_WORD8 EXPR_LIST8 ib (RemBindW8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1222)     packageProcedure' (IterateW8FloatE iv bf) ib = packageIterateProcedure EXPR_WORD8 EXPR_FLOAT ib (RemBindW8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1223)     packageProcedure' (IterateW16UnitE iv bf) ib = packageIterateProcedure EXPR_WORD16 EXPR_UNIT ib (RemBindW16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1224)     packageProcedure' (IterateW16BoolE iv bf) ib = packageIterateProcedure EXPR_WORD16 EXPR_BOOL ib (RemBindW16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1225)     packageProcedure' (IterateW16W8E iv bf) ib = packageIterateProcedure EXPR_WORD16 EXPR_WORD8 ib (RemBindW16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1226)     packageProcedure' (IterateW16W16E iv bf) ib = packageIterateProcedure EXPR_WORD16 EXPR_WORD16 ib (RemBindW16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1227)     packageProcedure' (IterateW16W32E iv bf) ib = packageIterateProcedure EXPR_WORD16 EXPR_WORD32 ib (RemBindW16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1228)     packageProcedure' (IterateW16I8E iv bf) ib = packageIterateProcedure EXPR_WORD16 EXPR_INT8 ib (RemBindW16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1229)     packageProcedure' (IterateW16I16E iv bf) ib = packageIterateProcedure EXPR_WORD16 EXPR_INT16 ib (RemBindW16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1230)     packageProcedure' (IterateW16I32E iv bf) ib = packageIterateProcedure EXPR_WORD16 EXPR_INT32 ib (RemBindW16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1231)     packageProcedure' (IterateW16L8E iv bf) ib = packageIterateProcedure EXPR_WORD16 EXPR_LIST8 ib (RemBindW16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1232)     packageProcedure' (IterateW16FloatE iv bf) ib = packageIterateProcedure EXPR_WORD16 EXPR_FLOAT ib (RemBindW16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1233)     packageProcedure' (IterateW32UnitE iv bf) ib = packageIterateProcedure EXPR_WORD32 EXPR_UNIT ib (RemBindW32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1234)     packageProcedure' (IterateW32BoolE iv bf) ib = packageIterateProcedure EXPR_WORD32 EXPR_BOOL ib (RemBindW32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1235)     packageProcedure' (IterateW32W8E iv bf) ib = packageIterateProcedure EXPR_WORD32 EXPR_WORD8 ib (RemBindW32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1236)     packageProcedure' (IterateW32W16E iv bf) ib = packageIterateProcedure EXPR_WORD32 EXPR_WORD16 ib (RemBindW32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1237)     packageProcedure' (IterateW32W32E iv bf) ib = packageIterateProcedure EXPR_WORD32 EXPR_WORD32 ib (RemBindW32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1238)     packageProcedure' (IterateW32I8E iv bf) ib = packageIterateProcedure EXPR_WORD32 EXPR_INT8 ib (RemBindW32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1239)     packageProcedure' (IterateW32I16E iv bf) ib = packageIterateProcedure EXPR_WORD32 EXPR_INT16 ib (RemBindW32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1240)     packageProcedure' (IterateW32I32E iv bf) ib = packageIterateProcedure EXPR_WORD32 EXPR_INT32 ib (RemBindW32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1241)     packageProcedure' (IterateW32L8E iv bf) ib = packageIterateProcedure EXPR_WORD32 EXPR_LIST8 ib (RemBindW32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1242)     packageProcedure' (IterateW32FloatE iv bf) ib = packageIterateProcedure EXPR_WORD32 EXPR_FLOAT ib (RemBindW32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1243)     packageProcedure' (IterateI8UnitE iv bf) ib = packageIterateProcedure EXPR_INT8 EXPR_UNIT ib (RemBindI8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1244)     packageProcedure' (IterateI8BoolE iv bf) ib = packageIterateProcedure EXPR_INT8 EXPR_BOOL ib (RemBindI8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1245)     packageProcedure' (IterateI8W8E iv bf) ib = packageIterateProcedure EXPR_INT8 EXPR_WORD8 ib (RemBindI8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1246)     packageProcedure' (IterateI8W16E iv bf) ib = packageIterateProcedure EXPR_INT8 EXPR_WORD16 ib (RemBindI8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1247)     packageProcedure' (IterateI8W32E iv bf) ib = packageIterateProcedure EXPR_INT8 EXPR_WORD32 ib (RemBindI8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1248)     packageProcedure' (IterateI8I8E iv bf) ib = packageIterateProcedure EXPR_INT8 EXPR_INT8 ib (RemBindI8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1249)     packageProcedure' (IterateI8I16E iv bf) ib = packageIterateProcedure EXPR_INT8 EXPR_INT16 ib (RemBindI8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1250)     packageProcedure' (IterateI8I32E iv bf) ib = packageIterateProcedure EXPR_INT8 EXPR_INT32 ib (RemBindI8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1251)     packageProcedure' (IterateI8L8E iv bf) ib = packageIterateProcedure EXPR_INT8 EXPR_LIST8 ib (RemBindI8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1252)     packageProcedure' (IterateI8FloatE iv bf) ib = packageIterateProcedure EXPR_INT8 EXPR_FLOAT ib (RemBindI8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1253)     packageProcedure' (IterateI16UnitE iv bf) ib = packageIterateProcedure EXPR_INT16 EXPR_UNIT ib (RemBindI16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1254)     packageProcedure' (IterateI16BoolE iv bf) ib = packageIterateProcedure EXPR_INT16 EXPR_BOOL ib (RemBindI16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1255)     packageProcedure' (IterateI16W8E iv bf) ib = packageIterateProcedure EXPR_INT16 EXPR_WORD8 ib (RemBindI16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1256)     packageProcedure' (IterateI16W16E iv bf) ib = packageIterateProcedure EXPR_INT16 EXPR_WORD16 ib (RemBindI16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1257)     packageProcedure' (IterateI16W32E iv bf) ib = packageIterateProcedure EXPR_INT16 EXPR_WORD32 ib (RemBindI16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1258)     packageProcedure' (IterateI16I8E iv bf) ib = packageIterateProcedure EXPR_INT16 EXPR_INT8 ib (RemBindI16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1259)     packageProcedure' (IterateI16I16E iv bf) ib = packageIterateProcedure EXPR_INT16 EXPR_INT16 ib (RemBindI16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1260)     packageProcedure' (IterateI16I32E iv bf) ib = packageIterateProcedure EXPR_INT16 EXPR_INT32 ib (RemBindI16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1261)     packageProcedure' (IterateI16L8E iv bf) ib = packageIterateProcedure EXPR_INT16 EXPR_LIST8 ib (RemBindI16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1262)     packageProcedure' (IterateI16FloatE iv bf) ib = packageIterateProcedure EXPR_INT16 EXPR_FLOAT ib (RemBindI16 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1263)     packageProcedure' (IterateI32UnitE iv bf) ib = packageIterateProcedure EXPR_INT32 EXPR_UNIT ib (RemBindI32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1264)     packageProcedure' (IterateI32BoolE iv bf) ib = packageIterateProcedure EXPR_INT32 EXPR_BOOL ib (RemBindI32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1265)     packageProcedure' (IterateI32W8E iv bf) ib = packageIterateProcedure EXPR_INT32 EXPR_WORD8 ib (RemBindI32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1266)     packageProcedure' (IterateI32W16E iv bf) ib = packageIterateProcedure EXPR_INT32 EXPR_WORD16 ib (RemBindI32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1267)     packageProcedure' (IterateI32W32E iv bf) ib = packageIterateProcedure EXPR_INT32 EXPR_WORD32 ib (RemBindI32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1268)     packageProcedure' (IterateI32I8E iv bf) ib = packageIterateProcedure EXPR_INT32 EXPR_INT8 ib (RemBindI32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1269)     packageProcedure' (IterateI32I16E iv bf) ib = packageIterateProcedure EXPR_INT32 EXPR_INT16 ib (RemBindI32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1270)     packageProcedure' (IterateI32I32E iv bf) ib = packageIterateProcedure EXPR_INT32 EXPR_INT32 ib (RemBindI32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1271)     packageProcedure' (IterateI32L8E iv bf) ib = packageIterateProcedure EXPR_INT32 EXPR_LIST8 ib (RemBindI32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1272)     packageProcedure' (IterateI32FloatE iv bf) ib = packageIterateProcedure EXPR_INT32 EXPR_FLOAT ib (RemBindI32 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1273)     packageProcedure' (IterateL8UnitE iv bf) ib = packageIterateProcedure EXPR_LIST8 EXPR_UNIT ib (RemBindList8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1274)     packageProcedure' (IterateL8BoolE iv bf) ib = packageIterateProcedure EXPR_LIST8 EXPR_BOOL ib (RemBindList8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1275)     packageProcedure' (IterateL8W8E iv bf) ib = packageIterateProcedure EXPR_LIST8 EXPR_WORD8 ib (RemBindList8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1276)     packageProcedure' (IterateL8W16E iv bf) ib = packageIterateProcedure EXPR_LIST8 EXPR_WORD16 ib (RemBindList8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1277)     packageProcedure' (IterateL8W32E iv bf) ib = packageIterateProcedure EXPR_LIST8 EXPR_WORD32 ib (RemBindList8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1278)     packageProcedure' (IterateL8I8E iv bf) ib = packageIterateProcedure EXPR_LIST8 EXPR_INT8 ib (RemBindList8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1279)     packageProcedure' (IterateL8I16E iv bf) ib = packageIterateProcedure EXPR_LIST8 EXPR_INT16 ib (RemBindList8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1280)     packageProcedure' (IterateL8I32E iv bf) ib = packageIterateProcedure EXPR_LIST8 EXPR_INT32 ib (RemBindList8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1281)     packageProcedure' (IterateL8L8E iv bf) ib = packageIterateProcedure EXPR_LIST8 EXPR_LIST8 ib (RemBindList8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1282)     packageProcedure' (IterateL8FloatE iv bf) ib = packageIterateProcedure EXPR_LIST8 EXPR_FLOAT ib (RemBindList8 ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1283)     packageProcedure' (IterateFloatUnitE iv bf) ib = packageIterateProcedure EXPR_FLOAT EXPR_UNIT ib (RemBindFloat ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1284)     packageProcedure' (IterateFloatBoolE iv bf) ib = packageIterateProcedure EXPR_FLOAT EXPR_BOOL ib (RemBindFloat ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1285)     packageProcedure' (IterateFloatW8E iv bf) ib = packageIterateProcedure EXPR_FLOAT EXPR_WORD8 ib (RemBindFloat ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1286)     packageProcedure' (IterateFloatW16E iv bf) ib = packageIterateProcedure EXPR_FLOAT EXPR_WORD16 ib (RemBindFloat ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1287)     packageProcedure' (IterateFloatW32E iv bf) ib = packageIterateProcedure EXPR_FLOAT EXPR_WORD32 ib (RemBindFloat ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1288)     packageProcedure' (IterateFloatI8E iv bf) ib = packageIterateProcedure EXPR_FLOAT EXPR_INT8 ib (RemBindFloat ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1289)     packageProcedure' (IterateFloatI16E iv bf) ib = packageIterateProcedure EXPR_FLOAT EXPR_INT16 ib (RemBindFloat ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1290)     packageProcedure' (IterateFloatI32E iv bf) ib = packageIterateProcedure EXPR_FLOAT EXPR_INT32 ib (RemBindFloat ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1291)     packageProcedure' (IterateFloatL8E iv bf) ib = packageIterateProcedure EXPR_FLOAT EXPR_LIST8 ib (RemBindFloat ib) iv bf
2b0c74fe System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:11:41 -0500 1292)     packageProcedure' (IterateFloatFloatE iv bf) ib = packageIterateProcedure EXPR_FLOAT EXPR_FLOAT ib (RemBindFloat ib) iv bf
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1293)     packageProcedure' DebugListen ib = return B.empty
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1294) 
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1295) packageReadRefProcedure :: ExprType -> Int -> Int -> State CommandState B.ByteString
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1296) packageReadRefProcedure t ib i =
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1297)   addCommand REF_CMD_READ [toW8 t, fromIntegral ib, toW8 EXPR_WORD8, toW8 EXPR_LIT, fromIntegral i]
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1298) 
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1299) packageIfThenElseProcedure :: ExprType -> Int -> Expr Bool -> Arduino (Expr a) -> Arduino (Expr a) -> State CommandState B.ByteString
98ab25d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-17 19:02:22 -0600 1300) packageIfThenElseProcedure rt b e cb1 cb2 = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1301)     (r1, pc1) <- packageCodeBlock cb1
a035cb5a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-23 20:03:42 -0600 1302)     let rc1 = buildCommand EXPR_CMD_RET $ (fromIntegral b) : packageExpr r1
a035cb5a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-23 20:03:42 -0600 1303)     let pc1'  = B.append pc1 $ lenPackage rc1
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1304)     (r2, pc2) <- packageCodeBlock cb2
a035cb5a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-23 20:03:42 -0600 1305)     let rc2 = buildCommand EXPR_CMD_RET $ (fromIntegral b) : packageExpr r2
a035cb5a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-23 20:03:42 -0600 1306)     let pc2'  = B.append pc2 $ lenPackage rc2
823fcf0c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-19 21:05:20 -0600 1307)     let thenSize = word16ToBytes $ fromIntegral (B.length pc1')
e11388c9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 13:30:39 -0500 1308)     i <- addCommand BC_CMD_IF_THEN_ELSE ([fromIntegral $ fromEnum rt, fromIntegral $ fromEnum rt, fromIntegral b] ++ thenSize ++ (packageExpr e))
823fcf0c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-19 21:05:20 -0600 1309)     return $ B.append i (B.append pc1' pc2')
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1310) 
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1311) packageIfThenElseEitherProcedure :: (ExprB a, ExprB b) => ExprType -> ExprType -> Int -> Expr Bool -> Arduino (ExprEither a b) -> Arduino (ExprEither a b) -> State CommandState B.ByteString
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1312) packageIfThenElseEitherProcedure rt1 rt2 b e cb1 cb2 = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1313)     (r1, pc1) <- packageCodeBlock cb1
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1314)     let rc1 = buildCommand EXPR_CMD_RET $ (fromIntegral b) : packageExprEither rt1 rt2 r1
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1315)     let pc1'  = B.append pc1 $ lenPackage rc1
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1316)     (r2, pc2) <- packageCodeBlock cb2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1317)     let rc2 = buildCommand EXPR_CMD_RET $ (fromIntegral b) : packageExprEither rt1 rt2 r2
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1318)     let pc2'  = B.append pc2 $ lenPackage rc2
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1319)     let thenSize = word16ToBytes $ fromIntegral (B.length pc1')
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1320)     i <- addCommand BC_CMD_IF_THEN_ELSE ([fromIntegral $ fromEnum rt1, fromIntegral $ fromEnum rt2, fromIntegral b] ++ thenSize ++ (packageExpr e))
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1321)     return $ B.append i (B.append pc1' pc2')
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1322) 
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1323) packageIterateProcedure :: (ExprB a, ExprB b) => ExprType -> ExprType -> Int -> Expr a ->
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1324)                            Expr a -> (Expr a -> Arduino(ExprEither a b)) ->
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1325)                            State CommandState B.ByteString
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1326) packageIterateProcedure ta tb ib be iv bf = do
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1327)     (r, pc) <- packageCodeBlock $ bf be
08752c71 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 20:37:52 -0500 1328)     let rc = buildCommand EXPR_CMD_RET $ (fromIntegral ib) : packageExprEither ta tb r
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1329)     let pc'  = B.append pc $ lenPackage rc
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1330)     w <- addCommand BC_CMD_ITERATE ([fromIntegral $ fromEnum ta, fromIntegral $ fromEnum tb, fromIntegral ib, fromIntegral $ length ive] ++ ive)
08752c71 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 20:37:52 -0500 1331)     return $ B.append w pc'
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1332)   where
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1333)     ive = packageExpr iv
8b78f41f System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-21 21:46:23 -0600 1334) 
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1335) packageRemoteBinding' :: ExprType -> Expr a -> State CommandState B.ByteString
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1336) packageRemoteBinding' rt e = do
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1337)     s <- get
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1338)     addCommand REF_CMD_NEW ([fromIntegral $ fromEnum rt, fromIntegral (ib s), fromIntegral (ix s)] ++ (packageExpr e))
8a183fa5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-09-29 08:55:12 -0500 1339) 
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500 1340) packageRemoteBinding :: ArduinoPrimitive a -> State CommandState B.ByteString
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1341) packageRemoteBinding (NewRemoteRefBE e) =  packageRemoteBinding' EXPR_BOOL e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1342) packageRemoteBinding (NewRemoteRefW8E e) =  packageRemoteBinding' EXPR_WORD8 e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1343) packageRemoteBinding (NewRemoteRefW16E e) =  packageRemoteBinding' EXPR_WORD16 e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1344) packageRemoteBinding (NewRemoteRefW32E e) =  packageRemoteBinding' EXPR_WORD32 e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1345) packageRemoteBinding (NewRemoteRefI8E e) =  packageRemoteBinding' EXPR_INT8 e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1346) packageRemoteBinding (NewRemoteRefI16E e) =  packageRemoteBinding' EXPR_INT16 e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1347) packageRemoteBinding (NewRemoteRefI32E e) =  packageRemoteBinding' EXPR_INT32 e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1348) packageRemoteBinding (NewRemoteRefL8E e) =  packageRemoteBinding' EXPR_LIST8 e
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1349) packageRemoteBinding (NewRemoteRefFloatE e) =  packageRemoteBinding' EXPR_FLOAT e
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500 1350) packageRemoteBinding _ = error "packageRemoteBinding: Unsupported primitive"
307f13a3 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-11 20:56:09 -0500 1351) 
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1352) packageSubExpr :: [Word8] -> Expr a -> [Word8]
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1353) packageSubExpr ec e = ec ++ packageExpr e
e268ad49 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-23 16:23:45 -0500 1354) 
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1355) packageTwoSubExpr :: [Word8] -> Expr a -> Expr b -> [Word8]
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1356) packageTwoSubExpr ec e1 e2 = ec ++ (packageExpr e1) ++ (packageExpr e2)
e268ad49 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-23 16:23:45 -0500 1357) 
0727afa1 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-09 19:43:35 -0500 1358) packageThreeSubExpr :: [Word8] -> Expr a -> Expr b -> Expr c -> [Word8]
0727afa1 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-09 19:43:35 -0500 1359) packageThreeSubExpr ec e1 e2 e3 = ec ++ (packageExpr e1) ++ (packageExpr e2)  ++ (packageExpr e3)
0727afa1 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-09 19:43:35 -0500 1360) 
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1361) packageIfBSubExpr :: [Word8] -> Expr a -> Expr b -> Expr b -> [Word8]
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1362) packageIfBSubExpr ec e1 e2 e3 = ec ++ thenSize ++ elseSize ++ pcond ++ pthen ++ pelse
738b3cc6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-08-31 08:52:04 -0500 1363)   where
738b3cc6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-08-31 08:52:04 -0500 1364)     pcond = packageExpr e1
738b3cc6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-08-31 08:52:04 -0500 1365)     pthen = packageExpr e2
738b3cc6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-08-31 08:52:04 -0500 1366)     pelse = packageExpr e3
738b3cc6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-08-31 08:52:04 -0500 1367)     thenSize = word16ToBytes $ fromIntegral $ length pthen
119793b5 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-09-02 20:47:54 -0500 1368)     elseSize = word16ToBytes $ fromIntegral $ length pelse
e268ad49 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-23 16:23:45 -0500 1369) 
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1370) packageMathExpr :: ExprFloatOp -> Expr a -> [Word8]
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1371) packageMathExpr o e = (exprFCmdVal o) ++ (packageExpr e)
50167c7a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-30 17:41:48 -0600 1372) 
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1373) packageTwoMathExpr :: ExprFloatOp -> Expr a -> Expr b -> [Word8]
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1374) packageTwoMathExpr o e1 e2 = (exprFCmdVal o) ++ (packageExpr e1) ++ (packageExpr e2)
50167c7a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-30 17:41:48 -0600 1375) 
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1376) packageRef :: Int -> [Word8] -> [Word8]
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1377) packageRef n ec = ec ++ [fromIntegral n]
a2c19572 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-25 20:58:46 -0500 1378) 
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1379) packageExprEither :: (ExprB a, ExprB b) => ExprType -> ExprType -> ExprEither a b -> [Word8]
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1380) packageExprEither t1  _t2 (ExprLeft  el) = [toW8 t1, toW8 EXPR_LEFT] ++ packageExpr el
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1381) packageExprEither _t1 _t2 (ExprRight er) = packageExpr er
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1382) 
4cf5ec68 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-08-28 20:22:44 -0500 1383) packageExpr :: Expr a -> [Word8]
08752c71 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 20:37:52 -0500 1384) packageExpr (LitUnit) = [toW8 EXPR_UNIT, toW8 EXPR_LIT]
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1385) packageExpr (LitB b) = [toW8 EXPR_BOOL, toW8 EXPR_LIT, if b then 1 else 0]
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1386) packageExpr (ShowB e) = packageSubExpr (exprCmdVal EXPR_BOOL EXPR_SHOW) e
bc2df2a1 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-08-29 21:27:04 -0500 1387) packageExpr (RefB n) = packageRef n (exprCmdVal EXPR_BOOL EXPR_REF)
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1388) packageExpr (RemBindB b) = (exprCmdVal EXPR_BOOL EXPR_BIND) ++ [fromIntegral b]
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1389) packageExpr (NotB e) = packageSubExpr (exprCmdVal EXPR_BOOL EXPR_NOT) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1390) packageExpr (AndB e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_BOOL EXPR_AND) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1391) packageExpr (OrB e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_BOOL EXPR_OR) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1392) packageExpr (EqB e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_BOOL EXPR_EQ) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1393) packageExpr (LessB e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_BOOL EXPR_LESS) e1 e2
d2d622ff System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-12 20:54:58 -0600 1394) packageExpr (IfB e1 e2 e3) = packageIfBSubExpr (exprCmdVal EXPR_BOOL EXPR_IF) e1 e2 e3
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1395) packageExpr (EqW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_EQ) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1396) packageExpr (LessW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_LESS) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1397) packageExpr (EqW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_EQ) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1398) packageExpr (LessW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_LESS) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1399) packageExpr (EqW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_EQ) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1400) packageExpr (LessW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_LESS) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1401) packageExpr (EqI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_EQ) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1402) packageExpr (LessI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_LESS) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1403) packageExpr (EqI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_EQ) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1404) packageExpr (LessI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_LESS) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1405) packageExpr (EqI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_EQ) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1406) packageExpr (LessI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_LESS) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1407) packageExpr (EqL8 e1 e2) = packageTwoSubExpr (exprLCmdVal EXPRL_EQ) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1408) packageExpr (LessL8 e1 e2) = packageTwoSubExpr (exprLCmdVal EXPRL_LESS) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1409) packageExpr (EqFloat e1 e2) = packageTwoSubExpr (exprFCmdVal EXPRF_EQ) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1410) packageExpr (LessFloat e1 e2) = packageTwoSubExpr (exprFCmdVal EXPRF_LESS) e1 e2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1411) packageExpr (LitW8 w) = (exprCmdVal EXPR_WORD8 EXPR_LIT) ++ [w]
4a36b073 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-12-01 20:56:01 -0600 1412) packageExpr (ShowW8 e) = packageSubExpr (exprCmdVal EXPR_WORD8 EXPR_SHOW) e
5c01b069 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-01-05 20:08:52 -0600 1413) packageExpr (RefW8 n) = packageRef n (exprCmdVal EXPR_WORD8 EXPR_REF)
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1414) packageExpr (RemBindW8 b) = (exprCmdVal EXPR_WORD8 EXPR_BIND) ++ [fromIntegral b]
1759b6fb System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-25 19:58:26 -0600 1415) packageExpr (FromIntW8 e) = packageSubExpr (exprCmdVal EXPR_WORD8 EXPR_FINT) e
1759b6fb System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-25 19:58:26 -0600 1416) packageExpr (ToIntW8 e) = packageSubExpr (exprCmdVal EXPR_WORD8 EXPR_TINT) e
1759b6fb System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-25 19:58:26 -0600 1417) packageExpr (NegW8 e) = packageSubExpr (exprCmdVal EXPR_WORD8 EXPR_NEG) e
1759b6fb System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-25 19:58:26 -0600 1418) packageExpr (SignW8 e) = packageSubExpr (exprCmdVal EXPR_WORD8 EXPR_SIGN) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1419) packageExpr (AddW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_ADD) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1420) packageExpr (SubW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_SUB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1421) packageExpr (MultW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_MULT) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1422) packageExpr (DivW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_DIV) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1423) packageExpr (RemW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_REM) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1424) packageExpr (QuotW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_QUOT) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1425) packageExpr (ModW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_MOD) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1426) packageExpr (AndW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_AND) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1427) packageExpr (OrW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_OR) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1428) packageExpr (XorW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_XOR) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1429) packageExpr (CompW8 e) = packageSubExpr (exprCmdVal EXPR_WORD8 EXPR_COMP) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1430) packageExpr (ShfLW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_SHFL) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1431) packageExpr (ShfRW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_SHFR) e1 e2
1759b6fb System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-25 19:58:26 -0600 1432) packageExpr (IfW8 e1 e2 e3) = packageIfBSubExpr (exprCmdVal EXPR_WORD8 EXPR_IF) e1 e2 e3
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1433) packageExpr (TestBW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_TSTB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1434) packageExpr (SetBW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_SETB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1435) packageExpr (ClrBW8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD8 EXPR_CLRB) e1 e2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1436) packageExpr (LitW16 w) = (exprCmdVal EXPR_WORD16 EXPR_LIT) ++ word16ToBytes w
4a36b073 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-12-01 20:56:01 -0600 1437) packageExpr (ShowW16 e) = packageSubExpr (exprCmdVal EXPR_WORD16 EXPR_SHOW) e
5c01b069 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-01-05 20:08:52 -0600 1438) packageExpr (RefW16 n) = packageRef n (exprCmdVal EXPR_WORD16 EXPR_REF)
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1439) packageExpr (RemBindW16 b) = (exprCmdVal EXPR_WORD16 EXPR_BIND) ++ [fromIntegral b]
1759b6fb System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-25 19:58:26 -0600 1440) packageExpr (FromIntW16 e) = packageSubExpr (exprCmdVal EXPR_WORD16 EXPR_FINT) e
1759b6fb System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-25 19:58:26 -0600 1441) packageExpr (ToIntW16 e) = packageSubExpr (exprCmdVal EXPR_WORD16 EXPR_TINT) e
1759b6fb System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-25 19:58:26 -0600 1442) packageExpr (NegW16 e) = packageSubExpr (exprCmdVal EXPR_WORD16 EXPR_NEG) e
1759b6fb System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-25 19:58:26 -0600 1443) packageExpr (SignW16 e) = packageSubExpr (exprCmdVal EXPR_WORD16 EXPR_SIGN) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1444) packageExpr (AddW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_ADD) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1445) packageExpr (SubW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_SUB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1446) packageExpr (MultW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_MULT) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1447) packageExpr (DivW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_DIV) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1448) packageExpr (RemW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_REM) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1449) packageExpr (QuotW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_QUOT) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1450) packageExpr (ModW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_MOD) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1451) packageExpr (AndW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_AND) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1452) packageExpr (OrW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_OR) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1453) packageExpr (XorW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_XOR) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1454) packageExpr (CompW16 e) = packageSubExpr (exprCmdVal EXPR_WORD16 EXPR_COMP) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1455) packageExpr (ShfLW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_SHFL) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1456) packageExpr (ShfRW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_SHFR) e1 e2
1759b6fb System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-25 19:58:26 -0600 1457) packageExpr (IfW16 e1 e2 e3) = packageIfBSubExpr (exprCmdVal EXPR_WORD16 EXPR_IF) e1 e2 e3
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1458) packageExpr (TestBW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_TSTB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1459) packageExpr (SetBW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_SETB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1460) packageExpr (ClrBW16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD16 EXPR_CLRB) e1 e2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1461) packageExpr (LitW32 w) = (exprCmdVal EXPR_WORD32 EXPR_LIT) ++ word32ToBytes w
4a36b073 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-12-01 20:56:01 -0600 1462) packageExpr (ShowW32 e) = packageSubExpr (exprCmdVal EXPR_WORD32 EXPR_SHOW) e
5c01b069 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-01-05 20:08:52 -0600 1463) packageExpr (RefW32 n) = packageRef n (exprCmdVal EXPR_WORD32 EXPR_REF)
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1464) packageExpr (RemBindW32 b) = (exprCmdVal EXPR_WORD32 EXPR_BIND) ++ [fromIntegral b]
2e7e98c0 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-29 20:34:34 -0600 1465) packageExpr (FromIntW32 e) = packageSubExpr (exprCmdVal EXPR_WORD32 EXPR_FINT) e
2e7e98c0 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-29 20:34:34 -0600 1466) packageExpr (ToIntW32 e) = packageSubExpr (exprCmdVal EXPR_WORD32 EXPR_TINT) e
1759b6fb System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-25 19:58:26 -0600 1467) packageExpr (NegW32 e) = packageSubExpr (exprCmdVal EXPR_WORD32 EXPR_NEG) e
1759b6fb System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-25 19:58:26 -0600 1468) packageExpr (SignW32 e) = packageSubExpr (exprCmdVal EXPR_WORD32 EXPR_SIGN) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1469) packageExpr (AddW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_ADD) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1470) packageExpr (SubW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_SUB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1471) packageExpr (MultW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_MULT) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1472) packageExpr (DivW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_DIV) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1473) packageExpr (RemW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_REM) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1474) packageExpr (QuotW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_QUOT) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1475) packageExpr (ModW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_MOD) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1476) packageExpr (AndW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_AND) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1477) packageExpr (OrW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_OR) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1478) packageExpr (XorW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_XOR) e1 e2
1759b6fb System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-25 19:58:26 -0600 1479) packageExpr (CompW32 e) = packageSubExpr (exprCmdVal EXPR_WORD32 EXPR_COMP) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1480) packageExpr (ShfLW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_SHFL) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1481) packageExpr (ShfRW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_SHFR) e1 e2
1759b6fb System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-25 19:58:26 -0600 1482) packageExpr (IfW32 e1 e2 e3) = packageIfBSubExpr (exprCmdVal EXPR_WORD32 EXPR_IF) e1 e2 e3
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1483) packageExpr (TestBW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_TSTB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1484) packageExpr (SetBW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_SETB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1485) packageExpr (ClrBW32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_WORD32 EXPR_CLRB) e1 e2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1486) packageExpr (LitI8 w) = (exprCmdVal EXPR_INT8 EXPR_LIT) ++ [fromIntegral w]
4a36b073 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-12-01 20:56:01 -0600 1487) packageExpr (ShowI8 e) = packageSubExpr (exprCmdVal EXPR_INT8 EXPR_SHOW) e
5c01b069 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-01-05 20:08:52 -0600 1488) packageExpr (RefI8 n) = packageRef n (exprCmdVal EXPR_INT8 EXPR_REF)
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1489) packageExpr (RemBindI8 b) = (exprCmdVal EXPR_INT8 EXPR_BIND) ++ [fromIntegral b]
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1490) packageExpr (FromIntI8 e) = packageSubExpr (exprCmdVal EXPR_INT8 EXPR_FINT) e
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1491) packageExpr (ToIntI8 e) = packageSubExpr (exprCmdVal EXPR_INT8 EXPR_TINT) e
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1492) packageExpr (NegI8 e) = packageSubExpr (exprCmdVal EXPR_INT8 EXPR_NEG) e
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1493) packageExpr (SignI8 e) = packageSubExpr (exprCmdVal EXPR_INT8 EXPR_SIGN) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1494) packageExpr (AddI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_ADD) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1495) packageExpr (SubI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_SUB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1496) packageExpr (MultI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_MULT) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1497) packageExpr (DivI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_DIV) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1498) packageExpr (RemI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_REM) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1499) packageExpr (QuotI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_QUOT) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1500) packageExpr (ModI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_MOD) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1501) packageExpr (AndI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_AND) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1502) packageExpr (OrI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_OR) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1503) packageExpr (XorI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_XOR) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1504) packageExpr (CompI8 e) = packageSubExpr (exprCmdVal EXPR_INT8 EXPR_COMP) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1505) packageExpr (ShfLI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_SHFL) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1506) packageExpr (ShfRI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_SHFR) e1 e2
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1507) packageExpr (IfI8 e1 e2 e3) = packageIfBSubExpr (exprCmdVal EXPR_INT8 EXPR_IF) e1 e2 e3
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1508) packageExpr (TestBI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_TSTB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1509) packageExpr (SetBI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_SETB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1510) packageExpr (ClrBI8 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT8 EXPR_CLRB) e1 e2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1511) packageExpr (LitI16 w) = (exprCmdVal EXPR_INT16 EXPR_LIT) ++ word16ToBytes (fromIntegral w)
4a36b073 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-12-01 20:56:01 -0600 1512) packageExpr (ShowI16 e) = packageSubExpr (exprCmdVal EXPR_INT16 EXPR_SHOW) e
5c01b069 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-01-05 20:08:52 -0600 1513) packageExpr (RefI16 n) = packageRef n (exprCmdVal EXPR_INT16 EXPR_REF)
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1514) packageExpr (RemBindI16 b) = (exprCmdVal EXPR_INT16 EXPR_BIND) ++ [fromIntegral b]
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1515) packageExpr (FromIntI16 e) = packageSubExpr (exprCmdVal EXPR_INT16 EXPR_FINT) e
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1516) packageExpr (ToIntI16 e) = packageSubExpr (exprCmdVal EXPR_INT16 EXPR_TINT) e
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1517) packageExpr (NegI16 e) = packageSubExpr (exprCmdVal EXPR_INT16 EXPR_NEG) e
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1518) packageExpr (SignI16 e) = packageSubExpr (exprCmdVal EXPR_INT16 EXPR_SIGN) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1519) packageExpr (AddI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_ADD) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1520) packageExpr (SubI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_SUB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1521) packageExpr (MultI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_MULT) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1522) packageExpr (DivI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_DIV) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1523) packageExpr (RemI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_REM) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1524) packageExpr (QuotI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_QUOT) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1525) packageExpr (ModI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_MOD) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1526) packageExpr (AndI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_AND) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1527) packageExpr (OrI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_OR) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1528) packageExpr (XorI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_XOR) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1529) packageExpr (CompI16 e) = packageSubExpr (exprCmdVal EXPR_INT16 EXPR_COMP) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1530) packageExpr (ShfLI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_SHFL) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1531) packageExpr (ShfRI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_SHFR) e1 e2
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1532) packageExpr (IfI16 e1 e2 e3) = packageIfBSubExpr (exprCmdVal EXPR_INT16 EXPR_IF) e1 e2 e3
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1533) packageExpr (TestBI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_TSTB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1534) packageExpr (SetBI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_SETB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1535) packageExpr (ClrBI16 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT16 EXPR_CLRB) e1 e2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1536) packageExpr (LitI32 w) = (exprCmdVal EXPR_INT32 EXPR_LIT) ++ word32ToBytes (fromIntegral w)
4a36b073 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-12-01 20:56:01 -0600 1537) packageExpr (ShowI32 e) = packageSubExpr (exprCmdVal EXPR_INT32 EXPR_SHOW) e
5c01b069 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-01-05 20:08:52 -0600 1538) packageExpr (RefI32 n) = packageRef n (exprCmdVal EXPR_INT32 EXPR_REF)
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1539) packageExpr (RemBindI32 b) = (exprCmdVal EXPR_INT32 EXPR_BIND) ++ [fromIntegral b]
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1540) packageExpr (NegI32 e) = packageSubExpr (exprCmdVal EXPR_INT32 EXPR_NEG) e
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1541) packageExpr (SignI32 e) = packageSubExpr (exprCmdVal EXPR_INT32 EXPR_SIGN) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1542) packageExpr (AddI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_ADD) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1543) packageExpr (SubI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_SUB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1544) packageExpr (MultI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_MULT) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1545) packageExpr (DivI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_DIV) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1546) packageExpr (RemI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_REM) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1547) packageExpr (QuotI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_QUOT) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1548) packageExpr (ModI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_MOD) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1549) packageExpr (AndI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_AND) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1550) packageExpr (OrI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_OR) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1551) packageExpr (XorI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_XOR) e1 e2
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1552) packageExpr (CompI32 e) = packageSubExpr (exprCmdVal EXPR_INT32 EXPR_COMP) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1553) packageExpr (ShfLI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_SHFL) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1554) packageExpr (ShfRI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_SHFR) e1 e2
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1555) packageExpr (IfI32 e1 e2 e3) = packageIfBSubExpr (exprCmdVal EXPR_INT32 EXPR_IF) e1 e2 e3
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1556) packageExpr (TestBI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_TSTB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1557) packageExpr (SetBI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_SETB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1558) packageExpr (ClrBI32 e1 e2) = packageTwoSubExpr (exprCmdVal EXPR_INT32 EXPR_CLRB) e1 e2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1559) packageExpr (LitList8 ws) = (exprLCmdVal EXPRL_LIT) ++ [fromIntegral $ length ws] ++ ws
42faae6a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-28 20:05:05 -0600 1560) packageExpr (RefList8 n) = packageRef n (exprLCmdVal EXPRL_REF)
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1561) packageExpr (RemBindList8 b) = (exprLCmdVal EXPRL_BIND) ++ [fromIntegral b]
42faae6a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-28 20:05:05 -0600 1562) packageExpr (IfL8 e1 e2 e3) = packageIfBSubExpr (exprLCmdVal EXPRL_IF) e1 e2 e3
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1563) packageExpr (ElemList8 e1 e2) = packageTwoSubExpr (exprLCmdVal EXPRL_ELEM) e1 e2
42faae6a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-28 20:05:05 -0600 1564) packageExpr (LenList8 e) = packageSubExpr (exprLCmdVal EXPRL_LEN) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1565) packageExpr (ConsList8 e1 e2) = packageTwoSubExpr (exprLCmdVal EXPRL_CONS) e1 e2
42faae6a System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-28 20:05:05 -0600 1566) packageExpr (ApndList8 e1 e2) = packageTwoSubExpr (exprLCmdVal EXPRL_APND) e1 e2
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1567) packageExpr (PackList8 es) = (exprLCmdVal EXPRL_PACK) ++ [fromIntegral $ length es] ++ (foldl (++) [] (map packageExpr es))
0727afa1 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-09 19:43:35 -0500 1568) packageExpr (SliceList8 e1 e2 e3) = packageThreeSubExpr (exprLCmdVal EXPRL_SLIC) e1 e2 e3
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1569) packageExpr (LitFloat f) = (exprFCmdVal EXPRF_LIT) ++ floatToBytes f
eab41156 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-12-02 18:09:45 -0600 1570) packageExpr (ShowFloat e1 e2) = packageTwoSubExpr (exprFCmdVal EXPRF_SHOW) e1 e2
643c903e System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-29 19:20:56 -0600 1571) packageExpr (RefFloat n) = packageRef n (exprFCmdVal EXPRF_REF)
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1572) packageExpr (RemBindFloat b) = (exprFCmdVal EXPRF_BIND) ++ [fromIntegral b]
643c903e System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-29 19:20:56 -0600 1573) packageExpr (FromIntFloat e) = packageSubExpr (exprFCmdVal EXPRF_FINT) e
643c903e System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-29 19:20:56 -0600 1574) packageExpr (NegFloat e) = packageSubExpr (exprFCmdVal EXPRF_NEG) e
643c903e System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-29 19:20:56 -0600 1575) packageExpr (SignFloat e) = packageSubExpr (exprFCmdVal EXPRF_SIGN) e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1576) packageExpr (AddFloat e1 e2) = packageTwoSubExpr (exprFCmdVal EXPRF_ADD) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1577) packageExpr (SubFloat e1 e2) = packageTwoSubExpr (exprFCmdVal EXPRF_SUB) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1578) packageExpr (MultFloat e1 e2) = packageTwoSubExpr (exprFCmdVal EXPRF_MULT) e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1579) packageExpr (DivFloat e1 e2) = packageTwoSubExpr (exprFCmdVal EXPRF_DIV) e1 e2
643c903e System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-29 19:20:56 -0600 1580) packageExpr (IfFloat e1 e2 e3) = packageIfBSubExpr (exprFCmdVal EXPRF_IF) e1 e2 e3
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1581) packageExpr (TruncFloat e) = packageMathExpr EXPRF_TRUNC e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1582) packageExpr (FracFloat e) = packageMathExpr EXPRF_FRAC e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1583) packageExpr (RoundFloat e) = packageMathExpr EXPRF_ROUND e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1584) packageExpr (CeilFloat e) = packageMathExpr EXPRF_CEIL e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1585) packageExpr (FloorFloat e) = packageMathExpr EXPRF_FLOOR e
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1586) packageExpr PiFloat = exprFCmdVal EXPRF_PI
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1587) packageExpr (ExpFloat e) = packageMathExpr EXPRF_EXP e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1588) packageExpr (LogFloat e) = packageMathExpr EXPRF_LOG e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1589) packageExpr (SqrtFloat e) = packageMathExpr EXPRF_SQRT e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1590) packageExpr (SinFloat e) = packageMathExpr EXPRF_SIN e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1591) packageExpr (CosFloat e) = packageMathExpr EXPRF_COS e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1592) packageExpr (TanFloat e) = packageMathExpr EXPRF_TAN e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1593) packageExpr (AsinFloat e) = packageMathExpr EXPRF_ASIN e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1594) packageExpr (AcosFloat e) = packageMathExpr EXPRF_ACOS e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1595) packageExpr (AtanFloat e) = packageMathExpr EXPRF_ATAN e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1596) packageExpr (Atan2Float e1 e2) = packageTwoMathExpr EXPRF_ATAN2 e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1597) packageExpr (SinhFloat e) = packageMathExpr EXPRF_SINH e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1598) packageExpr (CoshFloat e) = packageMathExpr EXPRF_COSH e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1599) packageExpr (TanhFloat e) = packageMathExpr EXPRF_TANH e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1600) packageExpr (PowerFloat e1 e2) = packageTwoMathExpr EXPRF_POWER e1 e2
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1601) packageExpr (IsNaNFloat e) = packageMathExpr EXPRF_ISNAN e
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1602) packageExpr (IsInfFloat e) = packageMathExpr EXPRF_ISINF e
a2d278a0 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-23 21:15:30 -0500 1603) 
1f5a78d6 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-08-27 13:52:38 -0500 1604) -- | Unpackage a Haskino Firmware response
307f13a3 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-11 20:56:09 -0500 1605) unpackageResponse :: [Word8] -> Response
307f13a3 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-11 20:56:09 -0500 1606) unpackageResponse [] = Unimplemented (Just "<EMPTY-REPLY>") []
307f13a3 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-11 20:56:09 -0500 1607) unpackageResponse (cmdWord:args)
307f13a3 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-11 20:56:09 -0500 1608)   | Right cmd <- getFirmwareReply cmdWord
cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500 1609)   = case (cmd, args) of
f73085c1 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-09-24 19:43:07 -0500 1610)       (BC_RESP_DELAY, [])               -> DelayResp
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1611)       (BC_RESP_IF_THEN_ELSE , [t,l,b]) | t == toW8 EXPR_BOOL && l == toW8 EXPR_LIT
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1612)                                       -> IfThenElseBoolReply (if b == 0 then False else True)
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1613)       (BC_RESP_IF_THEN_ELSE , [t,l,b]) | t == toW8 EXPR_WORD8 && l == toW8 EXPR_LIT
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1614)                                       -> IfThenElseW8Reply b
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1615)       (BC_RESP_IF_THEN_ELSE , [t,l,b1,b2]) | t == toW8 EXPR_WORD16 && l == toW8 EXPR_LIT
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1616)                                       -> IfThenElseW16Reply (bytesToWord16 (b1, b2))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1617)       (BC_RESP_IF_THEN_ELSE , [t,l,b1,b2,b3,b4]) | t == toW8 EXPR_WORD32 && l == toW8 EXPR_LIT
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1618)                                       -> IfThenElseW32Reply (bytesToWord32 (b1, b2, b3, b4))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1619)       (BC_RESP_IF_THEN_ELSE , [t,l,b]) | t == toW8 EXPR_INT8 && l == toW8 EXPR_LIT
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1620)                                       -> IfThenElseI8Reply $ fromIntegral b
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1621)       (BC_RESP_IF_THEN_ELSE , [t,l,b1,b2]) | t == toW8 EXPR_INT16 && l == toW8 EXPR_LIT
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1622)                                       -> IfThenElseI16Reply $ fromIntegral (bytesToWord16 (b1, b2))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1623)       (BC_RESP_IF_THEN_ELSE , [t,l,b1,b2,b3,b4]) | t == toW8 EXPR_INT32 && l == toW8 EXPR_LIT
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1624)                                       -> IfThenElseI32Reply $ fromIntegral (bytesToWord32 (b1, b2, b3, b4))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1625)       (BC_RESP_IF_THEN_ELSE , t:l:_:bs) | t == toW8 EXPR_LIST8 && l == toW8 EXPR_LIT
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1626)                                       -> IfThenElseL8Reply bs
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1627)       (BC_RESP_IF_THEN_ELSE , [t,l,b1,b2,b3,b4]) | t == toW8 EXPR_FLOAT && l == toW8 EXPR_LIT
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1628)                                       -> IfThenElseFloatReply $ bytesToFloat (b1, b2, b3, b4)
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1629)       (BC_RESP_IF_THEN_ELSE , [t,l,b]) | t == (toW8 EXPR_BOOL  + 0x80) && l == toW8 EXPR_LIT
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1630)                                       -> IfThenElseBoolLeftReply (if b == 0 then False else True)
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1631)       (BC_RESP_IF_THEN_ELSE , [t,l,b]) | t == (toW8 EXPR_WORD8 + 0x80) && l == toW8 EXPR_LIT
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1632)                                       -> IfThenElseW8LeftReply b
08752c71 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 20:37:52 -0500 1633)       (BC_RESP_ITERATE , [t,l]) | t == toW8 EXPR_UNIT && l == toW8 EXPR_LIT
08752c71 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 20:37:52 -0500 1634)                                       -> IterateUnitReply
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1635)       (BC_RESP_ITERATE , [t,l,b]) | t == toW8 EXPR_BOOL && l == toW8 EXPR_LIT
4d8e4724 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:23:59 -0500 1636)                                       -> IterateBoolReply (if b == 0 then False else True)
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1637)       (BC_RESP_ITERATE , [t,l,b]) | t == toW8 EXPR_WORD8 && l == toW8 EXPR_LIT
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1638)                                       -> IterateW8Reply b
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1639)       (BS_RESP_DEBUG, [])                    -> DebugResp
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1640)       (BS_RESP_VERSION, [majV, minV])        -> Firmware (bytesToWord16 (majV,minV))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1641)       (BS_RESP_TYPE, [p])                    -> ProcessorType p
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1642)       (BS_RESP_MICROS, [m0,m1,m2,m3])        -> MicrosReply (bytesToWord32 (m0,m1,m2,m3))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1643)       (BS_RESP_MILLIS, [m0,m1,m2,m3])        -> MillisReply (bytesToWord32 (m0,m1,m2,m3))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1644)       (BS_RESP_STRING, rest)                 -> StringMessage (getString rest)
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1645)       (DIG_RESP_READ_PIN, [_t,_l,b])         -> DigitalReply b
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1646)       (DIG_RESP_READ_PORT, [_t,_l,b])        -> DigitalPortReply b
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1647)       (ALG_RESP_READ_PIN, [_t,_l,bl,bh])     -> AnalogReply (bytesToWord16 (bl,bh))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1648)       (I2C_RESP_READ, _:_:_:xs)              -> I2CReply xs
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1649)       (STEP_RESP_2PIN, [_t,_l,st])           -> Stepper2PinReply st
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1650)       (STEP_RESP_4PIN, [_t,_l,st])           -> Stepper4PinReply st
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1651)       (STEP_RESP_STEP, [])                   -> StepperStepReply
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1652)       (SRVO_RESP_ATTACH, [_t,_l,sv])         -> ServoAttachReply sv
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1653)       (SRVO_RESP_READ, [_t,_l,il,ih])        -> ServoReadReply (fromIntegral (bytesToWord16 (il,ih)))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1654)       (SRVO_RESP_READ_MICROS, [_t,_l,il,ih]) -> ServoReadMicrosReply (fromIntegral (bytesToWord16 (il,ih)))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1655)       (SCHED_RESP_BOOT, [_t,_l,b])           -> BootTaskResp b
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1656)       (SCHED_RESP_QUERY_ALL, _:_:_:ts)       -> QueryAllTasksReply ts
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1657)       (SCHED_RESP_QUERY, ts) | length ts == 0 ->
4c93d884 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-13 13:30:41 -0500 1658)           QueryTaskReply Nothing
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1659)       (SCHED_RESP_QUERY, ts) | length ts >= 9 ->
9561ce9b System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-15 20:20:25 -0500 1660)           let ts0:ts1:tl0:tl1:tp0:tp1:tt0:tt1:tt2:tt3:rest = ts
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1661)           in QueryTaskReply (Just (bytesToWord16 (ts0,ts1),
9561ce9b System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-15 20:20:25 -0500 1662)                                    bytesToWord16 (tl0,tl1),
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1663)                                    bytesToWord16 (tp0,tp1),
07f95f36 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 06:43:36 -0500 1664)                                    bytesToWord32 (tt0,tt1,tt2,tt3)))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1665)       (REF_RESP_READ , [t,l,b]) | t == toW8 EXPR_BOOL && l == toW8 EXPR_LIT
4829d169 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-10-09 20:33:44 -0500 1666)                                       -> ReadRefBReply (if b == 0 then False else True)
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1667)       (REF_RESP_READ , [t,l,b]) | t == toW8 EXPR_WORD8 && l == toW8 EXPR_LIT
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1668)                                       -> ReadRefW8Reply b
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1669)       (REF_RESP_READ , [t,l,b1,b2]) | t == toW8 EXPR_WORD16 && l == toW8 EXPR_LIT
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1670)                                       -> ReadRefW16Reply (bytesToWord16 (b1, b2))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1671)       (REF_RESP_READ , [t,l,b1,b2,b3,b4]) | t == toW8 EXPR_WORD32 && l == toW8 EXPR_LIT
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1672)                                       -> ReadRefW32Reply (bytesToWord32 (b1, b2, b3, b4))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1673)       (REF_RESP_READ , [t,l,b]) | t == toW8 EXPR_INT8 && l == toW8 EXPR_LIT
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1674)                                       -> ReadRefI8Reply $ fromIntegral b
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1675)       (REF_RESP_READ , [t,l,b1,b2]) | t == toW8 EXPR_INT16 && l == toW8 EXPR_LIT
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1676)                                       -> ReadRefI16Reply $ fromIntegral (bytesToWord16 (b1, b2))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1677)       (REF_RESP_READ , [t,l,b1,b2,b3,b4]) | t == toW8 EXPR_INT32 && l == toW8 EXPR_LIT
017f19db System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-26 08:43:11 -0600 1678)                                       -> ReadRefI32Reply $ fromIntegral (bytesToWord32 (b1, b2, b3, b4))
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1679)       (REF_RESP_READ , t:l:_:bs) | t == toW8 EXPR_LIST8 && l == toW8 EXPR_LIT
9c51cd7e System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-10-15 19:22:44 -0500 1680)                                       -> ReadRefL8Reply bs
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1681)       (REF_RESP_READ , [t,l,b1,b2,b3,b4]) | t == toW8 EXPR_FLOAT && l == toW8 EXPR_LIT
643c903e System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-11-29 19:20:56 -0600 1682)                                       -> ReadRefFloatReply $ bytesToFloat (b1, b2, b3, b4)
5f1fb5b9 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-22 16:10:03 -0500 1683)       (REF_RESP_NEW , [_t,_l,w])      -> NewReply w
b30859ee System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2015-09-02 19:36:07 -0500 1684)       (REF_RESP_NEW , [])             -> FailedNewRef
307f13a3 System/Hardware/KansasAmber/Protocol.hs (Mark Grebe 2015-08-11 20:56:09 -0500 1685)       _                               -> Unimplemented (Just (show cmd)) args
cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500 1686)   | True
cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500 1687)   = Unimplemented Nothing (cmdWord : args)
cf8aa0e8 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-05-27 20:55:29 -0500 1688) 
e61a9903 System/Hardware/DeepArduino/Protocol.hs (Mark Grebe 2015-06-12 14:54:34 -0500 1689) -- This is how we match responses with queries
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500 1690) parseQueryResult :: ArduinoPrimitive a -> Response -> Maybe a
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1691) parseQueryResult QueryFirmware (Firmware v) = Just v
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1692) parseQueryResult QueryFirmwareE (Firmware v) = Just (lit v)
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1693) parseQueryResult QueryProcessor (ProcessorType pt) = Just $ toEnum $ fromIntegral pt
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1694) parseQueryResult QueryProcessorE (ProcessorType pt) = Just $ (lit pt)
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1695) parseQueryResult Micros (MicrosReply m) = Just m
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1696) parseQueryResult MicrosE (MicrosReply m) = Just (lit m)
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1697) parseQueryResult Millis (MillisReply m) = Just m
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1698) parseQueryResult MillisE (MillisReply m) = Just (lit m)
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1699) parseQueryResult (DelayMicros _) DelayResp = Just ()
195dea55 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 17:21:56 -0500 1700) parseQueryResult (DelayMicrosE _) DelayResp = Just LitUnit
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1701) parseQueryResult (DelayMillis _) DelayResp = Just ()
195dea55 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-04 17:21:56 -0500 1702) parseQueryResult (DelayMillisE _) DelayResp = Just LitUnit
a0c70216 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-04-01 15:42:44 -0500 1703) parseQueryResult (DebugE _) DebugResp = Just ()
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1704) parseQueryResult (DigitalRead _) (DigitalReply d) = Just (if d == 0 then False else True)
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1705) parseQueryResult (DigitalReadE _) (DigitalReply d) = Just (if d == 0 then lit False else lit True)
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1706) parseQueryResult (DigitalPortRead _ _) (DigitalPortReply d) = Just d
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1707) parseQueryResult (DigitalPortReadE _ _) (DigitalPortReply d) = Just (lit d)
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1708) parseQueryResult (AnalogRead _) (AnalogReply a) = Just a
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1709) parseQueryResult (AnalogReadE _) (AnalogReply a) = Just (lit a)
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1710) parseQueryResult (I2CRead _ _) (I2CReply ds) = Just ds
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1711) parseQueryResult (I2CReadE _ _) (I2CReply ds) = Just (lit ds)
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1712) parseQueryResult (Stepper2Pin _ _ _) (Stepper2PinReply st) = Just st
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1713) parseQueryResult (Stepper2PinE _ _ _) (Stepper2PinReply st) = Just (lit st)
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1714) parseQueryResult (Stepper4Pin _ _ _ _ _) (Stepper4PinReply st) = Just st
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1715) parseQueryResult (Stepper4PinE _ _ _ _ _) (Stepper4PinReply st) = Just (lit st)
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1716) parseQueryResult (StepperStepE _ _) StepperStepReply = Just ()
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1717) parseQueryResult QueryAllTasks (QueryAllTasksReply ts) = Just ts
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1718) parseQueryResult QueryAllTasksE (QueryAllTasksReply ts) = Just (lit ts)
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1719) parseQueryResult (QueryTask _) (QueryTaskReply tr) = Just tr
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1720) parseQueryResult (QueryTaskE _) (QueryTaskReply tr) = Just tr
29204105 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2016-02-22 20:56:54 -0600 1721) parseQueryResult (BootTaskE _) (BootTaskResp b) = Just (if b == 0 then lit False else lit True)
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1722) parseQueryResult (NewRemoteRefBE _) (NewReply r) = Just $ RemoteRefB $ fromIntegral r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1723) parseQueryResult (NewRemoteRefW8E _) (NewReply r) = Just $ RemoteRefW8 $ fromIntegral r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1724) parseQueryResult (NewRemoteRefW16E _) (NewReply r) = Just $ RemoteRefW16 $ fromIntegral r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1725) parseQueryResult (NewRemoteRefW32E _) (NewReply r) = Just $ RemoteRefW32 $ fromIntegral r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1726) parseQueryResult (NewRemoteRefI8E _) (NewReply r) = Just $ RemoteRefI8 $ fromIntegral r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1727) parseQueryResult (NewRemoteRefI16E _) (NewReply r) = Just $ RemoteRefI16 $ fromIntegral r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1728) parseQueryResult (NewRemoteRefI32E _) (NewReply r) = Just $ RemoteRefI32 $ fromIntegral r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1729) parseQueryResult (NewRemoteRefL8E _) (NewReply r) = Just $ RemoteRefL8 $ fromIntegral r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1730) parseQueryResult (NewRemoteRefFloatE _) (NewReply r) = Just $ RemoteRefFloat$ fromIntegral r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1731) parseQueryResult (ReadRemoteRefBE _) (ReadRefBReply r) = Just $ lit r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1732) parseQueryResult (ReadRemoteRefW8E _) (ReadRefW8Reply r) = Just $ lit r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1733) parseQueryResult (ReadRemoteRefW16E _) (ReadRefW16Reply r) = Just $ lit r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1734) parseQueryResult (ReadRemoteRefW32E _) (ReadRefW32Reply r) = Just $ lit r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1735) parseQueryResult (ReadRemoteRefI8E _) (ReadRefI8Reply r) = Just $ lit r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1736) parseQueryResult (ReadRemoteRefI16E _) (ReadRefI16Reply r) = Just $ lit r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1737) parseQueryResult (ReadRemoteRefI32E _) (ReadRefI32Reply r) = Just $ lit r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1738) parseQueryResult (ReadRemoteRefL8E _) (ReadRefL8Reply r) = Just $ lit r
48de97ec System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-08-06 11:00:19 -0500 1739) parseQueryResult (ReadRemoteRefFloatE _) (ReadRefFloatReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1740) parseQueryResult (IfThenElseBoolE _ _ _) (IfThenElseBoolReply r) = Just $ lit r
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1741) parseQueryResult (IfThenElseWord8E _ _ _) (IfThenElseW8Reply r) = Just $ lit r
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1742) parseQueryResult (IfThenElseWord16E _ _ _) (IfThenElseW16Reply r) = Just $ lit r
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1743) parseQueryResult (IfThenElseWord32E _ _ _) (IfThenElseW32Reply r) = Just $ lit r
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1744) parseQueryResult (IfThenElseInt8E _ _ _) (IfThenElseI8Reply r) = Just $ lit r
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1745) parseQueryResult (IfThenElseInt16E _ _ _) (IfThenElseI16Reply r) = Just $ lit r
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1746) parseQueryResult (IfThenElseInt32E _ _ _) (IfThenElseI32Reply r) = Just $ lit r
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1747) parseQueryResult (IfThenElseL8E _ _ _) (IfThenElseL8Reply r) = Just $ lit r
02836fc3 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-01-22 21:04:12 -0600 1748) parseQueryResult (IfThenElseFloatE _ _ _) (IfThenElseFloatReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1749) parseQueryResult (IfThenElseUnitUnit _ _ _) (IfThenElseUnitReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1750) parseQueryResult (IfThenElseUnitUnit _ _ _) (IfThenElseUnitLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1751) parseQueryResult (IfThenElseUnitBool _ _ _) (IfThenElseBoolReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1752) parseQueryResult (IfThenElseUnitBool _ _ _) (IfThenElseUnitLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1753) parseQueryResult (IfThenElseUnitW8 _ _ _) (IfThenElseW8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1754) parseQueryResult (IfThenElseUnitW8 _ _ _) (IfThenElseUnitLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1755) parseQueryResult (IfThenElseUnitW16 _ _ _) (IfThenElseW16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1756) parseQueryResult (IfThenElseUnitW16 _ _ _) (IfThenElseUnitLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1757) parseQueryResult (IfThenElseUnitW32 _ _ _) (IfThenElseW32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1758) parseQueryResult (IfThenElseUnitW32 _ _ _) (IfThenElseUnitLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1759) parseQueryResult (IfThenElseUnitI8 _ _ _) (IfThenElseI8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1760) parseQueryResult (IfThenElseUnitI8 _ _ _) (IfThenElseUnitLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1761) parseQueryResult (IfThenElseUnitI16 _ _ _) (IfThenElseI16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1762) parseQueryResult (IfThenElseUnitI16 _ _ _) (IfThenElseUnitLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1763) parseQueryResult (IfThenElseUnitI32 _ _ _) (IfThenElseI32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1764) parseQueryResult (IfThenElseUnitI32 _ _ _) (IfThenElseUnitLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1765) parseQueryResult (IfThenElseUnitL8 _ _ _) (IfThenElseL8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1766) parseQueryResult (IfThenElseUnitL8 _ _ _) (IfThenElseUnitLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1767) parseQueryResult (IfThenElseUnitFloat _ _ _) (IfThenElseFloatReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1768) parseQueryResult (IfThenElseUnitFloat _ _ _) (IfThenElseUnitLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1769) parseQueryResult (IfThenElseBoolUnit _ _ _) (IfThenElseUnitReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1770) parseQueryResult (IfThenElseBoolUnit _ _ _) (IfThenElseBoolLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1771) parseQueryResult (IfThenElseBoolBool _ _ _) (IfThenElseBoolReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1772) parseQueryResult (IfThenElseBoolBool _ _ _) (IfThenElseBoolLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1773) parseQueryResult (IfThenElseBoolW8 _ _ _) (IfThenElseW8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1774) parseQueryResult (IfThenElseBoolW8 _ _ _) (IfThenElseBoolLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1775) parseQueryResult (IfThenElseBoolW16 _ _ _) (IfThenElseW16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1776) parseQueryResult (IfThenElseBoolW16 _ _ _) (IfThenElseBoolLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1777) parseQueryResult (IfThenElseBoolW32 _ _ _) (IfThenElseW32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1778) parseQueryResult (IfThenElseBoolW32 _ _ _) (IfThenElseBoolLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1779) parseQueryResult (IfThenElseBoolI8 _ _ _) (IfThenElseI8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1780) parseQueryResult (IfThenElseBoolI8 _ _ _) (IfThenElseBoolLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1781) parseQueryResult (IfThenElseBoolI16 _ _ _) (IfThenElseI16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1782) parseQueryResult (IfThenElseBoolI16 _ _ _) (IfThenElseBoolLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1783) parseQueryResult (IfThenElseBoolI32 _ _ _) (IfThenElseI32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1784) parseQueryResult (IfThenElseBoolI32 _ _ _) (IfThenElseBoolLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1785) parseQueryResult (IfThenElseBoolL8 _ _ _) (IfThenElseL8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1786) parseQueryResult (IfThenElseBoolL8 _ _ _) (IfThenElseBoolLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1787) parseQueryResult (IfThenElseBoolFloat _ _ _) (IfThenElseFloatReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1788) parseQueryResult (IfThenElseBoolFloat _ _ _) (IfThenElseBoolLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1789) parseQueryResult (IfThenElseW8Unit _ _ _) (IfThenElseUnitReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1790) parseQueryResult (IfThenElseW8Unit _ _ _) (IfThenElseW8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1791) parseQueryResult (IfThenElseW8Bool _ _ _) (IfThenElseBoolReply r) = Just $ ExprRight $ lit r
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1792) parseQueryResult (IfThenElseW8Bool _ _ _) (IfThenElseW8LeftReply r) = Just $ ExprLeft $ lit r
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1793) parseQueryResult (IfThenElseW8W8 _ _ _) (IfThenElseW8Reply r) = Just $ ExprRight $ lit r
2f74f396 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-23 17:30:39 -0500 1794) parseQueryResult (IfThenElseW8W8 _ _ _) (IfThenElseW8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1795) parseQueryResult (IfThenElseW8W16 _ _ _) (IfThenElseW16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1796) parseQueryResult (IfThenElseW8W16 _ _ _) (IfThenElseW8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1797) parseQueryResult (IfThenElseW8W32 _ _ _) (IfThenElseW32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1798) parseQueryResult (IfThenElseW8W32 _ _ _) (IfThenElseW8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1799) parseQueryResult (IfThenElseW8I8 _ _ _) (IfThenElseI8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1800) parseQueryResult (IfThenElseW8I8 _ _ _) (IfThenElseW8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1801) parseQueryResult (IfThenElseW8I16 _ _ _) (IfThenElseI16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1802) parseQueryResult (IfThenElseW8I16 _ _ _) (IfThenElseW8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1803) parseQueryResult (IfThenElseW8I32 _ _ _) (IfThenElseI32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1804) parseQueryResult (IfThenElseW8I32 _ _ _) (IfThenElseW8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1805) parseQueryResult (IfThenElseW8L8 _ _ _) (IfThenElseL8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1806) parseQueryResult (IfThenElseW8L8 _ _ _) (IfThenElseW8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1807) parseQueryResult (IfThenElseW8Float _ _ _) (IfThenElseFloatReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1808) parseQueryResult (IfThenElseW8Float _ _ _) (IfThenElseW8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1809) parseQueryResult (IfThenElseW16Unit _ _ _) (IfThenElseUnitReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1810) parseQueryResult (IfThenElseW16Unit _ _ _) (IfThenElseW16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1811) parseQueryResult (IfThenElseW16Bool _ _ _) (IfThenElseBoolReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1812) parseQueryResult (IfThenElseW16Bool _ _ _) (IfThenElseW16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1813) parseQueryResult (IfThenElseW16W8 _ _ _) (IfThenElseW8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1814) parseQueryResult (IfThenElseW16W8 _ _ _) (IfThenElseW16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1815) parseQueryResult (IfThenElseW16W16 _ _ _) (IfThenElseW16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1816) parseQueryResult (IfThenElseW16W16 _ _ _) (IfThenElseW16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1817) parseQueryResult (IfThenElseW16W32 _ _ _) (IfThenElseW32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1818) parseQueryResult (IfThenElseW16W32 _ _ _) (IfThenElseW16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1819) parseQueryResult (IfThenElseW16I8 _ _ _) (IfThenElseI8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1820) parseQueryResult (IfThenElseW16I8 _ _ _) (IfThenElseW16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1821) parseQueryResult (IfThenElseW16I16 _ _ _) (IfThenElseI16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1822) parseQueryResult (IfThenElseW16I16 _ _ _) (IfThenElseW16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1823) parseQueryResult (IfThenElseW16I32 _ _ _) (IfThenElseI32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1824) parseQueryResult (IfThenElseW16I32 _ _ _) (IfThenElseW16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1825) parseQueryResult (IfThenElseW16L8 _ _ _) (IfThenElseL8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1826) parseQueryResult (IfThenElseW16L8 _ _ _) (IfThenElseW16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1827) parseQueryResult (IfThenElseW16Float _ _ _) (IfThenElseFloatReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1828) parseQueryResult (IfThenElseW16Float _ _ _) (IfThenElseW16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1829) parseQueryResult (IfThenElseW32Unit _ _ _) (IfThenElseUnitReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1830) parseQueryResult (IfThenElseW32Unit _ _ _) (IfThenElseW32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1831) parseQueryResult (IfThenElseW32Bool _ _ _) (IfThenElseBoolReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1832) parseQueryResult (IfThenElseW32Bool _ _ _) (IfThenElseW32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1833) parseQueryResult (IfThenElseW32W8 _ _ _) (IfThenElseW8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1834) parseQueryResult (IfThenElseW32W8 _ _ _) (IfThenElseW32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1835) parseQueryResult (IfThenElseW32W16 _ _ _) (IfThenElseW16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1836) parseQueryResult (IfThenElseW32W16 _ _ _) (IfThenElseW32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1837) parseQueryResult (IfThenElseW32W32 _ _ _) (IfThenElseW32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1838) parseQueryResult (IfThenElseW32W32 _ _ _) (IfThenElseW32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1839) parseQueryResult (IfThenElseW32I8 _ _ _) (IfThenElseI8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1840) parseQueryResult (IfThenElseW32I8 _ _ _) (IfThenElseW32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1841) parseQueryResult (IfThenElseW32I16 _ _ _) (IfThenElseI16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1842) parseQueryResult (IfThenElseW32I16 _ _ _) (IfThenElseW32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1843) parseQueryResult (IfThenElseW32I32 _ _ _) (IfThenElseI32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1844) parseQueryResult (IfThenElseW32I32 _ _ _) (IfThenElseW32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1845) parseQueryResult (IfThenElseW32L8 _ _ _) (IfThenElseL8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1846) parseQueryResult (IfThenElseW32L8 _ _ _) (IfThenElseW32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1847) parseQueryResult (IfThenElseW32Float _ _ _) (IfThenElseFloatReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1848) parseQueryResult (IfThenElseW32Float _ _ _) (IfThenElseW32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1849) parseQueryResult (IfThenElseI8Unit _ _ _) (IfThenElseUnitReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1850) parseQueryResult (IfThenElseI8Unit _ _ _) (IfThenElseI8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1851) parseQueryResult (IfThenElseI8Bool _ _ _) (IfThenElseBoolReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1852) parseQueryResult (IfThenElseI8Bool _ _ _) (IfThenElseI8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1853) parseQueryResult (IfThenElseI8W8 _ _ _) (IfThenElseW8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1854) parseQueryResult (IfThenElseI8W8 _ _ _) (IfThenElseI8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1855) parseQueryResult (IfThenElseI8W16 _ _ _) (IfThenElseW16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1856) parseQueryResult (IfThenElseI8W16 _ _ _) (IfThenElseI8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1857) parseQueryResult (IfThenElseI8W32 _ _ _) (IfThenElseW32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1858) parseQueryResult (IfThenElseI8W32 _ _ _) (IfThenElseI8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1859) parseQueryResult (IfThenElseI8I8 _ _ _) (IfThenElseI8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1860) parseQueryResult (IfThenElseI8I8 _ _ _) (IfThenElseI8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1861) parseQueryResult (IfThenElseI8I16 _ _ _) (IfThenElseI16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1862) parseQueryResult (IfThenElseI8I16 _ _ _) (IfThenElseI8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1863) parseQueryResult (IfThenElseI8I32 _ _ _) (IfThenElseI32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1864) parseQueryResult (IfThenElseI8I32 _ _ _) (IfThenElseI8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1865) parseQueryResult (IfThenElseI8L8 _ _ _) (IfThenElseL8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1866) parseQueryResult (IfThenElseI8L8 _ _ _) (IfThenElseI8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1867) parseQueryResult (IfThenElseI8Float _ _ _) (IfThenElseFloatReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1868) parseQueryResult (IfThenElseI8Float _ _ _) (IfThenElseI8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1869) parseQueryResult (IfThenElseI16Unit _ _ _) (IfThenElseUnitReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1870) parseQueryResult (IfThenElseI16Unit _ _ _) (IfThenElseI16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1871) parseQueryResult (IfThenElseI16Bool _ _ _) (IfThenElseBoolReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1872) parseQueryResult (IfThenElseI16Bool _ _ _) (IfThenElseI16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1873) parseQueryResult (IfThenElseI16W8 _ _ _) (IfThenElseW8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1874) parseQueryResult (IfThenElseI16W8 _ _ _) (IfThenElseI16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1875) parseQueryResult (IfThenElseI16W16 _ _ _) (IfThenElseW16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1876) parseQueryResult (IfThenElseI16W16 _ _ _) (IfThenElseI16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1877) parseQueryResult (IfThenElseI16W32 _ _ _) (IfThenElseW32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1878) parseQueryResult (IfThenElseI16W32 _ _ _) (IfThenElseI16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1879) parseQueryResult (IfThenElseI16I8 _ _ _) (IfThenElseI8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1880) parseQueryResult (IfThenElseI16I8 _ _ _) (IfThenElseI16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1881) parseQueryResult (IfThenElseI16I16 _ _ _) (IfThenElseI16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1882) parseQueryResult (IfThenElseI16I16 _ _ _) (IfThenElseI16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1883) parseQueryResult (IfThenElseI16I32 _ _ _) (IfThenElseI32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1884) parseQueryResult (IfThenElseI16I32 _ _ _) (IfThenElseI16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1885) parseQueryResult (IfThenElseI16L8 _ _ _) (IfThenElseL8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1886) parseQueryResult (IfThenElseI16L8 _ _ _) (IfThenElseI16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1887) parseQueryResult (IfThenElseI16Float _ _ _) (IfThenElseFloatReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1888) parseQueryResult (IfThenElseI16Float _ _ _) (IfThenElseI16LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1889) parseQueryResult (IfThenElseI32Unit _ _ _) (IfThenElseUnitReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1890) parseQueryResult (IfThenElseI32Unit _ _ _) (IfThenElseI32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1891) parseQueryResult (IfThenElseI32Bool _ _ _) (IfThenElseBoolReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1892) parseQueryResult (IfThenElseI32Bool _ _ _) (IfThenElseI32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1893) parseQueryResult (IfThenElseI32W8 _ _ _) (IfThenElseW8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1894) parseQueryResult (IfThenElseI32W8 _ _ _) (IfThenElseI32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1895) parseQueryResult (IfThenElseI32W16 _ _ _) (IfThenElseW16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1896) parseQueryResult (IfThenElseI32W16 _ _ _) (IfThenElseI32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1897) parseQueryResult (IfThenElseI32W32 _ _ _) (IfThenElseW32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1898) parseQueryResult (IfThenElseI32W32 _ _ _) (IfThenElseI32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1899) parseQueryResult (IfThenElseI32I8 _ _ _) (IfThenElseI8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1900) parseQueryResult (IfThenElseI32I8 _ _ _) (IfThenElseI32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1901) parseQueryResult (IfThenElseI32I16 _ _ _) (IfThenElseI16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1902) parseQueryResult (IfThenElseI32I16 _ _ _) (IfThenElseI32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1903) parseQueryResult (IfThenElseI32I32 _ _ _) (IfThenElseI32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1904) parseQueryResult (IfThenElseI32I32 _ _ _) (IfThenElseI32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1905) parseQueryResult (IfThenElseI32L8 _ _ _) (IfThenElseL8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1906) parseQueryResult (IfThenElseI32L8 _ _ _) (IfThenElseI32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1907) parseQueryResult (IfThenElseI32Float _ _ _) (IfThenElseFloatReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1908) parseQueryResult (IfThenElseI32Float _ _ _) (IfThenElseI32LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1909) parseQueryResult (IfThenElseL8Unit _ _ _) (IfThenElseUnitReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1910) parseQueryResult (IfThenElseL8Unit _ _ _) (IfThenElseL8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1911) parseQueryResult (IfThenElseL8Bool _ _ _) (IfThenElseBoolReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1912) parseQueryResult (IfThenElseL8Bool _ _ _) (IfThenElseL8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1913) parseQueryResult (IfThenElseL8W8 _ _ _) (IfThenElseW8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1914) parseQueryResult (IfThenElseL8W8 _ _ _) (IfThenElseL8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1915) parseQueryResult (IfThenElseL8W16 _ _ _) (IfThenElseW16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1916) parseQueryResult (IfThenElseL8W16 _ _ _) (IfThenElseL8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1917) parseQueryResult (IfThenElseL8W32 _ _ _) (IfThenElseW32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1918) parseQueryResult (IfThenElseL8W32 _ _ _) (IfThenElseL8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1919) parseQueryResult (IfThenElseL8I8 _ _ _) (IfThenElseI8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1920) parseQueryResult (IfThenElseL8I8 _ _ _) (IfThenElseL8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1921) parseQueryResult (IfThenElseL8I16 _ _ _) (IfThenElseI16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1922) parseQueryResult (IfThenElseL8I16 _ _ _) (IfThenElseL8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1923) parseQueryResult (IfThenElseL8I32 _ _ _) (IfThenElseI32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1924) parseQueryResult (IfThenElseL8I32 _ _ _) (IfThenElseL8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1925) parseQueryResult (IfThenElseL8L8 _ _ _) (IfThenElseL8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1926) parseQueryResult (IfThenElseL8L8 _ _ _) (IfThenElseL8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1927) parseQueryResult (IfThenElseL8Float _ _ _) (IfThenElseFloatReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1928) parseQueryResult (IfThenElseL8Float _ _ _) (IfThenElseL8LeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1929) parseQueryResult (IfThenElseFloatUnit _ _ _) (IfThenElseUnitReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1930) parseQueryResult (IfThenElseFloatUnit _ _ _) (IfThenElseFloatLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1931) parseQueryResult (IfThenElseFloatBool _ _ _) (IfThenElseBoolReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1932) parseQueryResult (IfThenElseFloatBool _ _ _) (IfThenElseFloatLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1933) parseQueryResult (IfThenElseFloatW8 _ _ _) (IfThenElseW8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1934) parseQueryResult (IfThenElseFloatW8 _ _ _) (IfThenElseFloatLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1935) parseQueryResult (IfThenElseFloatW16 _ _ _) (IfThenElseW16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1936) parseQueryResult (IfThenElseFloatW16 _ _ _) (IfThenElseFloatLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1937) parseQueryResult (IfThenElseFloatW32 _ _ _) (IfThenElseW32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1938) parseQueryResult (IfThenElseFloatW32 _ _ _) (IfThenElseFloatLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1939) parseQueryResult (IfThenElseFloatI8 _ _ _) (IfThenElseI8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1940) parseQueryResult (IfThenElseFloatI8 _ _ _) (IfThenElseFloatLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1941) parseQueryResult (IfThenElseFloatI16 _ _ _) (IfThenElseI16Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1942) parseQueryResult (IfThenElseFloatI16 _ _ _) (IfThenElseFloatLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1943) parseQueryResult (IfThenElseFloatI32 _ _ _) (IfThenElseI32Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1944) parseQueryResult (IfThenElseFloatI32 _ _ _) (IfThenElseFloatLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1945) parseQueryResult (IfThenElseFloatL8 _ _ _) (IfThenElseL8Reply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1946) parseQueryResult (IfThenElseFloatL8 _ _ _) (IfThenElseFloatLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1947) parseQueryResult (IfThenElseFloatFloat _ _ _) (IfThenElseFloatReply r) = Just $ ExprRight $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1948) parseQueryResult (IfThenElseFloatFloat _ _ _) (IfThenElseFloatLeftReply r) = Just $ ExprLeft $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1949) parseQueryResult (IterateUnitUnitE _ _) (IterateUnitReply) = Just $ LitUnit
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1950) parseQueryResult (IterateUnitBoolE _ _) (IterateBoolReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1951) parseQueryResult (IterateUnitW8E _ _) (IterateW8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1952) parseQueryResult (IterateUnitW16E _ _) (IterateW16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1953) parseQueryResult (IterateUnitW32E _ _) (IterateW32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1954) parseQueryResult (IterateUnitI8E _ _) (IterateI8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1955) parseQueryResult (IterateUnitI16E _ _) (IterateI16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1956) parseQueryResult (IterateUnitI32E _ _) (IterateI32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1957) parseQueryResult (IterateUnitL8E _ _) (IterateL8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1958) parseQueryResult (IterateUnitFloatE _ _) (IterateFloatReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1959) parseQueryResult (IterateBoolUnitE _ _) (IterateUnitReply) = Just $ LitUnit
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1960) parseQueryResult (IterateBoolBoolE _ _) (IterateBoolReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1961) parseQueryResult (IterateBoolW8E _ _) (IterateW8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1962) parseQueryResult (IterateBoolW16E _ _) (IterateW16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1963) parseQueryResult (IterateBoolW32E _ _) (IterateW32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1964) parseQueryResult (IterateBoolI8E _ _) (IterateI8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1965) parseQueryResult (IterateBoolI16E _ _) (IterateI16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1966) parseQueryResult (IterateBoolI32E _ _) (IterateI32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1967) parseQueryResult (IterateBoolL8E _ _) (IterateL8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1968) parseQueryResult (IterateBoolFloatE _ _) (IterateFloatReply r) = Just $ lit r
4d8e4724 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:23:59 -0500 1969) parseQueryResult (IterateW8UnitE _ _) (IterateUnitReply) = Just $ LitUnit
4d8e4724 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 21:23:59 -0500 1970) parseQueryResult (IterateW8BoolE _ _) (IterateBoolReply r) = Just $ lit r
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1971) parseQueryResult (IterateW8W8E _ _) (IterateW8Reply r) = Just $ lit r
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1972) parseQueryResult (IterateW8W16E _ _) (IterateW16Reply r) = Just $ lit r
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1973) parseQueryResult (IterateW8W32E _ _) (IterateW32Reply r) = Just $ lit r
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1974) parseQueryResult (IterateW8I8E _ _) (IterateI8Reply r) = Just $ lit r
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1975) parseQueryResult (IterateW8I16E _ _) (IterateI16Reply r) = Just $ lit r
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1976) parseQueryResult (IterateW8I32E _ _) (IterateI32Reply r) = Just $ lit r
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1977) parseQueryResult (IterateW8L8E _ _) (IterateL8Reply r) = Just $ lit r
0122410c System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-24 06:28:40 -0500 1978) parseQueryResult (IterateW8FloatE _ _) (IterateFloatReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1979) parseQueryResult (IterateW16UnitE _ _) (IterateUnitReply) = Just $ LitUnit
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1980) parseQueryResult (IterateW16BoolE _ _) (IterateBoolReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1981) parseQueryResult (IterateW16W8E _ _) (IterateW8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1982) parseQueryResult (IterateW16W16E _ _) (IterateW16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1983) parseQueryResult (IterateW16W32E _ _) (IterateW32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1984) parseQueryResult (IterateW16I8E _ _) (IterateI8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1985) parseQueryResult (IterateW16I16E _ _) (IterateI16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1986) parseQueryResult (IterateW16I32E _ _) (IterateI32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1987) parseQueryResult (IterateW16L8E _ _) (IterateL8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1988) parseQueryResult (IterateW16FloatE _ _) (IterateFloatReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1989) parseQueryResult (IterateW32UnitE _ _) (IterateUnitReply) = Just $ LitUnit
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1990) parseQueryResult (IterateW32BoolE _ _) (IterateBoolReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1991) parseQueryResult (IterateW32W8E _ _) (IterateW8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1992) parseQueryResult (IterateW32W16E _ _) (IterateW16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1993) parseQueryResult (IterateW32W32E _ _) (IterateW32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1994) parseQueryResult (IterateW32I8E _ _) (IterateI8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1995) parseQueryResult (IterateW32I16E _ _) (IterateI16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1996) parseQueryResult (IterateW32I32E _ _) (IterateI32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1997) parseQueryResult (IterateW32L8E _ _) (IterateL8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1998) parseQueryResult (IterateW32FloatE _ _) (IterateFloatReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 1999) parseQueryResult (IterateI8UnitE _ _) (IterateUnitReply) = Just $ LitUnit
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2000) parseQueryResult (IterateI8BoolE _ _) (IterateBoolReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2001) parseQueryResult (IterateI8W8E _ _) (IterateW8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2002) parseQueryResult (IterateI8W16E _ _) (IterateW16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2003) parseQueryResult (IterateI8W32E _ _) (IterateW32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2004) parseQueryResult (IterateI8I8E _ _) (IterateI8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2005) parseQueryResult (IterateI8I16E _ _) (IterateI16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2006) parseQueryResult (IterateI8I32E _ _) (IterateI32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2007) parseQueryResult (IterateI8L8E _ _) (IterateL8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2008) parseQueryResult (IterateI8FloatE _ _) (IterateFloatReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2009) parseQueryResult (IterateI16UnitE _ _) (IterateUnitReply) = Just $ LitUnit
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2010) parseQueryResult (IterateI16BoolE _ _) (IterateBoolReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2011) parseQueryResult (IterateI16W8E _ _) (IterateW8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2012) parseQueryResult (IterateI16W16E _ _) (IterateW16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2013) parseQueryResult (IterateI16W32E _ _) (IterateW32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2014) parseQueryResult (IterateI16I8E _ _) (IterateI8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2015) parseQueryResult (IterateI16I16E _ _) (IterateI16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2016) parseQueryResult (IterateI16I32E _ _) (IterateI32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2017) parseQueryResult (IterateI16L8E _ _) (IterateL8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2018) parseQueryResult (IterateI16FloatE _ _) (IterateFloatReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2019) parseQueryResult (IterateI32UnitE _ _) (IterateUnitReply) = Just $ LitUnit
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2020) parseQueryResult (IterateI32BoolE _ _) (IterateBoolReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2021) parseQueryResult (IterateI32W8E _ _) (IterateW8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2022) parseQueryResult (IterateI32W16E _ _) (IterateW16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2023) parseQueryResult (IterateI32W32E _ _) (IterateW32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2024) parseQueryResult (IterateI32I8E _ _) (IterateI8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2025) parseQueryResult (IterateI32I16E _ _) (IterateI16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2026) parseQueryResult (IterateI32I32E _ _) (IterateI32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2027) parseQueryResult (IterateI32L8E _ _) (IterateL8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2028) parseQueryResult (IterateI32FloatE _ _) (IterateFloatReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2029) parseQueryResult (IterateL8UnitE _ _) (IterateUnitReply) = Just $ LitUnit
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2030) parseQueryResult (IterateL8BoolE _ _) (IterateBoolReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2031) parseQueryResult (IterateL8W8E _ _) (IterateW8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2032) parseQueryResult (IterateL8W16E _ _) (IterateW16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2033) parseQueryResult (IterateL8W32E _ _) (IterateW32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2034) parseQueryResult (IterateL8I8E _ _) (IterateI8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2035) parseQueryResult (IterateL8I16E _ _) (IterateI16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2036) parseQueryResult (IterateL8I32E _ _) (IterateI32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2037) parseQueryResult (IterateL8L8E _ _) (IterateL8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2038) parseQueryResult (IterateL8FloatE _ _) (IterateFloatReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2039) parseQueryResult (IterateFloatUnitE _ _) (IterateUnitReply) = Just $ LitUnit
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2040) parseQueryResult (IterateFloatBoolE _ _) (IterateBoolReply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2041) parseQueryResult (IterateFloatW8E _ _) (IterateW8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2042) parseQueryResult (IterateFloatW16E _ _) (IterateW16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2043) parseQueryResult (IterateFloatW32E _ _) (IterateW32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2044) parseQueryResult (IterateFloatI8E _ _) (IterateI8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2045) parseQueryResult (IterateFloatI16E _ _) (IterateI16Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2046) parseQueryResult (IterateFloatI32E _ _) (IterateI32Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2047) parseQueryResult (IterateFloatL8E _ _) (IterateL8Reply r) = Just $ lit r
3da06f50 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-25 19:13:17 -0500 2048) parseQueryResult (IterateFloatFloatE _ _) (IterateFloatReply r) = Just $ lit r
94a91444 System/Hardware/Haskino/Protocol.hs     (Mark Grebe 2017-07-10 20:36:57 -0500 2049) parseQueryResult _q _r = Nothing
